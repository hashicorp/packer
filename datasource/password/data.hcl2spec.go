// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package password

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName     *string           `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name"`
	PackerBuilderType   *string           `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type"`
	PackerCoreVersion   *string           `mapstructure:"packer_core_version" cty:"packer_core_version" hcl:"packer_core_version"`
	PackerDebug         *bool             `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug"`
	PackerForce         *bool             `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force"`
	PackerOnError       *string           `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error"`
	PackerUserVars      map[string]string `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables"`
	PackerSensitiveVars []string          `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables"`
	Length              *int64            `mapstructure:"length" required:"true" cty:"length" hcl:"length"`
	Special             *bool             `mapstructure:"special" required:"false" cty:"special" hcl:"special"`
	Upper               *bool             `mapstructure:"upper" required:"false" cty:"upper" hcl:"upper"`
	Lower               *bool             `mapstructure:"lower" required:"false" cty:"lower" hcl:"lower"`
	Numeric             *bool             `mapstructure:"numeric" required:"false" cty:"numeric" hcl:"numeric"`
	MinNumeric          *int64            `mapstructure:"min_numeric" required:"false" cty:"min_numeric" hcl:"min_numeric"`
	MinUpper            *int64            `mapstructure:"min_upper" required:"false" cty:"min_upper" hcl:"min_upper"`
	MinLower            *int64            `mapstructure:"min_lower" required:"false" cty:"min_lower" hcl:"min_lower"`
	MinSpecial          *int64            `mapstructure:"min_special" required:"false" cty:"min_special" hcl:"min_special"`
	OverrideSpecial     *string           `mapstructure:"override_special" required:"false" cty:"override_special" hcl:"override_special"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"packer_build_name":          &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"packer_builder_type":        &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"packer_core_version":        &hcldec.AttrSpec{Name: "packer_core_version", Type: cty.String, Required: false},
		"packer_debug":               &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"packer_force":               &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"packer_on_error":            &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"packer_user_variables":      &hcldec.AttrSpec{Name: "packer_user_variables", Type: cty.Map(cty.String), Required: false},
		"packer_sensitive_variables": &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"length":                     &hcldec.AttrSpec{Name: "length", Type: cty.Number, Required: false},
		"special":                    &hcldec.AttrSpec{Name: "special", Type: cty.Bool, Required: false},
		"upper":                      &hcldec.AttrSpec{Name: "upper", Type: cty.Bool, Required: false},
		"lower":                      &hcldec.AttrSpec{Name: "lower", Type: cty.Bool, Required: false},
		"numeric":                    &hcldec.AttrSpec{Name: "numeric", Type: cty.Bool, Required: false},
		"min_numeric":                &hcldec.AttrSpec{Name: "min_numeric", Type: cty.Number, Required: false},
		"min_upper":                  &hcldec.AttrSpec{Name: "min_upper", Type: cty.Number, Required: false},
		"min_lower":                  &hcldec.AttrSpec{Name: "min_lower", Type: cty.Number, Required: false},
		"min_special":                &hcldec.AttrSpec{Name: "min_special", Type: cty.Number, Required: false},
		"override_special":           &hcldec.AttrSpec{Name: "override_special", Type: cty.String, Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	Result     *string `mapstructure:"result" cty:"result" hcl:"result"`
	BcryptHash *string `mapstructure:"bcrypt_hash" cty:"bcrypt_hash" hcl:"bcrypt_hash"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"result":      &hcldec.AttrSpec{Name: "result", Type: cty.String, Required: false},
		"bcrypt_hash": &hcldec.AttrSpec{Name: "bcrypt_hash", Type: cty.String, Required: false},
	}
	return s
}
