// Code generated by "mapstructure-to-hcl2 -type MachineImageFilter"; DO NOT EDIT.
package triton

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatMachineImageFilter is an auto-generated flat version of MachineImageFilter.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatMachineImageFilter struct {
	MostRecent *bool   `mapstructure:"most_recent" cty:"most_recent"`
	Name       *string `cty:"name"`
	OS         *string `cty:"os"`
	Version    *string `cty:"version"`
	Public     *bool   `cty:"public"`
	State      *string `cty:"state"`
	Owner      *string `cty:"owner"`
	Type       *string `cty:"type"`
}

// FlatMapstructure returns a new FlatMachineImageFilter.
// FlatMachineImageFilter is an auto-generated flat version of MachineImageFilter.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*MachineImageFilter) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatMachineImageFilter)
}

// HCL2Spec returns the hcl spec of a MachineImageFilter.
// This spec is used by HCL to read the fields of MachineImageFilter.
// The decoded values from this spec will then be applied to a FlatMachineImageFilter.
func (*FlatMachineImageFilter) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"most_recent": &hcldec.AttrSpec{Name: "most_recent", Type: cty.Bool, Required: false},
		"name":        &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"os":          &hcldec.AttrSpec{Name: "os", Type: cty.String, Required: false},
		"version":     &hcldec.AttrSpec{Name: "version", Type: cty.String, Required: false},
		"public":      &hcldec.AttrSpec{Name: "public", Type: cty.Bool, Required: false},
		"state":       &hcldec.AttrSpec{Name: "state", Type: cty.String, Required: false},
		"owner":       &hcldec.AttrSpec{Name: "owner", Type: cty.String, Required: false},
		"type":        &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
	}
	return s
}
