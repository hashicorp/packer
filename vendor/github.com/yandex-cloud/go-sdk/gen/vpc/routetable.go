// Code generated by sdkgen. DO NOT EDIT.

//nolint
package vpc

import (
	"context"

	"google.golang.org/grpc"

	"github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1"
)

//revive:disable

// RouteTableServiceClient is a vpc.RouteTableServiceClient with
// lazy GRPC connection initialization.
type RouteTableServiceClient struct {
	getConn func(ctx context.Context) (*grpc.ClientConn, error)
}

var _ vpc.RouteTableServiceClient = &RouteTableServiceClient{}

// Create implements vpc.RouteTableServiceClient
func (c *RouteTableServiceClient) Create(ctx context.Context, in *vpc.CreateRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(conn).Create(ctx, in, opts...)
}

// Delete implements vpc.RouteTableServiceClient
func (c *RouteTableServiceClient) Delete(ctx context.Context, in *vpc.DeleteRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(conn).Delete(ctx, in, opts...)
}

// Get implements vpc.RouteTableServiceClient
func (c *RouteTableServiceClient) Get(ctx context.Context, in *vpc.GetRouteTableRequest, opts ...grpc.CallOption) (*vpc.RouteTable, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(conn).Get(ctx, in, opts...)
}

// List implements vpc.RouteTableServiceClient
func (c *RouteTableServiceClient) List(ctx context.Context, in *vpc.ListRouteTablesRequest, opts ...grpc.CallOption) (*vpc.ListRouteTablesResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(conn).List(ctx, in, opts...)
}

// ListOperations implements vpc.RouteTableServiceClient
func (c *RouteTableServiceClient) ListOperations(ctx context.Context, in *vpc.ListRouteTableOperationsRequest, opts ...grpc.CallOption) (*vpc.ListRouteTableOperationsResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(conn).ListOperations(ctx, in, opts...)
}

// Update implements vpc.RouteTableServiceClient
func (c *RouteTableServiceClient) Update(ctx context.Context, in *vpc.UpdateRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return vpc.NewRouteTableServiceClient(conn).Update(ctx, in, opts...)
}
