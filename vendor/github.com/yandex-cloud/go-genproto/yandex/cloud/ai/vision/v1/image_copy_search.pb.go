// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/ai/vision/v1/image_copy_search.proto

package vision

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageCopySearchAnnotation struct {
	// Number of image copies
	CopyCount int64 `protobuf:"varint,1,opt,name=copy_count,json=copyCount,proto3" json:"copy_count,omitempty"`
	// Top relevance result of image copy search
	TopResults           []*CopyMatch `protobuf:"bytes,2,rep,name=top_results,json=topResults,proto3" json:"top_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ImageCopySearchAnnotation) Reset()         { *m = ImageCopySearchAnnotation{} }
func (m *ImageCopySearchAnnotation) String() string { return proto.CompactTextString(m) }
func (*ImageCopySearchAnnotation) ProtoMessage()    {}
func (*ImageCopySearchAnnotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_6781c0cf9dfefbb7, []int{0}
}

func (m *ImageCopySearchAnnotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageCopySearchAnnotation.Unmarshal(m, b)
}
func (m *ImageCopySearchAnnotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageCopySearchAnnotation.Marshal(b, m, deterministic)
}
func (m *ImageCopySearchAnnotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageCopySearchAnnotation.Merge(m, src)
}
func (m *ImageCopySearchAnnotation) XXX_Size() int {
	return xxx_messageInfo_ImageCopySearchAnnotation.Size(m)
}
func (m *ImageCopySearchAnnotation) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageCopySearchAnnotation.DiscardUnknown(m)
}

var xxx_messageInfo_ImageCopySearchAnnotation proto.InternalMessageInfo

func (m *ImageCopySearchAnnotation) GetCopyCount() int64 {
	if m != nil {
		return m.CopyCount
	}
	return 0
}

func (m *ImageCopySearchAnnotation) GetTopResults() []*CopyMatch {
	if m != nil {
		return m.TopResults
	}
	return nil
}

type CopyMatch struct {
	//url of image
	ImageUrl string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	//url of page that contains image
	PageUrl string `protobuf:"bytes,2,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
	//page title that contains image
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	//image description
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyMatch) Reset()         { *m = CopyMatch{} }
func (m *CopyMatch) String() string { return proto.CompactTextString(m) }
func (*CopyMatch) ProtoMessage()    {}
func (*CopyMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_6781c0cf9dfefbb7, []int{1}
}

func (m *CopyMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CopyMatch.Unmarshal(m, b)
}
func (m *CopyMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CopyMatch.Marshal(b, m, deterministic)
}
func (m *CopyMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyMatch.Merge(m, src)
}
func (m *CopyMatch) XXX_Size() int {
	return xxx_messageInfo_CopyMatch.Size(m)
}
func (m *CopyMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyMatch.DiscardUnknown(m)
}

var xxx_messageInfo_CopyMatch proto.InternalMessageInfo

func (m *CopyMatch) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *CopyMatch) GetPageUrl() string {
	if m != nil {
		return m.PageUrl
	}
	return ""
}

func (m *CopyMatch) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CopyMatch) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*ImageCopySearchAnnotation)(nil), "yandex.cloud.ai.vision.v1.ImageCopySearchAnnotation")
	proto.RegisterType((*CopyMatch)(nil), "yandex.cloud.ai.vision.v1.CopyMatch")
}

func init() {
	proto.RegisterFile("yandex/cloud/ai/vision/v1/image_copy_search.proto", fileDescriptor_6781c0cf9dfefbb7)
}

var fileDescriptor_6781c0cf9dfefbb7 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4f, 0xf3, 0x30,
	0x10, 0xc5, 0xd5, 0xf6, 0xfb, 0xa0, 0xb9, 0x6c, 0x16, 0x43, 0x22, 0x54, 0x29, 0xaa, 0x18, 0xba,
	0xd4, 0x56, 0x60, 0x64, 0x82, 0xc2, 0xc0, 0xc0, 0x12, 0xc4, 0xc2, 0x12, 0xb9, 0x8e, 0x95, 0x58,
	0x4a, 0x7d, 0x96, 0xe3, 0x44, 0x44, 0x4c, 0xfc, 0xe7, 0x28, 0x36, 0x20, 0x3a, 0x74, 0xb3, 0xdf,
	0xbb, 0x9f, 0xdf, 0xdd, 0x19, 0xf2, 0x91, 0xeb, 0x4a, 0xbe, 0x33, 0xd1, 0x62, 0x5f, 0x31, 0xae,
	0xd8, 0xa0, 0x3a, 0x85, 0x9a, 0x0d, 0x39, 0x53, 0x07, 0x5e, 0xcb, 0x52, 0xa0, 0x19, 0xcb, 0x4e,
	0x72, 0x2b, 0x1a, 0x6a, 0x2c, 0x3a, 0x24, 0x69, 0x40, 0xa8, 0x47, 0x28, 0x57, 0x34, 0x20, 0x74,
	0xc8, 0xd7, 0x9f, 0x33, 0x48, 0x9f, 0x26, 0x6c, 0x87, 0x66, 0x7c, 0xf1, 0xd0, 0x9d, 0xd6, 0xe8,
	0xb8, 0x53, 0xa8, 0xc9, 0x0a, 0xc0, 0xbf, 0x26, 0xb0, 0xd7, 0x2e, 0x99, 0x65, 0xb3, 0xcd, 0xa2,
	0x88, 0x26, 0x65, 0x37, 0x09, 0xe4, 0x11, 0x62, 0x87, 0xa6, 0xb4, 0xb2, 0xeb, 0x5b, 0xd7, 0x25,
	0xf3, 0x6c, 0xb1, 0x89, 0xaf, 0xaf, 0xe8, 0xc9, 0x34, 0x3a, 0x85, 0x3c, 0x73, 0x27, 0x9a, 0x02,
	0x1c, 0x9a, 0x22, 0x70, 0xeb, 0x0f, 0x88, 0x7e, 0x0d, 0x72, 0x09, 0x51, 0x18, 0xa3, 0xb7, 0xad,
	0x4f, 0x8c, 0x8a, 0xa5, 0x17, 0x5e, 0x6d, 0x4b, 0x52, 0x58, 0x9a, 0x1f, 0x6f, 0xee, 0xbd, 0x73,
	0xf3, 0x6d, 0x5d, 0xc0, 0x7f, 0xa7, 0x5c, 0x2b, 0x93, 0x85, 0xd7, 0xc3, 0x85, 0x64, 0x10, 0x57,
	0xb2, 0x13, 0x56, 0x99, 0x69, 0x9e, 0xe4, 0x9f, 0xf7, 0xfe, 0x4a, 0xf7, 0x12, 0x56, 0xc7, 0xfd,
	0x1a, 0x75, 0xd4, 0xf3, 0xdb, 0x43, 0xad, 0x5c, 0xd3, 0xef, 0xa9, 0xc0, 0x03, 0x0b, 0x95, 0xdb,
	0xb0, 0xfa, 0x1a, 0xb7, 0xb5, 0xd4, 0x7e, 0xc3, 0xec, 0xe4, 0x9f, 0xdc, 0x86, 0xd3, 0xfe, 0xcc,
	0xd7, 0xdd, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xf6, 0xdf, 0xb9, 0xbe, 0x01, 0x00, 0x00,
}
