// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/redis/v1alpha/config/redis5_0.proto

package redis // import "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/redis/v1alpha/config"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RedisConfig5_0_MaxmemoryPolicy int32

const (
	RedisConfig5_0_MAXMEMORY_POLICY_UNSPECIFIED RedisConfig5_0_MaxmemoryPolicy = 0
	// Try to remove less recently used (LRU) keys with `expire set`.
	RedisConfig5_0_VOLATILE_LRU RedisConfig5_0_MaxmemoryPolicy = 1
	// Remove less recently used (LRU) keys.
	RedisConfig5_0_ALLKEYS_LRU RedisConfig5_0_MaxmemoryPolicy = 2
	// Try to remove least frequently used (LFU) keys with `expire set`.
	RedisConfig5_0_VOLATILE_LFU RedisConfig5_0_MaxmemoryPolicy = 3
	// Remove least frequently used (LFU) keys.
	RedisConfig5_0_ALLKEYS_LFU RedisConfig5_0_MaxmemoryPolicy = 4
	// Try to remove keys with `expire set` randomly.
	RedisConfig5_0_VOLATILE_RANDOM RedisConfig5_0_MaxmemoryPolicy = 5
	// Remove keys randomly.
	RedisConfig5_0_ALLKEYS_RANDOM RedisConfig5_0_MaxmemoryPolicy = 6
	// Try to remove less recently used (LRU) keys with `expire set`
	// and shorter TTL first.
	RedisConfig5_0_VOLATILE_TTL RedisConfig5_0_MaxmemoryPolicy = 7
	// Return errors when memory limit was reached and commands could require
	// more memory to be used.
	RedisConfig5_0_NOEVICTION RedisConfig5_0_MaxmemoryPolicy = 8
)

var RedisConfig5_0_MaxmemoryPolicy_name = map[int32]string{
	0: "MAXMEMORY_POLICY_UNSPECIFIED",
	1: "VOLATILE_LRU",
	2: "ALLKEYS_LRU",
	3: "VOLATILE_LFU",
	4: "ALLKEYS_LFU",
	5: "VOLATILE_RANDOM",
	6: "ALLKEYS_RANDOM",
	7: "VOLATILE_TTL",
	8: "NOEVICTION",
}
var RedisConfig5_0_MaxmemoryPolicy_value = map[string]int32{
	"MAXMEMORY_POLICY_UNSPECIFIED": 0,
	"VOLATILE_LRU":                 1,
	"ALLKEYS_LRU":                  2,
	"VOLATILE_LFU":                 3,
	"ALLKEYS_LFU":                  4,
	"VOLATILE_RANDOM":              5,
	"ALLKEYS_RANDOM":               6,
	"VOLATILE_TTL":                 7,
	"NOEVICTION":                   8,
}

func (x RedisConfig5_0_MaxmemoryPolicy) String() string {
	return proto.EnumName(RedisConfig5_0_MaxmemoryPolicy_name, int32(x))
}
func (RedisConfig5_0_MaxmemoryPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_redis5_0_e003f487f83590f3, []int{0, 0}
}

// Fields and structure of `RedisConfig` reflects Redis configuration file
// parameters.
type RedisConfig5_0 struct {
	// Redis key eviction policy for a dataset that reaches maximum memory,
	// available to the host. Redis maxmemory setting depends on Managed
	// Service for Redis [host class](/docs/managed-redis/concepts/instance-types).
	//
	// All policies are described in detail in [Redis documentation](https://redis.io/topics/lru-cache).
	MaxmemoryPolicy RedisConfig5_0_MaxmemoryPolicy `protobuf:"varint,1,opt,name=maxmemory_policy,json=maxmemoryPolicy,proto3,enum=yandex.cloud.mdb.redis.v1alpha.config.RedisConfig5_0_MaxmemoryPolicy" json:"maxmemory_policy,omitempty"`
	// Time that Redis keeps the connection open while the client is idle.
	// If no new command is sent during that time, the connection is closed.
	Timeout *wrappers.Int64Value `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Authentication password.
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisConfig5_0) Reset()         { *m = RedisConfig5_0{} }
func (m *RedisConfig5_0) String() string { return proto.CompactTextString(m) }
func (*RedisConfig5_0) ProtoMessage()    {}
func (*RedisConfig5_0) Descriptor() ([]byte, []int) {
	return fileDescriptor_redis5_0_e003f487f83590f3, []int{0}
}
func (m *RedisConfig5_0) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisConfig5_0.Unmarshal(m, b)
}
func (m *RedisConfig5_0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisConfig5_0.Marshal(b, m, deterministic)
}
func (dst *RedisConfig5_0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisConfig5_0.Merge(dst, src)
}
func (m *RedisConfig5_0) XXX_Size() int {
	return xxx_messageInfo_RedisConfig5_0.Size(m)
}
func (m *RedisConfig5_0) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisConfig5_0.DiscardUnknown(m)
}

var xxx_messageInfo_RedisConfig5_0 proto.InternalMessageInfo

func (m *RedisConfig5_0) GetMaxmemoryPolicy() RedisConfig5_0_MaxmemoryPolicy {
	if m != nil {
		return m.MaxmemoryPolicy
	}
	return RedisConfig5_0_MAXMEMORY_POLICY_UNSPECIFIED
}

func (m *RedisConfig5_0) GetTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RedisConfig5_0) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RedisConfigSet5_0 struct {
	// Effective settings for a Redis 5.0 cluster (a combination of settings
	// defined in [user_config] and [default_config]).
	EffectiveConfig *RedisConfig5_0 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Redis 5.0 cluster.
	UserConfig *RedisConfig5_0 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Redis 5.0 cluster.
	DefaultConfig        *RedisConfig5_0 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RedisConfigSet5_0) Reset()         { *m = RedisConfigSet5_0{} }
func (m *RedisConfigSet5_0) String() string { return proto.CompactTextString(m) }
func (*RedisConfigSet5_0) ProtoMessage()    {}
func (*RedisConfigSet5_0) Descriptor() ([]byte, []int) {
	return fileDescriptor_redis5_0_e003f487f83590f3, []int{1}
}
func (m *RedisConfigSet5_0) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisConfigSet5_0.Unmarshal(m, b)
}
func (m *RedisConfigSet5_0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisConfigSet5_0.Marshal(b, m, deterministic)
}
func (dst *RedisConfigSet5_0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisConfigSet5_0.Merge(dst, src)
}
func (m *RedisConfigSet5_0) XXX_Size() int {
	return xxx_messageInfo_RedisConfigSet5_0.Size(m)
}
func (m *RedisConfigSet5_0) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisConfigSet5_0.DiscardUnknown(m)
}

var xxx_messageInfo_RedisConfigSet5_0 proto.InternalMessageInfo

func (m *RedisConfigSet5_0) GetEffectiveConfig() *RedisConfig5_0 {
	if m != nil {
		return m.EffectiveConfig
	}
	return nil
}

func (m *RedisConfigSet5_0) GetUserConfig() *RedisConfig5_0 {
	if m != nil {
		return m.UserConfig
	}
	return nil
}

func (m *RedisConfigSet5_0) GetDefaultConfig() *RedisConfig5_0 {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*RedisConfig5_0)(nil), "yandex.cloud.mdb.redis.v1alpha.config.RedisConfig5_0")
	proto.RegisterType((*RedisConfigSet5_0)(nil), "yandex.cloud.mdb.redis.v1alpha.config.RedisConfigSet5_0")
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1alpha.config.RedisConfig5_0_MaxmemoryPolicy", RedisConfig5_0_MaxmemoryPolicy_name, RedisConfig5_0_MaxmemoryPolicy_value)
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/redis/v1alpha/config/redis5_0.proto", fileDescriptor_redis5_0_e003f487f83590f3)
}

var fileDescriptor_redis5_0_e003f487f83590f3 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x71, 0x02, 0x6d, 0x39, 0x01, 0x7b, 0x18, 0x36, 0x55, 0x41, 0x28, 0x8a, 0x84, 0x94,
	0x4d, 0xc7, 0x25, 0x34, 0x6c, 0x58, 0x85, 0xd4, 0x91, 0x2c, 0xec, 0x38, 0x38, 0x17, 0x11, 0x84,
	0x64, 0x7c, 0x19, 0xbb, 0x96, 0xec, 0x8c, 0xe5, 0x4b, 0xdb, 0xbc, 0x0b, 0x6f, 0xc0, 0x6b, 0xf0,
	0x60, 0x28, 0x33, 0x71, 0x84, 0x59, 0x55, 0x74, 0x39, 0xbf, 0xfe, 0xff, 0x3b, 0x47, 0xe7, 0xcc,
	0x81, 0xcb, 0xad, 0xbb, 0x09, 0xe8, 0x9d, 0xea, 0x27, 0xac, 0x0a, 0xd4, 0x34, 0xf0, 0xd4, 0x9c,
	0x06, 0x71, 0xa1, 0xde, 0xbc, 0x73, 0x93, 0xec, 0xda, 0x55, 0x7d, 0xb6, 0x09, 0xe3, 0x48, 0x88,
	0x43, 0xe7, 0x82, 0x64, 0x39, 0x2b, 0x19, 0x7e, 0x2b, 0x52, 0x84, 0xa7, 0x48, 0x1a, 0x78, 0x84,
	0x1b, 0xc8, 0x3e, 0x45, 0x44, 0xea, 0xec, 0x4d, 0xc4, 0x58, 0x94, 0x50, 0x95, 0x87, 0xbc, 0x2a,
	0x54, 0x6f, 0x73, 0x37, 0xcb, 0x68, 0x5e, 0x08, 0x4c, 0xef, 0x67, 0x1b, 0x64, 0x7b, 0x17, 0x1c,
	0x73, 0xff, 0xd0, 0xb9, 0xc0, 0x19, 0xa0, 0xd4, 0xbd, 0x4b, 0x69, 0xca, 0xf2, 0xad, 0x93, 0xb1,
	0x24, 0xf6, 0xb7, 0xa7, 0x52, 0x57, 0xea, 0xcb, 0x03, 0x8d, 0xdc, 0xab, 0x28, 0x69, 0x02, 0x89,
	0x59, 0xd3, 0x66, 0x1c, 0x66, 0x2b, 0x69, 0x53, 0xc0, 0x43, 0x38, 0x2e, 0xe3, 0x94, 0xb2, 0xaa,
	0x3c, 0x6d, 0x75, 0xa5, 0x7e, 0x67, 0xf0, 0x8a, 0x88, 0xb6, 0x49, 0xdd, 0x36, 0xd1, 0x37, 0xe5,
	0x87, 0xcb, 0x95, 0x9b, 0x54, 0xd4, 0xae, 0xbd, 0xf8, 0x0c, 0x4e, 0x32, 0xb7, 0x28, 0x6e, 0x59,
	0x1e, 0x9c, 0xb6, 0xbb, 0x52, 0xff, 0xa9, 0x7d, 0x78, 0xf7, 0x7e, 0x4b, 0xa0, 0xfc, 0x53, 0x17,
	0x77, 0xe1, 0xb5, 0x39, 0xfa, 0x6a, 0x6a, 0xa6, 0x65, 0xaf, 0x9d, 0x99, 0x65, 0xe8, 0xe3, 0xb5,
	0xb3, 0x9c, 0xce, 0x67, 0xda, 0x58, 0x9f, 0xe8, 0xda, 0x15, 0x7a, 0x84, 0x11, 0x3c, 0x5b, 0x59,
	0xc6, 0x68, 0xa1, 0x1b, 0x9a, 0x63, 0xd8, 0x4b, 0x24, 0x61, 0x05, 0x3a, 0x23, 0xc3, 0xf8, 0xac,
	0xad, 0xe7, 0x5c, 0x68, 0x35, 0x2d, 0x93, 0x25, 0x6a, 0x37, 0x2c, 0x93, 0x25, 0x7a, 0x8c, 0x5f,
	0x82, 0x72, 0xb0, 0xd8, 0xa3, 0xe9, 0x95, 0x65, 0xa2, 0x27, 0x18, 0x83, 0x5c, 0xbb, 0xf6, 0xda,
	0x51, 0x83, 0xb5, 0x58, 0x18, 0xe8, 0x18, 0xcb, 0x00, 0x53, 0x4b, 0x5b, 0xe9, 0xe3, 0x85, 0x6e,
	0x4d, 0xd1, 0x49, 0xef, 0x57, 0x0b, 0x5e, 0xfc, 0x35, 0xcd, 0x39, 0x2d, 0x77, 0x1b, 0xfa, 0x01,
	0x88, 0x86, 0x21, 0xf5, 0xcb, 0xf8, 0x86, 0x3a, 0x62, 0xe6, 0x7c, 0x43, 0x9d, 0xc1, 0xf0, 0xbf,
	0x36, 0x64, 0x2b, 0x07, 0x9c, 0xd0, 0xf0, 0x0a, 0x3a, 0x55, 0x41, 0xf3, 0x1a, 0xde, 0x7a, 0x08,
	0x1c, 0x76, 0xa4, 0x3d, 0xf7, 0x3b, 0xc8, 0x01, 0x0d, 0xdd, 0x2a, 0x29, 0x6b, 0x74, 0xfb, 0x21,
	0xe8, 0xe7, 0x7b, 0x98, 0x50, 0x3e, 0x7d, 0xf9, 0x66, 0x45, 0x71, 0x79, 0x5d, 0x79, 0xc4, 0x67,
	0xa9, 0x2a, 0x88, 0xe7, 0xe2, 0xac, 0x22, 0x76, 0x1e, 0xd1, 0x0d, 0xff, 0x4e, 0xea, 0xbd, 0xee,
	0xed, 0x23, 0x17, 0xbd, 0x23, 0x1e, 0x79, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x43, 0x88,
	0xaf, 0xa5, 0x03, 0x00, 0x00,
}
