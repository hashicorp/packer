// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/redis/v1/cluster_service.proto

package redis

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/yandex-cloud/go-genproto/yandex/api"
	config "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/redis/v1/config"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/validation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListClusterLogsRequest_ServiceType int32

const (
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// Logs of Redis activity.
	ListClusterLogsRequest_REDIS ListClusterLogsRequest_ServiceType = 1
)

var ListClusterLogsRequest_ServiceType_name = map[int32]string{
	0: "SERVICE_TYPE_UNSPECIFIED",
	1: "REDIS",
}

var ListClusterLogsRequest_ServiceType_value = map[string]int32{
	"SERVICE_TYPE_UNSPECIFIED": 0,
	"REDIS":                    1,
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return proto.EnumName(ListClusterLogsRequest_ServiceType_name, int32(x))
}

func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{22, 0}
}

type GetClusterRequest struct {
	// ID of the Redis cluster to return.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterRequest) Reset()         { *m = GetClusterRequest{} }
func (m *GetClusterRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterRequest) ProtoMessage()    {}
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{0}
}

func (m *GetClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterRequest.Unmarshal(m, b)
}
func (m *GetClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterRequest.Marshal(b, m, deterministic)
}
func (m *GetClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterRequest.Merge(m, src)
}
func (m *GetClusterRequest) XXX_Size() int {
	return xxx_messageInfo_GetClusterRequest.Size(m)
}
func (m *GetClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterRequest proto.InternalMessageInfo

func (m *GetClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	// ID of the folder to list Redis clusters in.
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token]
	// returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters clusters listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. The value. Ðœust be 3-63 characters long and match the regular expression `^[a-z]([-a-z0-9]{,61}[a-z0-9])?$`.
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClustersRequest) Reset()         { *m = ListClustersRequest{} }
func (m *ListClustersRequest) String() string { return proto.CompactTextString(m) }
func (*ListClustersRequest) ProtoMessage()    {}
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{1}
}

func (m *ListClustersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClustersRequest.Unmarshal(m, b)
}
func (m *ListClustersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClustersRequest.Marshal(b, m, deterministic)
}
func (m *ListClustersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersRequest.Merge(m, src)
}
func (m *ListClustersRequest) XXX_Size() int {
	return xxx_messageInfo_ListClustersRequest.Size(m)
}
func (m *ListClustersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersRequest proto.InternalMessageInfo

func (m *ListClustersRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *ListClustersRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClustersRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListClustersRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListClustersResponse struct {
	// List of Redis clusters.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
	// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClustersResponse) Reset()         { *m = ListClustersResponse{} }
func (m *ListClustersResponse) String() string { return proto.CompactTextString(m) }
func (*ListClustersResponse) ProtoMessage()    {}
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{2}
}

func (m *ListClustersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClustersResponse.Unmarshal(m, b)
}
func (m *ListClustersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClustersResponse.Marshal(b, m, deterministic)
}
func (m *ListClustersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersResponse.Merge(m, src)
}
func (m *ListClustersResponse) XXX_Size() int {
	return xxx_messageInfo_ListClustersResponse.Size(m)
}
func (m *ListClustersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersResponse proto.InternalMessageInfo

func (m *ListClustersResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ListClustersResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	// ID of the folder to create the Redis cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the Redis cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Redis cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Redis cluster as `key:value` pairs. Maximum 64 per cluster.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deployment environment of the Redis cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration and resources for hosts that should be created for the Redis cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Individual configurations for hosts that should be created for the Redis cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,7,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Redis cluster mode on/off.
	Sharded              bool     `protobuf:"varint,11,opt,name=sharded,proto3" json:"sharded,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterRequest) Reset()         { *m = CreateClusterRequest{} }
func (m *CreateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClusterRequest) ProtoMessage()    {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{3}
}

func (m *CreateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterRequest.Unmarshal(m, b)
}
func (m *CreateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterRequest.Marshal(b, m, deterministic)
}
func (m *CreateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterRequest.Merge(m, src)
}
func (m *CreateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_CreateClusterRequest.Size(m)
}
func (m *CreateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterRequest proto.InternalMessageInfo

func (m *CreateClusterRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *CreateClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateClusterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if m != nil {
		return m.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (m *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if m != nil {
		return m.ConfigSpec
	}
	return nil
}

func (m *CreateClusterRequest) GetHostSpecs() []*HostSpec {
	if m != nil {
		return m.HostSpecs
	}
	return nil
}

func (m *CreateClusterRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *CreateClusterRequest) GetSharded() bool {
	if m != nil {
		return m.Sharded
	}
	return false
}

type CreateClusterMetadata struct {
	// ID of the Redis cluster that is being created.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterMetadata) Reset()         { *m = CreateClusterMetadata{} }
func (m *CreateClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*CreateClusterMetadata) ProtoMessage()    {}
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{4}
}

func (m *CreateClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterMetadata.Unmarshal(m, b)
}
func (m *CreateClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterMetadata.Marshal(b, m, deterministic)
}
func (m *CreateClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterMetadata.Merge(m, src)
}
func (m *CreateClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_CreateClusterMetadata.Size(m)
}
func (m *CreateClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterMetadata proto.InternalMessageInfo

func (m *CreateClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	// ID of the Redis cluster to update.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which fields of the Redis cluster should be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New description of the Redis cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Redis cluster as `` key:value `` pairs. Maximum 64 per cluster.
	// For example, "project": "mvp" or "source": "dictionary".
	//
	// The new set of labels will completely replace the old ones. To add a label, request the current
	// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// New configuration and resources for hosts in the cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,5,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// New name for the cluster.
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateClusterRequest) Reset()         { *m = UpdateClusterRequest{} }
func (m *UpdateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterRequest) ProtoMessage()    {}
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{5}
}

func (m *UpdateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterRequest.Unmarshal(m, b)
}
func (m *UpdateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterRequest.Marshal(b, m, deterministic)
}
func (m *UpdateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterRequest.Merge(m, src)
}
func (m *UpdateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterRequest.Size(m)
}
func (m *UpdateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterRequest proto.InternalMessageInfo

func (m *UpdateClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *UpdateClusterRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateClusterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if m != nil {
		return m.ConfigSpec
	}
	return nil
}

func (m *UpdateClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateClusterMetadata struct {
	// ID of the Redis cluster that is being updated.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateClusterMetadata) Reset()         { *m = UpdateClusterMetadata{} }
func (m *UpdateClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterMetadata) ProtoMessage()    {}
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{6}
}

func (m *UpdateClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterMetadata.Unmarshal(m, b)
}
func (m *UpdateClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterMetadata.Marshal(b, m, deterministic)
}
func (m *UpdateClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterMetadata.Merge(m, src)
}
func (m *UpdateClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterMetadata.Size(m)
}
func (m *UpdateClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterMetadata proto.InternalMessageInfo

func (m *UpdateClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type DeleteClusterRequest struct {
	// ID of the Redis cluster to delete.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterRequest) Reset()         { *m = DeleteClusterRequest{} }
func (m *DeleteClusterRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterRequest) ProtoMessage()    {}
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{7}
}

func (m *DeleteClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterRequest.Unmarshal(m, b)
}
func (m *DeleteClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterRequest.Marshal(b, m, deterministic)
}
func (m *DeleteClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterRequest.Merge(m, src)
}
func (m *DeleteClusterRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterRequest.Size(m)
}
func (m *DeleteClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterRequest proto.InternalMessageInfo

func (m *DeleteClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	// ID of the Redis cluster that is being deleted.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterMetadata) Reset()         { *m = DeleteClusterMetadata{} }
func (m *DeleteClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterMetadata) ProtoMessage()    {}
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{8}
}

func (m *DeleteClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterMetadata.Unmarshal(m, b)
}
func (m *DeleteClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterMetadata.Marshal(b, m, deterministic)
}
func (m *DeleteClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterMetadata.Merge(m, src)
}
func (m *DeleteClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterMetadata.Size(m)
}
func (m *DeleteClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterMetadata proto.InternalMessageInfo

func (m *DeleteClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type StartClusterRequest struct {
	// ID of the Redis cluster to start.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartClusterRequest) Reset()         { *m = StartClusterRequest{} }
func (m *StartClusterRequest) String() string { return proto.CompactTextString(m) }
func (*StartClusterRequest) ProtoMessage()    {}
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{9}
}

func (m *StartClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartClusterRequest.Unmarshal(m, b)
}
func (m *StartClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartClusterRequest.Marshal(b, m, deterministic)
}
func (m *StartClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartClusterRequest.Merge(m, src)
}
func (m *StartClusterRequest) XXX_Size() int {
	return xxx_messageInfo_StartClusterRequest.Size(m)
}
func (m *StartClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartClusterRequest proto.InternalMessageInfo

func (m *StartClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	// ID of the Redis cluster.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartClusterMetadata) Reset()         { *m = StartClusterMetadata{} }
func (m *StartClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*StartClusterMetadata) ProtoMessage()    {}
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{10}
}

func (m *StartClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartClusterMetadata.Unmarshal(m, b)
}
func (m *StartClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartClusterMetadata.Marshal(b, m, deterministic)
}
func (m *StartClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartClusterMetadata.Merge(m, src)
}
func (m *StartClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_StartClusterMetadata.Size(m)
}
func (m *StartClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StartClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StartClusterMetadata proto.InternalMessageInfo

func (m *StartClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	// ID of the Redis cluster to stop.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopClusterRequest) Reset()         { *m = StopClusterRequest{} }
func (m *StopClusterRequest) String() string { return proto.CompactTextString(m) }
func (*StopClusterRequest) ProtoMessage()    {}
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{11}
}

func (m *StopClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopClusterRequest.Unmarshal(m, b)
}
func (m *StopClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopClusterRequest.Marshal(b, m, deterministic)
}
func (m *StopClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopClusterRequest.Merge(m, src)
}
func (m *StopClusterRequest) XXX_Size() int {
	return xxx_messageInfo_StopClusterRequest.Size(m)
}
func (m *StopClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopClusterRequest proto.InternalMessageInfo

func (m *StopClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	// ID of the Redis cluster.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopClusterMetadata) Reset()         { *m = StopClusterMetadata{} }
func (m *StopClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*StopClusterMetadata) ProtoMessage()    {}
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{12}
}

func (m *StopClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopClusterMetadata.Unmarshal(m, b)
}
func (m *StopClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopClusterMetadata.Marshal(b, m, deterministic)
}
func (m *StopClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopClusterMetadata.Merge(m, src)
}
func (m *StopClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_StopClusterMetadata.Size(m)
}
func (m *StopClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StopClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StopClusterMetadata proto.InternalMessageInfo

func (m *StopClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type MoveClusterRequest struct {
	// ID of the Redis cluster to move.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId  string   `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveClusterRequest) Reset()         { *m = MoveClusterRequest{} }
func (m *MoveClusterRequest) String() string { return proto.CompactTextString(m) }
func (*MoveClusterRequest) ProtoMessage()    {}
func (*MoveClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{13}
}

func (m *MoveClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveClusterRequest.Unmarshal(m, b)
}
func (m *MoveClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveClusterRequest.Marshal(b, m, deterministic)
}
func (m *MoveClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveClusterRequest.Merge(m, src)
}
func (m *MoveClusterRequest) XXX_Size() int {
	return xxx_messageInfo_MoveClusterRequest.Size(m)
}
func (m *MoveClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoveClusterRequest proto.InternalMessageInfo

func (m *MoveClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MoveClusterRequest) GetDestinationFolderId() string {
	if m != nil {
		return m.DestinationFolderId
	}
	return ""
}

type MoveClusterMetadata struct {
	// ID of the Redis cluster being moved.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the source folder.
	SourceFolderId string `protobuf:"bytes,2,opt,name=source_folder_id,json=sourceFolderId,proto3" json:"source_folder_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId  string   `protobuf:"bytes,3,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveClusterMetadata) Reset()         { *m = MoveClusterMetadata{} }
func (m *MoveClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*MoveClusterMetadata) ProtoMessage()    {}
func (*MoveClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{14}
}

func (m *MoveClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveClusterMetadata.Unmarshal(m, b)
}
func (m *MoveClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveClusterMetadata.Marshal(b, m, deterministic)
}
func (m *MoveClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveClusterMetadata.Merge(m, src)
}
func (m *MoveClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_MoveClusterMetadata.Size(m)
}
func (m *MoveClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MoveClusterMetadata proto.InternalMessageInfo

func (m *MoveClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MoveClusterMetadata) GetSourceFolderId() string {
	if m != nil {
		return m.SourceFolderId
	}
	return ""
}

func (m *MoveClusterMetadata) GetDestinationFolderId() string {
	if m != nil {
		return m.DestinationFolderId
	}
	return ""
}

type BackupClusterRequest struct {
	// ID of the Redis cluster to back up.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupClusterRequest) Reset()         { *m = BackupClusterRequest{} }
func (m *BackupClusterRequest) String() string { return proto.CompactTextString(m) }
func (*BackupClusterRequest) ProtoMessage()    {}
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{15}
}

func (m *BackupClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupClusterRequest.Unmarshal(m, b)
}
func (m *BackupClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupClusterRequest.Marshal(b, m, deterministic)
}
func (m *BackupClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupClusterRequest.Merge(m, src)
}
func (m *BackupClusterRequest) XXX_Size() int {
	return xxx_messageInfo_BackupClusterRequest.Size(m)
}
func (m *BackupClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupClusterRequest proto.InternalMessageInfo

func (m *BackupClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	// ID of the Redis cluster that is being backed up.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackupClusterMetadata) Reset()         { *m = BackupClusterMetadata{} }
func (m *BackupClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*BackupClusterMetadata) ProtoMessage()    {}
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{16}
}

func (m *BackupClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackupClusterMetadata.Unmarshal(m, b)
}
func (m *BackupClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackupClusterMetadata.Marshal(b, m, deterministic)
}
func (m *BackupClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupClusterMetadata.Merge(m, src)
}
func (m *BackupClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_BackupClusterMetadata.Size(m)
}
func (m *BackupClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BackupClusterMetadata proto.InternalMessageInfo

func (m *BackupClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type RestoreClusterRequest struct {
	// ID of the backup to create a cluster from.
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Name of the new Redis cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the new Redis cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Redis cluster as `` key:value `` pairs. Maximum 64 per cluster.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deployment environment of the new Redis cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration for the Redis cluster to be created.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for Redis hosts that should be created for
	// the cluster that is being created from the backup.
	HostSpecs []*HostSpec `protobuf:"bytes,7,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the Redis cluster in.
	NetworkId string `protobuf:"bytes,8,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the folder to create the Redis cluster in.
	FolderId             string   `protobuf:"bytes,9,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreClusterRequest) Reset()         { *m = RestoreClusterRequest{} }
func (m *RestoreClusterRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreClusterRequest) ProtoMessage()    {}
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{17}
}

func (m *RestoreClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreClusterRequest.Unmarshal(m, b)
}
func (m *RestoreClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreClusterRequest.Marshal(b, m, deterministic)
}
func (m *RestoreClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreClusterRequest.Merge(m, src)
}
func (m *RestoreClusterRequest) XXX_Size() int {
	return xxx_messageInfo_RestoreClusterRequest.Size(m)
}
func (m *RestoreClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreClusterRequest proto.InternalMessageInfo

func (m *RestoreClusterRequest) GetBackupId() string {
	if m != nil {
		return m.BackupId
	}
	return ""
}

func (m *RestoreClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RestoreClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RestoreClusterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if m != nil {
		return m.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (m *RestoreClusterRequest) GetConfigSpec() *ConfigSpec {
	if m != nil {
		return m.ConfigSpec
	}
	return nil
}

func (m *RestoreClusterRequest) GetHostSpecs() []*HostSpec {
	if m != nil {
		return m.HostSpecs
	}
	return nil
}

func (m *RestoreClusterRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *RestoreClusterRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

type RestoreClusterMetadata struct {
	// ID of the new Redis cluster that is being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup that is being used for creating a cluster.
	BackupId             string   `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreClusterMetadata) Reset()         { *m = RestoreClusterMetadata{} }
func (m *RestoreClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*RestoreClusterMetadata) ProtoMessage()    {}
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{18}
}

func (m *RestoreClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreClusterMetadata.Unmarshal(m, b)
}
func (m *RestoreClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreClusterMetadata.Marshal(b, m, deterministic)
}
func (m *RestoreClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreClusterMetadata.Merge(m, src)
}
func (m *RestoreClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_RestoreClusterMetadata.Size(m)
}
func (m *RestoreClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreClusterMetadata proto.InternalMessageInfo

func (m *RestoreClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *RestoreClusterMetadata) GetBackupId() string {
	if m != nil {
		return m.BackupId
	}
	return ""
}

type StartClusterFailoverRequest struct {
	// ID of the Redis cluster to start failover on.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartClusterFailoverRequest) Reset()         { *m = StartClusterFailoverRequest{} }
func (m *StartClusterFailoverRequest) String() string { return proto.CompactTextString(m) }
func (*StartClusterFailoverRequest) ProtoMessage()    {}
func (*StartClusterFailoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{19}
}

func (m *StartClusterFailoverRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartClusterFailoverRequest.Unmarshal(m, b)
}
func (m *StartClusterFailoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartClusterFailoverRequest.Marshal(b, m, deterministic)
}
func (m *StartClusterFailoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartClusterFailoverRequest.Merge(m, src)
}
func (m *StartClusterFailoverRequest) XXX_Size() int {
	return xxx_messageInfo_StartClusterFailoverRequest.Size(m)
}
func (m *StartClusterFailoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartClusterFailoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartClusterFailoverRequest proto.InternalMessageInfo

func (m *StartClusterFailoverRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type StartClusterFailoverMetadata struct {
	// ID of the Redis cluster on which failover will be initiated.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartClusterFailoverMetadata) Reset()         { *m = StartClusterFailoverMetadata{} }
func (m *StartClusterFailoverMetadata) String() string { return proto.CompactTextString(m) }
func (*StartClusterFailoverMetadata) ProtoMessage()    {}
func (*StartClusterFailoverMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{20}
}

func (m *StartClusterFailoverMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartClusterFailoverMetadata.Unmarshal(m, b)
}
func (m *StartClusterFailoverMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartClusterFailoverMetadata.Marshal(b, m, deterministic)
}
func (m *StartClusterFailoverMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartClusterFailoverMetadata.Merge(m, src)
}
func (m *StartClusterFailoverMetadata) XXX_Size() int {
	return xxx_messageInfo_StartClusterFailoverMetadata.Size(m)
}
func (m *StartClusterFailoverMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StartClusterFailoverMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StartClusterFailoverMetadata proto.InternalMessageInfo

func (m *StartClusterFailoverMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type LogRecord struct {
	// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message              map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{21}
}

func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRecord.Unmarshal(m, b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return xxx_messageInfo_LogRecord.Size(m)
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LogRecord) GetMessage() map[string]string {
	if m != nil {
		return m.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	// ID of the Redis cluster to request logs for.
	// To get the Redis cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from the logs table to request.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string                           `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	ServiceType  ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.redis.v1.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	FromTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ToTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterLogsResponse.next_page_token] returned by a previous list request.
	PageToken            string   `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterLogsRequest) Reset()         { *m = ListClusterLogsRequest{} }
func (m *ListClusterLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterLogsRequest) ProtoMessage()    {}
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{22}
}

func (m *ListClusterLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterLogsRequest.Unmarshal(m, b)
}
func (m *ListClusterLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterLogsRequest.Marshal(b, m, deterministic)
}
func (m *ListClusterLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterLogsRequest.Merge(m, src)
}
func (m *ListClusterLogsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterLogsRequest.Size(m)
}
func (m *ListClusterLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterLogsRequest proto.InternalMessageInfo

func (m *ListClusterLogsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterLogsRequest) GetColumnFilter() []string {
	if m != nil {
		return m.ColumnFilter
	}
	return nil
}

func (m *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (m *ListClusterLogsRequest) GetFromTime() *timestamp.Timestamp {
	if m != nil {
		return m.FromTime
	}
	return nil
}

func (m *ListClusterLogsRequest) GetToTime() *timestamp.Timestamp {
	if m != nil {
		return m.ToTime
	}
	return nil
}

func (m *ListClusterLogsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterLogsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterLogsResponse struct {
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterLogsResponse) Reset()         { *m = ListClusterLogsResponse{} }
func (m *ListClusterLogsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterLogsResponse) ProtoMessage()    {}
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{23}
}

func (m *ListClusterLogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterLogsResponse.Unmarshal(m, b)
}
func (m *ListClusterLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterLogsResponse.Marshal(b, m, deterministic)
}
func (m *ListClusterLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterLogsResponse.Merge(m, src)
}
func (m *ListClusterLogsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterLogsResponse.Size(m)
}
func (m *ListClusterLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterLogsResponse proto.InternalMessageInfo

func (m *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *ListClusterLogsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type ListClusterOperationsRequest struct {
	// ID of the Redis cluster to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token]
	// returned by a previous list request.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterOperationsRequest) Reset()         { *m = ListClusterOperationsRequest{} }
func (m *ListClusterOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterOperationsRequest) ProtoMessage()    {}
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{24}
}

func (m *ListClusterOperationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterOperationsRequest.Unmarshal(m, b)
}
func (m *ListClusterOperationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterOperationsRequest.Marshal(b, m, deterministic)
}
func (m *ListClusterOperationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterOperationsRequest.Merge(m, src)
}
func (m *ListClusterOperationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterOperationsRequest.Size(m)
}
func (m *ListClusterOperationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterOperationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterOperationsRequest proto.InternalMessageInfo

func (m *ListClusterOperationsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterOperationsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterOperationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	// List of operations for the specified Redis cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterOperationsResponse) Reset()         { *m = ListClusterOperationsResponse{} }
func (m *ListClusterOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterOperationsResponse) ProtoMessage()    {}
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{25}
}

func (m *ListClusterOperationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterOperationsResponse.Unmarshal(m, b)
}
func (m *ListClusterOperationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterOperationsResponse.Marshal(b, m, deterministic)
}
func (m *ListClusterOperationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterOperationsResponse.Merge(m, src)
}
func (m *ListClusterOperationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterOperationsResponse.Size(m)
}
func (m *ListClusterOperationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterOperationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterOperationsResponse proto.InternalMessageInfo

func (m *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *ListClusterOperationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type ListClusterBackupsRequest struct {
	// ID of the Redis cluster.
	// To get the Redis cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterBackupsResponse.next_page_token]
	// returned by a previous list request.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterBackupsRequest) Reset()         { *m = ListClusterBackupsRequest{} }
func (m *ListClusterBackupsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterBackupsRequest) ProtoMessage()    {}
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{26}
}

func (m *ListClusterBackupsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterBackupsRequest.Unmarshal(m, b)
}
func (m *ListClusterBackupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterBackupsRequest.Marshal(b, m, deterministic)
}
func (m *ListClusterBackupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterBackupsRequest.Merge(m, src)
}
func (m *ListClusterBackupsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterBackupsRequest.Size(m)
}
func (m *ListClusterBackupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterBackupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterBackupsRequest proto.InternalMessageInfo

func (m *ListClusterBackupsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterBackupsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterBackupsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterBackupsResponse struct {
	// List of Redis backups.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterBackupsResponse) Reset()         { *m = ListClusterBackupsResponse{} }
func (m *ListClusterBackupsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterBackupsResponse) ProtoMessage()    {}
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{27}
}

func (m *ListClusterBackupsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterBackupsResponse.Unmarshal(m, b)
}
func (m *ListClusterBackupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterBackupsResponse.Marshal(b, m, deterministic)
}
func (m *ListClusterBackupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterBackupsResponse.Merge(m, src)
}
func (m *ListClusterBackupsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterBackupsResponse.Size(m)
}
func (m *ListClusterBackupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterBackupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterBackupsResponse proto.InternalMessageInfo

func (m *ListClusterBackupsResponse) GetBackups() []*Backup {
	if m != nil {
		return m.Backups
	}
	return nil
}

func (m *ListClusterBackupsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type ListClusterHostsRequest struct {
	// ID of the Redis cluster.
	// To get the Redis cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
	// returned by a previous list request.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterHostsRequest) Reset()         { *m = ListClusterHostsRequest{} }
func (m *ListClusterHostsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterHostsRequest) ProtoMessage()    {}
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{28}
}

func (m *ListClusterHostsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterHostsRequest.Unmarshal(m, b)
}
func (m *ListClusterHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterHostsRequest.Marshal(b, m, deterministic)
}
func (m *ListClusterHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterHostsRequest.Merge(m, src)
}
func (m *ListClusterHostsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterHostsRequest.Size(m)
}
func (m *ListClusterHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterHostsRequest proto.InternalMessageInfo

func (m *ListClusterHostsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterHostsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterHostsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	// List of hosts for the cluster.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterHostsResponse) Reset()         { *m = ListClusterHostsResponse{} }
func (m *ListClusterHostsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterHostsResponse) ProtoMessage()    {}
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{29}
}

func (m *ListClusterHostsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterHostsResponse.Unmarshal(m, b)
}
func (m *ListClusterHostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterHostsResponse.Marshal(b, m, deterministic)
}
func (m *ListClusterHostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterHostsResponse.Merge(m, src)
}
func (m *ListClusterHostsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterHostsResponse.Size(m)
}
func (m *ListClusterHostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterHostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterHostsResponse proto.InternalMessageInfo

func (m *ListClusterHostsResponse) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *ListClusterHostsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type AddClusterHostsRequest struct {
	// ID of the Redis cluster to add hosts to.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configurations for Redis hosts that should be added to the cluster.
	HostSpecs            []*HostSpec `protobuf:"bytes,2,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddClusterHostsRequest) Reset()         { *m = AddClusterHostsRequest{} }
func (m *AddClusterHostsRequest) String() string { return proto.CompactTextString(m) }
func (*AddClusterHostsRequest) ProtoMessage()    {}
func (*AddClusterHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{30}
}

func (m *AddClusterHostsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterHostsRequest.Unmarshal(m, b)
}
func (m *AddClusterHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterHostsRequest.Marshal(b, m, deterministic)
}
func (m *AddClusterHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterHostsRequest.Merge(m, src)
}
func (m *AddClusterHostsRequest) XXX_Size() int {
	return xxx_messageInfo_AddClusterHostsRequest.Size(m)
}
func (m *AddClusterHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterHostsRequest proto.InternalMessageInfo

func (m *AddClusterHostsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AddClusterHostsRequest) GetHostSpecs() []*HostSpec {
	if m != nil {
		return m.HostSpecs
	}
	return nil
}

type AddClusterHostsMetadata struct {
	// ID of the Redis cluster to which the hosts are being added.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being added to the cluster.
	HostNames            []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddClusterHostsMetadata) Reset()         { *m = AddClusterHostsMetadata{} }
func (m *AddClusterHostsMetadata) String() string { return proto.CompactTextString(m) }
func (*AddClusterHostsMetadata) ProtoMessage()    {}
func (*AddClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{31}
}

func (m *AddClusterHostsMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterHostsMetadata.Unmarshal(m, b)
}
func (m *AddClusterHostsMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterHostsMetadata.Marshal(b, m, deterministic)
}
func (m *AddClusterHostsMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterHostsMetadata.Merge(m, src)
}
func (m *AddClusterHostsMetadata) XXX_Size() int {
	return xxx_messageInfo_AddClusterHostsMetadata.Size(m)
}
func (m *AddClusterHostsMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterHostsMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterHostsMetadata proto.InternalMessageInfo

func (m *AddClusterHostsMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AddClusterHostsMetadata) GetHostNames() []string {
	if m != nil {
		return m.HostNames
	}
	return nil
}

type DeleteClusterHostsRequest struct {
	// ID of the Redis cluster to remove hosts from.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts to delete.
	HostNames            []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterHostsRequest) Reset()         { *m = DeleteClusterHostsRequest{} }
func (m *DeleteClusterHostsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterHostsRequest) ProtoMessage()    {}
func (*DeleteClusterHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{32}
}

func (m *DeleteClusterHostsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterHostsRequest.Unmarshal(m, b)
}
func (m *DeleteClusterHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterHostsRequest.Marshal(b, m, deterministic)
}
func (m *DeleteClusterHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterHostsRequest.Merge(m, src)
}
func (m *DeleteClusterHostsRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterHostsRequest.Size(m)
}
func (m *DeleteClusterHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterHostsRequest proto.InternalMessageInfo

func (m *DeleteClusterHostsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterHostsRequest) GetHostNames() []string {
	if m != nil {
		return m.HostNames
	}
	return nil
}

type DeleteClusterHostsMetadata struct {
	// ID of the Redis cluster to remove hosts from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being deleted.
	HostNames            []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterHostsMetadata) Reset()         { *m = DeleteClusterHostsMetadata{} }
func (m *DeleteClusterHostsMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterHostsMetadata) ProtoMessage()    {}
func (*DeleteClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{33}
}

func (m *DeleteClusterHostsMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterHostsMetadata.Unmarshal(m, b)
}
func (m *DeleteClusterHostsMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterHostsMetadata.Marshal(b, m, deterministic)
}
func (m *DeleteClusterHostsMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterHostsMetadata.Merge(m, src)
}
func (m *DeleteClusterHostsMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterHostsMetadata.Size(m)
}
func (m *DeleteClusterHostsMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterHostsMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterHostsMetadata proto.InternalMessageInfo

func (m *DeleteClusterHostsMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterHostsMetadata) GetHostNames() []string {
	if m != nil {
		return m.HostNames
	}
	return nil
}

type GetClusterShardRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterShardRequest) Reset()         { *m = GetClusterShardRequest{} }
func (m *GetClusterShardRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterShardRequest) ProtoMessage()    {}
func (*GetClusterShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{34}
}

func (m *GetClusterShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterShardRequest.Unmarshal(m, b)
}
func (m *GetClusterShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterShardRequest.Marshal(b, m, deterministic)
}
func (m *GetClusterShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterShardRequest.Merge(m, src)
}
func (m *GetClusterShardRequest) XXX_Size() int {
	return xxx_messageInfo_GetClusterShardRequest.Size(m)
}
func (m *GetClusterShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterShardRequest proto.InternalMessageInfo

func (m *GetClusterShardRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *GetClusterShardRequest) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type ListClusterShardsRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	PageSize             int64    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterShardsRequest) Reset()         { *m = ListClusterShardsRequest{} }
func (m *ListClusterShardsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterShardsRequest) ProtoMessage()    {}
func (*ListClusterShardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{35}
}

func (m *ListClusterShardsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterShardsRequest.Unmarshal(m, b)
}
func (m *ListClusterShardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterShardsRequest.Marshal(b, m, deterministic)
}
func (m *ListClusterShardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterShardsRequest.Merge(m, src)
}
func (m *ListClusterShardsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterShardsRequest.Size(m)
}
func (m *ListClusterShardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterShardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterShardsRequest proto.InternalMessageInfo

func (m *ListClusterShardsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterShardsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterShardsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListClusterShardsResponse struct {
	Shards               []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterShardsResponse) Reset()         { *m = ListClusterShardsResponse{} }
func (m *ListClusterShardsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterShardsResponse) ProtoMessage()    {}
func (*ListClusterShardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{36}
}

func (m *ListClusterShardsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterShardsResponse.Unmarshal(m, b)
}
func (m *ListClusterShardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterShardsResponse.Marshal(b, m, deterministic)
}
func (m *ListClusterShardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterShardsResponse.Merge(m, src)
}
func (m *ListClusterShardsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterShardsResponse.Size(m)
}
func (m *ListClusterShardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterShardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterShardsResponse proto.InternalMessageInfo

func (m *ListClusterShardsResponse) GetShards() []*Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *ListClusterShardsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type AddClusterShardRequest struct {
	ClusterId            string      `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string      `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	HostSpecs            []*HostSpec `protobuf:"bytes,4,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddClusterShardRequest) Reset()         { *m = AddClusterShardRequest{} }
func (m *AddClusterShardRequest) String() string { return proto.CompactTextString(m) }
func (*AddClusterShardRequest) ProtoMessage()    {}
func (*AddClusterShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{37}
}

func (m *AddClusterShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterShardRequest.Unmarshal(m, b)
}
func (m *AddClusterShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterShardRequest.Marshal(b, m, deterministic)
}
func (m *AddClusterShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterShardRequest.Merge(m, src)
}
func (m *AddClusterShardRequest) XXX_Size() int {
	return xxx_messageInfo_AddClusterShardRequest.Size(m)
}
func (m *AddClusterShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterShardRequest proto.InternalMessageInfo

func (m *AddClusterShardRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AddClusterShardRequest) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

func (m *AddClusterShardRequest) GetHostSpecs() []*HostSpec {
	if m != nil {
		return m.HostSpecs
	}
	return nil
}

type AddClusterShardMetadata struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddClusterShardMetadata) Reset()         { *m = AddClusterShardMetadata{} }
func (m *AddClusterShardMetadata) String() string { return proto.CompactTextString(m) }
func (*AddClusterShardMetadata) ProtoMessage()    {}
func (*AddClusterShardMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{38}
}

func (m *AddClusterShardMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddClusterShardMetadata.Unmarshal(m, b)
}
func (m *AddClusterShardMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddClusterShardMetadata.Marshal(b, m, deterministic)
}
func (m *AddClusterShardMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClusterShardMetadata.Merge(m, src)
}
func (m *AddClusterShardMetadata) XXX_Size() int {
	return xxx_messageInfo_AddClusterShardMetadata.Size(m)
}
func (m *AddClusterShardMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClusterShardMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AddClusterShardMetadata proto.InternalMessageInfo

func (m *AddClusterShardMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AddClusterShardMetadata) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type DeleteClusterShardRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterShardRequest) Reset()         { *m = DeleteClusterShardRequest{} }
func (m *DeleteClusterShardRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterShardRequest) ProtoMessage()    {}
func (*DeleteClusterShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{39}
}

func (m *DeleteClusterShardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterShardRequest.Unmarshal(m, b)
}
func (m *DeleteClusterShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterShardRequest.Marshal(b, m, deterministic)
}
func (m *DeleteClusterShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterShardRequest.Merge(m, src)
}
func (m *DeleteClusterShardRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterShardRequest.Size(m)
}
func (m *DeleteClusterShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterShardRequest proto.InternalMessageInfo

func (m *DeleteClusterShardRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterShardRequest) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type DeleteClusterShardMetadata struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterShardMetadata) Reset()         { *m = DeleteClusterShardMetadata{} }
func (m *DeleteClusterShardMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterShardMetadata) ProtoMessage()    {}
func (*DeleteClusterShardMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{40}
}

func (m *DeleteClusterShardMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterShardMetadata.Unmarshal(m, b)
}
func (m *DeleteClusterShardMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterShardMetadata.Marshal(b, m, deterministic)
}
func (m *DeleteClusterShardMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterShardMetadata.Merge(m, src)
}
func (m *DeleteClusterShardMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterShardMetadata.Size(m)
}
func (m *DeleteClusterShardMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterShardMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterShardMetadata proto.InternalMessageInfo

func (m *DeleteClusterShardMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *DeleteClusterShardMetadata) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type RebalanceClusterRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebalanceClusterRequest) Reset()         { *m = RebalanceClusterRequest{} }
func (m *RebalanceClusterRequest) String() string { return proto.CompactTextString(m) }
func (*RebalanceClusterRequest) ProtoMessage()    {}
func (*RebalanceClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{41}
}

func (m *RebalanceClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebalanceClusterRequest.Unmarshal(m, b)
}
func (m *RebalanceClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebalanceClusterRequest.Marshal(b, m, deterministic)
}
func (m *RebalanceClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebalanceClusterRequest.Merge(m, src)
}
func (m *RebalanceClusterRequest) XXX_Size() int {
	return xxx_messageInfo_RebalanceClusterRequest.Size(m)
}
func (m *RebalanceClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RebalanceClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RebalanceClusterRequest proto.InternalMessageInfo

func (m *RebalanceClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type RebalanceClusterMetadata struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebalanceClusterMetadata) Reset()         { *m = RebalanceClusterMetadata{} }
func (m *RebalanceClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*RebalanceClusterMetadata) ProtoMessage()    {}
func (*RebalanceClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{42}
}

func (m *RebalanceClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RebalanceClusterMetadata.Unmarshal(m, b)
}
func (m *RebalanceClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RebalanceClusterMetadata.Marshal(b, m, deterministic)
}
func (m *RebalanceClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebalanceClusterMetadata.Merge(m, src)
}
func (m *RebalanceClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_RebalanceClusterMetadata.Size(m)
}
func (m *RebalanceClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RebalanceClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RebalanceClusterMetadata proto.InternalMessageInfo

func (m *RebalanceClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type HostSpec struct {
	// ID of the availability zone where the host resides.
	// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// ID of the subnet that the host should belong to. This subnet should be a part
	// of the network that the cluster belongs to.
	// The ID of the network is set in the field [Cluster.network_id].
	SubnetId             string   `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	ShardName            string   `protobuf:"bytes,3,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostSpec) Reset()         { *m = HostSpec{} }
func (m *HostSpec) String() string { return proto.CompactTextString(m) }
func (*HostSpec) ProtoMessage()    {}
func (*HostSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{43}
}

func (m *HostSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostSpec.Unmarshal(m, b)
}
func (m *HostSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostSpec.Marshal(b, m, deterministic)
}
func (m *HostSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostSpec.Merge(m, src)
}
func (m *HostSpec) XXX_Size() int {
	return xxx_messageInfo_HostSpec.Size(m)
}
func (m *HostSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HostSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HostSpec proto.InternalMessageInfo

func (m *HostSpec) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *HostSpec) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *HostSpec) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type ConfigSpec struct {
	// Version of Redis used in the cluster.
	// The only possible value is `5.0`.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Configuration of a Redis cluster.
	//
	// Types that are valid to be assigned to RedisSpec:
	//	*ConfigSpec_RedisConfig_5_0
	RedisSpec isConfigSpec_RedisSpec `protobuf_oneof:"redis_spec"`
	// Resources allocated to Redis hosts.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *timeofday.TimeOfDay `protobuf:"bytes,4,opt,name=backup_window_start,json=backupWindowStart,proto3" json:"backup_window_start,omitempty"`
	// Access policy to DB
	Access               *Access  `protobuf:"bytes,5,opt,name=access,proto3" json:"access,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigSpec) Reset()         { *m = ConfigSpec{} }
func (m *ConfigSpec) String() string { return proto.CompactTextString(m) }
func (*ConfigSpec) ProtoMessage()    {}
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1eca1188b71673d, []int{44}
}

func (m *ConfigSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSpec.Unmarshal(m, b)
}
func (m *ConfigSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSpec.Marshal(b, m, deterministic)
}
func (m *ConfigSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSpec.Merge(m, src)
}
func (m *ConfigSpec) XXX_Size() int {
	return xxx_messageInfo_ConfigSpec.Size(m)
}
func (m *ConfigSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSpec proto.InternalMessageInfo

func (m *ConfigSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type isConfigSpec_RedisSpec interface {
	isConfigSpec_RedisSpec()
}

type ConfigSpec_RedisConfig_5_0 struct {
	RedisConfig_5_0 *config.RedisConfig5_0 `protobuf:"bytes,2,opt,name=redis_config_5_0,json=redisConfig50,proto3,oneof"`
}

func (*ConfigSpec_RedisConfig_5_0) isConfigSpec_RedisSpec() {}

func (m *ConfigSpec) GetRedisSpec() isConfigSpec_RedisSpec {
	if m != nil {
		return m.RedisSpec
	}
	return nil
}

func (m *ConfigSpec) GetRedisConfig_5_0() *config.RedisConfig5_0 {
	if x, ok := m.GetRedisSpec().(*ConfigSpec_RedisConfig_5_0); ok {
		return x.RedisConfig_5_0
	}
	return nil
}

func (m *ConfigSpec) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ConfigSpec) GetBackupWindowStart() *timeofday.TimeOfDay {
	if m != nil {
		return m.BackupWindowStart
	}
	return nil
}

func (m *ConfigSpec) GetAccess() *Access {
	if m != nil {
		return m.Access
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConfigSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConfigSpec_RedisConfig_5_0)(nil),
	}
}

func init() {
	proto.RegisterEnum("yandex.cloud.mdb.redis.v1.ListClusterLogsRequest_ServiceType", ListClusterLogsRequest_ServiceType_name, ListClusterLogsRequest_ServiceType_value)
	proto.RegisterType((*GetClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.GetClusterRequest")
	proto.RegisterType((*ListClustersRequest)(nil), "yandex.cloud.mdb.redis.v1.ListClustersRequest")
	proto.RegisterType((*ListClustersResponse)(nil), "yandex.cloud.mdb.redis.v1.ListClustersResponse")
	proto.RegisterType((*CreateClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.CreateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.redis.v1.CreateClusterRequest.LabelsEntry")
	proto.RegisterType((*CreateClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.CreateClusterMetadata")
	proto.RegisterType((*UpdateClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.UpdateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.redis.v1.UpdateClusterRequest.LabelsEntry")
	proto.RegisterType((*UpdateClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.UpdateClusterMetadata")
	proto.RegisterType((*DeleteClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.DeleteClusterRequest")
	proto.RegisterType((*DeleteClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.DeleteClusterMetadata")
	proto.RegisterType((*StartClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.StartClusterRequest")
	proto.RegisterType((*StartClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.StartClusterMetadata")
	proto.RegisterType((*StopClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.StopClusterRequest")
	proto.RegisterType((*StopClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.StopClusterMetadata")
	proto.RegisterType((*MoveClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.MoveClusterRequest")
	proto.RegisterType((*MoveClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.MoveClusterMetadata")
	proto.RegisterType((*BackupClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.BackupClusterRequest")
	proto.RegisterType((*BackupClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.BackupClusterMetadata")
	proto.RegisterType((*RestoreClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.RestoreClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.redis.v1.RestoreClusterRequest.LabelsEntry")
	proto.RegisterType((*RestoreClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.RestoreClusterMetadata")
	proto.RegisterType((*StartClusterFailoverRequest)(nil), "yandex.cloud.mdb.redis.v1.StartClusterFailoverRequest")
	proto.RegisterType((*StartClusterFailoverMetadata)(nil), "yandex.cloud.mdb.redis.v1.StartClusterFailoverMetadata")
	proto.RegisterType((*LogRecord)(nil), "yandex.cloud.mdb.redis.v1.LogRecord")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.mdb.redis.v1.LogRecord.MessageEntry")
	proto.RegisterType((*ListClusterLogsRequest)(nil), "yandex.cloud.mdb.redis.v1.ListClusterLogsRequest")
	proto.RegisterType((*ListClusterLogsResponse)(nil), "yandex.cloud.mdb.redis.v1.ListClusterLogsResponse")
	proto.RegisterType((*ListClusterOperationsRequest)(nil), "yandex.cloud.mdb.redis.v1.ListClusterOperationsRequest")
	proto.RegisterType((*ListClusterOperationsResponse)(nil), "yandex.cloud.mdb.redis.v1.ListClusterOperationsResponse")
	proto.RegisterType((*ListClusterBackupsRequest)(nil), "yandex.cloud.mdb.redis.v1.ListClusterBackupsRequest")
	proto.RegisterType((*ListClusterBackupsResponse)(nil), "yandex.cloud.mdb.redis.v1.ListClusterBackupsResponse")
	proto.RegisterType((*ListClusterHostsRequest)(nil), "yandex.cloud.mdb.redis.v1.ListClusterHostsRequest")
	proto.RegisterType((*ListClusterHostsResponse)(nil), "yandex.cloud.mdb.redis.v1.ListClusterHostsResponse")
	proto.RegisterType((*AddClusterHostsRequest)(nil), "yandex.cloud.mdb.redis.v1.AddClusterHostsRequest")
	proto.RegisterType((*AddClusterHostsMetadata)(nil), "yandex.cloud.mdb.redis.v1.AddClusterHostsMetadata")
	proto.RegisterType((*DeleteClusterHostsRequest)(nil), "yandex.cloud.mdb.redis.v1.DeleteClusterHostsRequest")
	proto.RegisterType((*DeleteClusterHostsMetadata)(nil), "yandex.cloud.mdb.redis.v1.DeleteClusterHostsMetadata")
	proto.RegisterType((*GetClusterShardRequest)(nil), "yandex.cloud.mdb.redis.v1.GetClusterShardRequest")
	proto.RegisterType((*ListClusterShardsRequest)(nil), "yandex.cloud.mdb.redis.v1.ListClusterShardsRequest")
	proto.RegisterType((*ListClusterShardsResponse)(nil), "yandex.cloud.mdb.redis.v1.ListClusterShardsResponse")
	proto.RegisterType((*AddClusterShardRequest)(nil), "yandex.cloud.mdb.redis.v1.AddClusterShardRequest")
	proto.RegisterType((*AddClusterShardMetadata)(nil), "yandex.cloud.mdb.redis.v1.AddClusterShardMetadata")
	proto.RegisterType((*DeleteClusterShardRequest)(nil), "yandex.cloud.mdb.redis.v1.DeleteClusterShardRequest")
	proto.RegisterType((*DeleteClusterShardMetadata)(nil), "yandex.cloud.mdb.redis.v1.DeleteClusterShardMetadata")
	proto.RegisterType((*RebalanceClusterRequest)(nil), "yandex.cloud.mdb.redis.v1.RebalanceClusterRequest")
	proto.RegisterType((*RebalanceClusterMetadata)(nil), "yandex.cloud.mdb.redis.v1.RebalanceClusterMetadata")
	proto.RegisterType((*HostSpec)(nil), "yandex.cloud.mdb.redis.v1.HostSpec")
	proto.RegisterType((*ConfigSpec)(nil), "yandex.cloud.mdb.redis.v1.ConfigSpec")
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/redis/v1/cluster_service.proto", fileDescriptor_a1eca1188b71673d)
}

var fileDescriptor_a1eca1188b71673d = []byte{
	// 2574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4d, 0x6c, 0x1b, 0xd7,
	0x11, 0xce, 0xd3, 0x0f, 0x45, 0x0e, 0x6d, 0x45, 0x79, 0x96, 0x6d, 0x86, 0xb1, 0x63, 0x79, 0xdd,
	0xc4, 0x0a, 0x63, 0x2e, 0x49, 0xfd, 0xd9, 0xb2, 0x2d, 0x37, 0x92, 0x2c, 0x39, 0x4a, 0xe5, 0xc4,
	0x58, 0x39, 0x4e, 0x63, 0xc3, 0x60, 0x56, 0xdc, 0x27, 0x8a, 0x10, 0xb9, 0xcb, 0xee, 0xae, 0x64,
	0x4b, 0x86, 0x0b, 0xd4, 0x2d, 0xd0, 0xc2, 0x45, 0x0f, 0xfd, 0x3b, 0xb4, 0x05, 0x7a, 0x2a, 0x90,
	0x43, 0x51, 0xb4, 0x50, 0x0c, 0xb4, 0xb7, 0x5c, 0x5a, 0xd8, 0xa7, 0xa2, 0x50, 0x7b, 0x28, 0x7a,
	0x6c, 0x7b, 0xe8, 0x39, 0x97, 0x02, 0x3d, 0x15, 0xef, 0x67, 0xc9, 0x5d, 0x8a, 0x5c, 0x3d, 0x8a,
	0x72, 0x93, 0x43, 0x6f, 0xdc, 0x7d, 0x33, 0xf3, 0xbe, 0x99, 0x37, 0x33, 0x6f, 0x66, 0x96, 0x90,
	0xd9, 0xd4, 0x4d, 0x83, 0xdc, 0xcf, 0x14, 0xca, 0xd6, 0xba, 0x91, 0xa9, 0x18, 0xcb, 0x19, 0x9b,
	0x18, 0x25, 0x27, 0xb3, 0x91, 0xcb, 0x14, 0xca, 0xeb, 0x8e, 0x4b, 0xec, 0xbc, 0x43, 0xec, 0x8d,
	0x52, 0x81, 0xa8, 0x55, 0xdb, 0x72, 0x2d, 0xfc, 0x32, 0x67, 0x50, 0x19, 0x83, 0x5a, 0x31, 0x96,
	0x55, 0xc6, 0xa0, 0x6e, 0xe4, 0x92, 0x27, 0x8a, 0x96, 0x55, 0x2c, 0x93, 0x8c, 0x5e, 0x2d, 0x65,
	0x74, 0xd3, 0xb4, 0x5c, 0xdd, 0x2d, 0x59, 0xa6, 0xc3, 0x19, 0x93, 0x43, 0x62, 0x95, 0x3d, 0x2d,
	0xaf, 0xaf, 0x64, 0x56, 0x4a, 0xa4, 0x6c, 0xe4, 0x2b, 0xba, 0xb3, 0x26, 0x28, 0x4e, 0x35, 0x52,
	0xb8, 0xa5, 0x0a, 0x71, 0x5c, 0xbd, 0x52, 0x15, 0x04, 0xaf, 0x08, 0x02, 0x77, 0xb3, 0x4a, 0xd8,
	0xa2, 0xb5, 0x62, 0xe8, 0x9b, 0x62, 0x31, 0x29, 0x34, 0xa1, 0xbb, 0x5b, 0x55, 0x62, 0xb3, 0xcd,
	0xc5, 0xda, 0xeb, 0x01, 0x2d, 0x6b, 0xab, 0xbb, 0xe8, 0x4e, 0x06, 0xe8, 0x36, 0xf4, 0x72, 0xc9,
	0x68, 0x2d, 0x26, 0x60, 0xac, 0x65, 0xbd, 0xb0, 0xb6, 0xee, 0xe1, 0x3c, 0xbb, 0xa7, 0x51, 0x05,
	0x61, 0x98, 0xf5, 0x2d, 0x73, 0xa5, 0x54, 0xe4, 0xcf, 0xe3, 0xf9, 0x2c, 0x67, 0x50, 0xde, 0x82,
	0x97, 0xae, 0x11, 0x77, 0x96, 0x0b, 0xd1, 0xc8, 0xd7, 0xd6, 0x89, 0xe3, 0xe2, 0x37, 0x01, 0xbc,
	0xb3, 0x2a, 0x19, 0x09, 0x34, 0x84, 0x86, 0x63, 0x33, 0x87, 0xfe, 0xf5, 0x34, 0x87, 0x1e, 0x3f,
	0xcb, 0xf5, 0x5c, 0x9e, 0x1a, 0xcf, 0x6a, 0x31, 0xb1, 0xbe, 0x60, 0x28, 0xbf, 0x45, 0x70, 0x64,
	0xb1, 0xe4, 0x78, 0x32, 0x1c, 0x4f, 0xc8, 0x1b, 0x10, 0x5b, 0xb1, 0xca, 0x46, 0x6b, 0x19, 0x51,
	0xbe, 0xbc, 0x60, 0xe0, 0xb3, 0x10, 0xab, 0xea, 0x45, 0x92, 0x77, 0x4a, 0x5b, 0x24, 0xd1, 0x35,
	0x84, 0x86, 0xbb, 0x67, 0xe0, 0x3f, 0x4f, 0x73, 0x91, 0x6c, 0x3a, 0x97, 0xcd, 0x66, 0xb5, 0x28,
	0x5d, 0x5c, 0x2a, 0x6d, 0x11, 0x3c, 0x0c, 0xc0, 0x08, 0x5d, 0x6b, 0x8d, 0x98, 0x89, 0x6e, 0x26,
	0x34, 0xf6, 0xf8, 0x59, 0xae, 0xf7, 0xf2, 0x54, 0x2e, 0x9b, 0xd5, 0x98, 0x94, 0x9b, 0x74, 0x0d,
	0x2b, 0x10, 0x59, 0x29, 0x95, 0x5d, 0x62, 0x27, 0x7a, 0x18, 0x15, 0x3c, 0x7e, 0x96, 0x8b, 0x30,
	0xaa, 0xac, 0x26, 0x56, 0x94, 0xaf, 0xc3, 0x60, 0x10, 0xb8, 0x53, 0xb5, 0x4c, 0x87, 0xe0, 0x2b,
	0x10, 0x15, 0xea, 0x39, 0x09, 0x34, 0xd4, 0x3d, 0x1c, 0x1f, 0x51, 0xd4, 0x96, 0x4e, 0xaa, 0x7a,
	0xb6, 0xab, 0xf1, 0xe0, 0xd7, 0xe1, 0x45, 0x93, 0xdc, 0x77, 0xf3, 0x3e, 0xa8, 0x54, 0xa9, 0x98,
	0x76, 0x98, 0xbe, 0xbe, 0xe1, 0x61, 0x54, 0x7e, 0xd5, 0x0b, 0x83, 0xb3, 0x36, 0xd1, 0x5d, 0xd2,
	0x60, 0xff, 0x36, 0x4c, 0x37, 0x02, 0x3d, 0xa6, 0x5e, 0xe1, 0x56, 0x8b, 0xcd, 0xbc, 0x4a, 0xa9,
	0x3e, 0x7b, 0x9a, 0xeb, 0xbf, 0xa3, 0xa7, 0xb7, 0xa6, 0xd3, 0xb7, 0xb3, 0xe9, 0xc9, 0x7c, 0xfa,
	0x6e, 0x8a, 0xf3, 0x4d, 0x8c, 0x6a, 0x8c, 0x16, 0xbf, 0x09, 0x71, 0x83, 0x38, 0x05, 0xbb, 0x54,
	0xa5, 0xae, 0x18, 0x34, 0xe3, 0xc8, 0xf8, 0x84, 0xe6, 0x5f, 0xc5, 0x3f, 0x42, 0x10, 0x29, 0xeb,
	0xcb, 0xa4, 0xec, 0x24, 0x7a, 0x98, 0x2d, 0x2e, 0x85, 0xd9, 0xa2, 0x89, 0x36, 0xea, 0x22, 0xe3,
	0x9e, 0x33, 0x5d, 0x7b, 0x73, 0xe6, 0xcb, 0x9f, 0x3d, 0xcd, 0xc5, 0xef, 0xa4, 0xf3, 0xd9, 0xf4,
	0xa4, 0x9e, 0xde, 0xba, 0x9b, 0x7a, 0xc4, 0x91, 0x8d, 0x79, 0x08, 0xb7, 0x9f, 0xe5, 0x22, 0x49,
	0xef, 0x17, 0xc6, 0x03, 0x54, 0x8f, 0xbb, 0x3e, 0x7a, 0x4d, 0x60, 0xc1, 0xb7, 0x20, 0x4e, 0xcc,
	0x8d, 0x92, 0x6d, 0x99, 0x15, 0x62, 0xba, 0x89, 0xde, 0x21, 0x34, 0xdc, 0x3f, 0xa2, 0xee, 0x7d,
	0x4c, 0xea, 0x5c, 0x9d, 0x6b, 0xa6, 0x87, 0x9a, 0x4b, 0xf3, 0x0b, 0xc2, 0x8b, 0x10, 0xe7, 0x81,
	0x92, 0x77, 0xaa, 0xa4, 0x90, 0x88, 0x0c, 0xa1, 0xe1, 0xf8, 0xc8, 0x6b, 0x61, 0x72, 0x19, 0xf5,
	0x52, 0x95, 0x14, 0x84, 0x38, 0x28, 0xd4, 0xde, 0xe0, 0x77, 0x00, 0x56, 0x2d, 0xc7, 0x65, 0xb2,
	0x9c, 0x44, 0x1f, 0xb3, 0xdf, 0x99, 0x10, 0x61, 0x6f, 0x5b, 0x8e, 0xcb, 0x44, 0x45, 0x1e, 0x3d,
	0xcb, 0x75, 0x5d, 0xc9, 0x6a, 0xb1, 0x55, 0xf1, 0xc6, 0xa1, 0x41, 0x69, 0x12, 0xf7, 0x9e, 0x65,
	0xaf, 0x51, 0xaf, 0x80, 0x66, 0x41, 0x29, 0xd6, 0x17, 0x0c, 0x9c, 0x80, 0x3e, 0x67, 0x55, 0xb7,
	0x0d, 0x62, 0x24, 0xe2, 0x43, 0x68, 0x38, 0xaa, 0x79, 0x8f, 0xc9, 0x49, 0x88, 0xfb, 0x0e, 0x04,
	0x0f, 0x40, 0xf7, 0x1a, 0xd9, 0xe4, 0x4e, 0xa6, 0xd1, 0x9f, 0x78, 0x10, 0x7a, 0x37, 0xf4, 0xf2,
	0xba, 0x70, 0x29, 0x8d, 0x3f, 0x5c, 0xec, 0xba, 0x80, 0x94, 0x09, 0x38, 0x1a, 0x38, 0xe0, 0xeb,
	0xc4, 0xd5, 0x0d, 0xdd, 0xd5, 0xf1, 0xc9, 0xdd, 0xf9, 0xc2, 0x9f, 0x21, 0xfe, 0xdd, 0x0d, 0x83,
	0xef, 0x57, 0x8d, 0xdd, 0x7e, 0xde, 0x4e, 0x9e, 0xc1, 0x97, 0x20, 0xbe, 0xce, 0x84, 0xb0, 0x0c,
	0xcf, 0xd0, 0xc5, 0x47, 0x92, 0x2a, 0xcf, 0xe0, 0xaa, 0x97, 0xe2, 0xd5, 0x79, 0x7a, 0x09, 0x5c,
	0xd7, 0x9d, 0x35, 0x0d, 0x38, 0x39, 0xfd, 0xfd, 0x1c, 0x5d, 0xbe, 0x99, 0x62, 0xcf, 0xc7, 0xe5,
	0xe7, 0x83, 0xae, 0xd9, 0xdb, 0x86, 0x6b, 0x06, 0x9c, 0x52, 0x15, 0x29, 0x23, 0xc2, 0x8c, 0x90,
	0xdc, 0x2b, 0x5d, 0x74, 0xe8, 0x31, 0x01, 0xfb, 0xc8, 0x7a, 0xcc, 0x2c, 0x0c, 0x5e, 0x25, 0x65,
	0xd2, 0x91, 0xc3, 0xd0, 0xcd, 0x03, 0x42, 0x64, 0x37, 0x9f, 0x81, 0x23, 0x4b, 0xae, 0x6e, 0x77,
	0x74, 0x29, 0x8e, 0xc3, 0xa0, 0x5f, 0x86, 0xec, 0xd6, 0xd3, 0x80, 0x97, 0x5c, 0xab, 0xda, 0xc9,
	0xce, 0x63, 0x14, 0x7d, 0x4d, 0x84, 0xec, 0xc6, 0xdf, 0x44, 0x80, 0xaf, 0x5b, 0x1b, 0x1d, 0x05,
	0xe8, 0x5b, 0x70, 0xd4, 0x20, 0x8e, 0x5b, 0x32, 0x59, 0x85, 0x93, 0xaf, 0xdf, 0x60, 0x5d, 0x4d,
	0xf8, 0x8e, 0xf8, 0x48, 0xe7, 0xc5, 0x65, 0xa6, 0xfc, 0x00, 0xc1, 0x11, 0x1f, 0x0a, 0x49, 0xf0,
	0x78, 0x18, 0x06, 0x1c, 0x6b, 0xdd, 0x2e, 0x90, 0xc6, 0x3d, 0xb5, 0x7e, 0xfe, 0x7e, 0xbe, 0x7e,
	0x5b, 0xb6, 0x80, 0xc8, 0x12, 0x42, 0x73, 0x50, 0xb3, 0x30, 0x38, 0xc3, 0x6a, 0xb1, 0x0e, 0x7d,
	0x31, 0x20, 0x44, 0xf6, 0x5c, 0x9e, 0xf4, 0xc2, 0x51, 0x8d, 0x38, 0xae, 0x65, 0x37, 0x1e, 0xcd,
	0x69, 0x88, 0xf1, 0x12, 0xb1, 0xbe, 0x3b, 0xbf, 0x7f, 0xa2, 0xfc, 0xf5, 0xff, 0xa2, 0x36, 0xf8,
	0x71, 0x63, 0xa2, 0xbc, 0x1c, 0x92, 0x8d, 0x9a, 0xaa, 0xf1, 0xff, 0xe2, 0xe0, 0x79, 0x14, 0x07,
	0xd1, 0xf0, 0xe2, 0xe0, 0x35, 0x7f, 0x79, 0x19, 0x63, 0xb4, 0xd1, 0xdd, 0xa5, 0x65, 0x27, 0x79,
	0xff, 0x26, 0x1c, 0x0b, 0x1e, 0xb7, 0x6c, 0x28, 0xbf, 0xe2, 0xf7, 0x6a, 0x2e, 0xb6, 0xe6, 0xcf,
	0xca, 0x3b, 0xf0, 0x8a, 0x3f, 0xa9, 0xce, 0xeb, 0xa5, 0xb2, 0xb5, 0xb1, 0xcf, 0x80, 0x9c, 0x82,
	0x13, 0xcd, 0x64, 0xc9, 0xc6, 0xe5, 0x1f, 0x11, 0xc4, 0x16, 0xad, 0xa2, 0x46, 0x0a, 0x96, 0x6d,
	0xe0, 0x0b, 0x10, 0xab, 0x75, 0x96, 0x8c, 0xb6, 0x59, 0x61, 0x72, 0xd3, 0xa3, 0xd0, 0xea, 0xc4,
	0xf8, 0x2b, 0xd0, 0x57, 0x21, 0x8e, 0xa3, 0x17, 0xa9, 0x11, 0xa9, 0x03, 0xe4, 0x42, 0x1c, 0xa0,
	0xb6, 0xa1, 0x7a, 0x9d, 0xf3, 0xb0, 0x83, 0xd1, 0x3c, 0x09, 0xc9, 0x8b, 0x70, 0xc8, 0xbf, 0xd0,
	0xd6, 0x89, 0xfd, 0xa1, 0x1b, 0x8e, 0xf9, 0x9a, 0xa1, 0x45, 0xab, 0xe8, 0xec, 0xeb, 0x12, 0x38,
	0x03, 0x87, 0x0b, 0x56, 0x79, 0xbd, 0x62, 0xe6, 0x45, 0xfb, 0x45, 0xd5, 0x8a, 0x69, 0x87, 0xf8,
	0xcb, 0x79, 0xf6, 0x0e, 0x7f, 0x04, 0x87, 0xc4, 0x0c, 0x20, 0x4f, 0x3b, 0x6f, 0x96, 0x65, 0xfa,
	0x47, 0xa6, 0xc2, 0x54, 0x6f, 0x0a, 0x4d, 0x5d, 0xe2, 0x52, 0x6e, 0x6e, 0x56, 0x89, 0x16, 0x77,
	0xea, 0x0f, 0xf8, 0x3c, 0xc4, 0x56, 0x6c, 0xab, 0x92, 0xa7, 0x96, 0x66, 0x1d, 0x60, 0xf8, 0x89,
	0x44, 0x29, 0x31, 0x7d, 0xc4, 0xa3, 0xd0, 0xe7, 0x5a, 0x9c, 0xad, 0x77, 0x4f, 0xb6, 0x88, 0x6b,
	0x31, 0xa6, 0x40, 0xff, 0x1a, 0x91, 0xee, 0x5f, 0xfb, 0x5a, 0xf7, 0xaf, 0xca, 0x04, 0xc4, 0x7d,
	0xca, 0xe1, 0x13, 0x90, 0x58, 0x9a, 0xd3, 0x6e, 0x2d, 0xcc, 0xce, 0xe5, 0x6f, 0x7e, 0x78, 0x63,
	0x2e, 0xff, 0xfe, 0xbb, 0x4b, 0x37, 0xe6, 0x66, 0x17, 0xe6, 0x17, 0xe6, 0xae, 0x0e, 0xbc, 0x80,
	0x63, 0xd0, 0xab, 0xcd, 0x5d, 0x5d, 0x58, 0x1a, 0x40, 0xca, 0x03, 0x38, 0xbe, 0xcb, 0x56, 0xa2,
	0xad, 0xbd, 0x00, 0x3d, 0x65, 0xab, 0xe8, 0xb5, 0xb4, 0x5f, 0x92, 0x71, 0x34, 0x8d, 0x71, 0x48,
	0x37, 0xb4, 0x3f, 0x47, 0x70, 0xc2, 0xb7, 0xfb, 0x7b, 0xde, 0x30, 0x64, 0x7f, 0xae, 0x74, 0xf0,
	0x53, 0x01, 0xe5, 0x31, 0x82, 0x93, 0x2d, 0x00, 0x0a, 0x23, 0x4d, 0x03, 0xd4, 0x66, 0x38, 0x9e,
	0xa9, 0x4e, 0x07, 0x4d, 0x55, 0x9f, 0xf1, 0xd4, 0xf8, 0x35, 0x1f, 0x93, 0xb4, 0xb5, 0x7e, 0x86,
	0xe0, 0x65, 0x1f, 0x18, 0x5e, 0x1f, 0x7c, 0x61, 0x4c, 0xf5, 0x0d, 0x04, 0xc9, 0x66, 0xe8, 0x84,
	0x9d, 0x2e, 0x41, 0x1f, 0xcf, 0xcb, 0x2d, 0x8c, 0x14, 0xf0, 0x27, 0xce, 0xac, 0x79, 0x1c, 0xd2,
	0x16, 0xfa, 0x09, 0x0a, 0x78, 0x33, 0xbd, 0x00, 0xbf, 0x30, 0xf6, 0xd9, 0x84, 0xc4, 0x6e, 0x68,
	0xc2, 0x38, 0xe3, 0xd0, 0x4b, 0xaf, 0x66, 0xcf, 0x34, 0xa7, 0xf6, 0xb8, 0xd4, 0x35, 0x4e, 0x2d,
	0x6d, 0x96, 0xef, 0x23, 0x38, 0x36, 0x6d, 0x18, 0x1d, 0x5b, 0x25, 0x58, 0x80, 0x74, 0x75, 0x52,
	0x80, 0x28, 0x1f, 0xc0, 0xf1, 0x06, 0x48, 0xb2, 0x57, 0xfe, 0x49, 0x81, 0x82, 0x96, 0x9f, 0x8e,
	0xb8, 0x2e, 0x98, 0xe0, 0x77, 0xe9, 0x0b, 0xe5, 0x3e, 0xbc, 0x1c, 0xe8, 0xe2, 0xf6, 0xaf, 0xae,
	0xba, 0x7b, 0xa3, 0x99, 0x17, 0xb9, 0x26, 0x5e, 0x7d, 0x3b, 0xea, 0xdf, 0xf9, 0x36, 0x24, 0x77,
	0xef, 0x7c, 0x40, 0x5a, 0x7d, 0x0b, 0xc1, 0xb1, 0xfa, 0xdc, 0x75, 0x69, 0x55, 0xb7, 0x8d, 0x7d,
	0xe9, 0x34, 0x05, 0xc0, 0x06, 0x3b, 0xf9, 0x36, 0x0a, 0xfd, 0x18, 0xe3, 0xa0, 0x38, 0x94, 0x9f,
	0xa2, 0x80, 0x17, 0x33, 0x1c, 0x07, 0x1b, 0x61, 0x62, 0xe4, 0xba, 0x9f, 0x08, 0x7b, 0x18, 0x48,
	0x8f, 0x1e, 0xb6, 0xda, 0x65, 0x16, 0x61, 0x6a, 0x78, 0x31, 0x36, 0x14, 0xe2, 0xb7, 0xdc, 0xbc,
	0x82, 0x5e, 0x3a, 0xca, 0xfe, 0x14, 0x88, 0xb2, 0xcf, 0xeb, 0x88, 0x1a, 0x82, 0xb4, 0xe7, 0xe0,
	0x82, 0x94, 0x69, 0xd4, 0x86, 0x3b, 0x37, 0x2a, 0xe1, 0xf7, 0xa3, 0x6f, 0xa3, 0x86, 0x28, 0xfd,
	0xdc, 0x3c, 0xba, 0x31, 0x68, 0x0f, 0x52, 0xcb, 0x79, 0x38, 0xae, 0x91, 0x65, 0xbd, 0xac, 0x9b,
	0x85, 0x8e, 0x06, 0x53, 0x93, 0x90, 0x68, 0x94, 0x23, 0xdb, 0x77, 0x3c, 0x80, 0xa8, 0x77, 0xc0,
	0xf8, 0x38, 0xf4, 0x6d, 0x59, 0x26, 0xa9, 0xd3, 0x45, 0xe8, 0x23, 0x6f, 0xa2, 0x9c, 0xf5, 0x65,
	0x93, 0xb8, 0xbe, 0x26, 0x8a, 0xbf, 0x58, 0x30, 0xf0, 0x64, 0x40, 0xc7, 0xee, 0x3d, 0x67, 0x80,
	0x3e, 0xfd, 0xff, 0xda, 0x05, 0x50, 0xef, 0x68, 0x71, 0x02, 0xfa, 0x36, 0x88, 0xed, 0x94, 0x2c,
	0x53, 0xec, 0xef, 0x3d, 0xe2, 0x3b, 0x30, 0xc0, 0xfc, 0x31, 0x2f, 0xba, 0xe5, 0xf1, 0x7c, 0x56,
	0xcc, 0x6b, 0xb3, 0x21, 0x9e, 0xcb, 0x89, 0x55, 0x8d, 0x3e, 0xf3, 0x6d, 0xc6, 0xf3, 0xd9, 0xb7,
	0x5f, 0xd0, 0x0e, 0xdb, 0xbe, 0x37, 0x59, 0x3c, 0x03, 0x31, 0x9b, 0xf0, 0xb9, 0x8e, 0xc3, 0xf0,
	0x87, 0xd7, 0xb2, 0x9a, 0x47, 0xab, 0xd5, 0xd9, 0xf0, 0x3c, 0x1c, 0x11, 0x6d, 0xe6, 0xbd, 0x92,
	0x69, 0x58, 0xf7, 0xf2, 0x0e, 0xed, 0x05, 0x45, 0xa3, 0x70, 0xcc, 0xab, 0xf8, 0x69, 0x6f, 0xc2,
	0xaa, 0xfd, 0xf7, 0x56, 0xae, 0xea, 0x9b, 0xda, 0x4b, 0x9c, 0xe5, 0x03, 0xc6, 0xc1, 0x9a, 0x47,
	0x3c, 0x09, 0x11, 0xbd, 0x50, 0x20, 0x8e, 0x23, 0x9a, 0x85, 0xb0, 0x22, 0x68, 0x9a, 0x11, 0x6a,
	0x82, 0x61, 0xe6, 0x10, 0x00, 0xb7, 0x11, 0x0d, 0xec, 0x91, 0xef, 0x0d, 0x41, 0xbf, 0xe7, 0xb1,
	0xbc, 0xec, 0xc7, 0xdf, 0x41, 0xd0, 0x7d, 0x8d, 0xb8, 0xf8, 0x5c, 0x88, 0xcc, 0x5d, 0x9f, 0xee,
	0x92, 0x12, 0x5f, 0xaa, 0x94, 0xcc, 0xa3, 0x3f, 0xff, 0xf3, 0x87, 0x5d, 0x6f, 0xe0, 0xb3, 0x99,
	0x8a, 0x6e, 0xea, 0x45, 0x62, 0xa4, 0x1b, 0xbf, 0x26, 0x3a, 0x99, 0x07, 0x75, 0x2f, 0x7c, 0x88,
	0xbf, 0x8b, 0xa0, 0x87, 0xa6, 0x62, 0xac, 0xca, 0xb5, 0x68, 0xde, 0x15, 0x92, 0xcc, 0x48, 0xd3,
	0xf3, 0xb4, 0xae, 0x28, 0x0c, 0xda, 0x09, 0x9c, 0x6c, 0x0d, 0x0d, 0x7f, 0x8c, 0x20, 0xc2, 0xbf,
	0x43, 0xe0, 0x4c, 0x9b, 0xdf, 0xa2, 0x92, 0x7b, 0x97, 0xf2, 0xca, 0xc2, 0xf6, 0x4e, 0x6a, 0xa8,
	0xd5, 0x97, 0x8e, 0x3e, 0xf1, 0x82, 0xc1, 0x3c, 0xa5, 0x84, 0xc0, 0xbc, 0x88, 0x52, 0xf8, 0x09,
	0x82, 0x08, 0x9f, 0x7f, 0x87, 0x22, 0x6d, 0xf6, 0x09, 0x41, 0x06, 0xe9, 0x2d, 0x8e, 0xb4, 0xf9,
	0x84, 0x3d, 0x80, 0xf4, 0xdc, 0x88, 0xec, 0x59, 0x53, 0xd8, 0x9f, 0x22, 0x88, 0xf0, 0x24, 0x1a,
	0x0a, 0xbb, 0xd9, 0x84, 0x5e, 0x06, 0xb6, 0xbe, 0xbd, 0x93, 0x52, 0x5b, 0xcd, 0xe6, 0x8f, 0x36,
	0x76, 0xdb, 0x73, 0x95, 0xaa, 0xbb, 0xc9, 0x1d, 0x36, 0x25, 0xed, 0xb0, 0x4f, 0x10, 0xf4, 0xf2,
	0x08, 0x0d, 0xf3, 0xd8, 0x26, 0x53, 0x7e, 0x19, 0xfc, 0x5f, 0xdd, 0xde, 0x49, 0x9d, 0x6a, 0x31,
	0xdf, 0x0f, 0x58, 0x3d, 0xa3, 0xa4, 0x65, 0xad, 0xce, 0xf2, 0x0f, 0xfe, 0x0d, 0x82, 0x9e, 0x25,
	0xd7, 0xaa, 0xe2, 0x74, 0x28, 0xea, 0xc6, 0x0f, 0x04, 0xb2, 0xbe, 0xf2, 0x6a, 0xf3, 0x4f, 0x03,
	0x01, 0xcc, 0xaa, 0x72, 0x4e, 0x1e, 0xb3, 0x55, 0xc5, 0x9f, 0x20, 0xe8, 0xb9, 0x6e, 0x6d, 0x90,
	0x50, 0xc8, 0xbb, 0xbf, 0x2c, 0xc8, 0x40, 0xfe, 0x90, 0x43, 0x6e, 0xf6, 0x41, 0x20, 0x00, 0x39,
	0x27, 0x0f, 0xb9, 0x62, 0x6d, 0x10, 0xea, 0xe1, 0xbf, 0x43, 0x10, 0xe1, 0x4d, 0x69, 0xa8, 0x87,
	0x37, 0x9b, 0xfb, 0xcb, 0x20, 0xbf, 0xcd, 0x03, 0xb3, 0xf9, 0xc4, 0x3f, 0x80, 0x3d, 0xab, 0xa8,
	0xb2, 0xd8, 0xf9, 0xed, 0x83, 0xb7, 0x11, 0xf4, 0x89, 0xd9, 0x2a, 0xce, 0xb6, 0x3b, 0x6e, 0x97,
	0x01, 0xaf, 0x6d, 0xef, 0xa4, 0x4e, 0xb7, 0x9c, 0xdf, 0x06, 0xd0, 0x9f, 0x55, 0x94, 0x90, 0x04,
	0x68, 0x73, 0x09, 0xd4, 0xde, 0x7f, 0x41, 0x70, 0x98, 0xc5, 0x8b, 0x37, 0x67, 0xc5, 0x13, 0x92,
	0x71, 0xd9, 0x30, 0xe4, 0x95, 0x51, 0x60, 0x75, 0x7b, 0x27, 0x75, 0x76, 0x8f, 0xf1, 0x6e, 0x40,
	0x8d, 0xf3, 0xca, 0x78, 0x5b, 0x71, 0x5a, 0x53, 0xe2, 0x63, 0x04, 0x51, 0x7a, 0x8d, 0x2d, 0x5a,
	0x45, 0x07, 0xe7, 0xda, 0x1e, 0x5f, 0x26, 0x47, 0xda, 0x61, 0x11, 0x37, 0xe4, 0x18, 0x0f, 0x53,
	0x2c, 0xed, 0xf3, 0x6c, 0x82, 0xf7, 0x29, 0x82, 0x7e, 0x2a, 0xb1, 0x3e, 0xf1, 0xc2, 0xe7, 0xe5,
	0x36, 0xdf, 0x35, 0xc4, 0x4b, 0x5e, 0x68, 0x9f, 0x51, 0x60, 0xbf, 0xc8, 0xb0, 0x8f, 0xe1, 0x11,
	0x49, 0xec, 0x19, 0xdf, 0x54, 0xed, 0x13, 0x04, 0x71, 0x2a, 0x5d, 0x0c, 0xa2, 0xf0, 0x98, 0x1c,
	0x8a, 0xe0, 0x54, 0x2d, 0x39, 0xde, 0x26, 0x97, 0x00, 0x7e, 0x9e, 0x27, 0x1a, 0x9c, 0x91, 0x05,
	0xee, 0x4d, 0xba, 0x7e, 0x89, 0x20, 0x46, 0xe5, 0xb2, 0xd9, 0x01, 0x96, 0x3c, 0x6f, 0xff, 0x88,
	0x23, 0x39, 0xda, 0x16, 0x8f, 0xc0, 0x3b, 0xce, 0xef, 0x1f, 0x2c, 0x7b, 0xff, 0x64, 0xf8, 0x00,
	0xea, 0x6f, 0x08, 0xa2, 0xd3, 0x86, 0xc1, 0xc1, 0x86, 0xf9, 0x73, 0xf3, 0xe9, 0x93, 0x4c, 0x70,
	0xde, 0xdf, 0xde, 0x49, 0x65, 0x5b, 0xcf, 0x8a, 0x42, 0xae, 0xff, 0x2b, 0xca, 0x64, 0x5b, 0xda,
	0x5c, 0x5c, 0xd6, 0xdd, 0xc2, 0x2a, 0x2f, 0xe3, 0x68, 0x0e, 0xfa, 0x07, 0x82, 0x38, 0xaf, 0x39,
	0xb8, 0x7e, 0x63, 0xb2, 0xa5, 0x4d, 0xbb, 0x2a, 0x3e, 0xd8, 0xde, 0x49, 0x8d, 0x86, 0xce, 0x8e,
	0x0e, 0x5c, 0x4b, 0xbe, 0x17, 0xd5, 0xf2, 0x17, 0x08, 0xa2, 0xd7, 0x88, 0xcb, 0xda, 0xde, 0xd0,
	0x23, 0x6c, 0x3e, 0x7d, 0x4a, 0xee, 0x39, 0x47, 0x51, 0x66, 0x19, 0xce, 0x29, 0x7c, 0x49, 0x16,
	0x27, 0x9f, 0xbb, 0x64, 0x1e, 0xd4, 0xdb, 0xce, 0x87, 0xf8, 0xd7, 0x08, 0x80, 0x7a, 0x2f, 0x9f,
	0xea, 0x60, 0x49, 0x27, 0x0f, 0xcc, 0xa7, 0x92, 0x63, 0xed, 0x31, 0x89, 0xd0, 0x98, 0xe0, 0xf7,
	0x2e, 0x56, 0xdb, 0x83, 0x4f, 0x33, 0x28, 0x8d, 0x8d, 0xbd, 0x0d, 0xdb, 0x7c, 0x66, 0x24, 0xe3,
	0x38, 0x77, 0x59, 0xd9, 0xd0, 0x72, 0x44, 0xd3, 0xcb, 0x1e, 0x19, 0xfc, 0x51, 0xa5, 0x4d, 0xf8,
	0xd4, 0x35, 0xfe, 0x5e, 0x0b, 0x00, 0xae, 0x84, 0x74, 0x00, 0xb4, 0xab, 0xc7, 0x56, 0x93, 0x00,
	0x08, 0xaa, 0x12, 0x12, 0x00, 0x53, 0xa9, 0x8e, 0x1c, 0xeb, 0xf7, 0x08, 0x62, 0xb5, 0xe1, 0x4a,
	0x68, 0xc2, 0x6d, 0x31, 0xca, 0x91, 0x51, 0xf0, 0xa3, 0xed, 0x9d, 0xd4, 0x99, 0x90, 0x21, 0x4e,
	0xa0, 0xba, 0x18, 0x55, 0x72, 0xb2, 0x57, 0xb5, 0xed, 0x09, 0x9c, 0x99, 0xbb, 0x3d, 0x5b, 0x2c,
	0xb9, 0xab, 0xeb, 0xcb, 0x6a, 0xc1, 0xaa, 0x88, 0x3f, 0xf5, 0xa6, 0xf9, 0x9f, 0x7a, 0x8b, 0x56,
	0xba, 0x48, 0x4c, 0x66, 0xb9, 0xd6, 0xff, 0xf6, 0xbd, 0xc4, 0x7e, 0x2c, 0x47, 0x18, 0xd9, 0xe8,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x26, 0x55, 0x30, 0x95, 0x2d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterServiceClient interface {
	// Returns the specified Redis cluster.
	//
	// To get the list of available Redis clusters, make a [List] request.
	Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Retrieves the list of Redis clusters that belong
	// to the specified folder.
	List(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// Creates a Redis cluster in the specified folder.
	Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified Redis cluster.
	Update(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified Redis cluster.
	Delete(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Start the specified Redis cluster.
	Start(ctx context.Context, in *StartClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Stop the specified Redis cluster.
	Stop(ctx context.Context, in *StopClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Moves a Redis cluster to the specified folder.
	Move(ctx context.Context, in *MoveClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Creates a backup for the specified Redis cluster.
	Backup(ctx context.Context, in *BackupClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Creates a new Redis cluster using the specified backup.
	Restore(ctx context.Context, in *RestoreClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Start a manual failover on the specified Redis cluster.
	StartFailover(ctx context.Context, in *StartClusterFailoverRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Retrieves logs for the specified Redis cluster.
	// For more information about logs, see the [Logs](/docs/managed-redis/concepts/logs) section in the documentation.
	ListLogs(ctx context.Context, in *ListClusterLogsRequest, opts ...grpc.CallOption) (*ListClusterLogsResponse, error)
	// Retrieves the list of operations for the specified cluster.
	ListOperations(ctx context.Context, in *ListClusterOperationsRequest, opts ...grpc.CallOption) (*ListClusterOperationsResponse, error)
	// Retrieves the list of available backups for the specified Redis cluster.
	ListBackups(ctx context.Context, in *ListClusterBackupsRequest, opts ...grpc.CallOption) (*ListClusterBackupsResponse, error)
	// Retrieves a list of hosts for the specified cluster.
	ListHosts(ctx context.Context, in *ListClusterHostsRequest, opts ...grpc.CallOption) (*ListClusterHostsResponse, error)
	// Creates new hosts for a cluster.
	AddHosts(ctx context.Context, in *AddClusterHostsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified hosts for a cluster.
	DeleteHosts(ctx context.Context, in *DeleteClusterHostsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns the specified shard.
	GetShard(ctx context.Context, in *GetClusterShardRequest, opts ...grpc.CallOption) (*Shard, error)
	// Retrieves a list of shards.
	ListShards(ctx context.Context, in *ListClusterShardsRequest, opts ...grpc.CallOption) (*ListClusterShardsResponse, error)
	// Creates a new shard.
	AddShard(ctx context.Context, in *AddClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified shard.
	DeleteShard(ctx context.Context, in *DeleteClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Rebalances the cluster. Evenly distributes all the hash slots between the shards.
	Rebalance(ctx context.Context, in *RebalanceClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) List(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Update(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Delete(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Start(ctx context.Context, in *StartClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Stop(ctx context.Context, in *StopClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Move(ctx context.Context, in *MoveClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Backup(ctx context.Context, in *BackupClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Restore(ctx context.Context, in *RestoreClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) StartFailover(ctx context.Context, in *StartClusterFailoverRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/StartFailover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListLogs(ctx context.Context, in *ListClusterLogsRequest, opts ...grpc.CallOption) (*ListClusterLogsResponse, error) {
	out := new(ListClusterLogsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/ListLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListOperations(ctx context.Context, in *ListClusterOperationsRequest, opts ...grpc.CallOption) (*ListClusterOperationsResponse, error) {
	out := new(ListClusterOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListBackups(ctx context.Context, in *ListClusterBackupsRequest, opts ...grpc.CallOption) (*ListClusterBackupsResponse, error) {
	out := new(ListClusterBackupsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/ListBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListHosts(ctx context.Context, in *ListClusterHostsRequest, opts ...grpc.CallOption) (*ListClusterHostsResponse, error) {
	out := new(ListClusterHostsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/ListHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) AddHosts(ctx context.Context, in *AddClusterHostsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/AddHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) DeleteHosts(ctx context.Context, in *DeleteClusterHostsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/DeleteHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetShard(ctx context.Context, in *GetClusterShardRequest, opts ...grpc.CallOption) (*Shard, error) {
	out := new(Shard)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/GetShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListShards(ctx context.Context, in *ListClusterShardsRequest, opts ...grpc.CallOption) (*ListClusterShardsResponse, error) {
	out := new(ListClusterShardsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/ListShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) AddShard(ctx context.Context, in *AddClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/AddShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) DeleteShard(ctx context.Context, in *DeleteClusterShardRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/DeleteShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Rebalance(ctx context.Context, in *RebalanceClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.mdb.redis.v1.ClusterService/Rebalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
type ClusterServiceServer interface {
	// Returns the specified Redis cluster.
	//
	// To get the list of available Redis clusters, make a [List] request.
	Get(context.Context, *GetClusterRequest) (*Cluster, error)
	// Retrieves the list of Redis clusters that belong
	// to the specified folder.
	List(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// Creates a Redis cluster in the specified folder.
	Create(context.Context, *CreateClusterRequest) (*operation.Operation, error)
	// Updates the specified Redis cluster.
	Update(context.Context, *UpdateClusterRequest) (*operation.Operation, error)
	// Deletes the specified Redis cluster.
	Delete(context.Context, *DeleteClusterRequest) (*operation.Operation, error)
	// Start the specified Redis cluster.
	Start(context.Context, *StartClusterRequest) (*operation.Operation, error)
	// Stop the specified Redis cluster.
	Stop(context.Context, *StopClusterRequest) (*operation.Operation, error)
	// Moves a Redis cluster to the specified folder.
	Move(context.Context, *MoveClusterRequest) (*operation.Operation, error)
	// Creates a backup for the specified Redis cluster.
	Backup(context.Context, *BackupClusterRequest) (*operation.Operation, error)
	// Creates a new Redis cluster using the specified backup.
	Restore(context.Context, *RestoreClusterRequest) (*operation.Operation, error)
	// Start a manual failover on the specified Redis cluster.
	StartFailover(context.Context, *StartClusterFailoverRequest) (*operation.Operation, error)
	// Retrieves logs for the specified Redis cluster.
	// For more information about logs, see the [Logs](/docs/managed-redis/concepts/logs) section in the documentation.
	ListLogs(context.Context, *ListClusterLogsRequest) (*ListClusterLogsResponse, error)
	// Retrieves the list of operations for the specified cluster.
	ListOperations(context.Context, *ListClusterOperationsRequest) (*ListClusterOperationsResponse, error)
	// Retrieves the list of available backups for the specified Redis cluster.
	ListBackups(context.Context, *ListClusterBackupsRequest) (*ListClusterBackupsResponse, error)
	// Retrieves a list of hosts for the specified cluster.
	ListHosts(context.Context, *ListClusterHostsRequest) (*ListClusterHostsResponse, error)
	// Creates new hosts for a cluster.
	AddHosts(context.Context, *AddClusterHostsRequest) (*operation.Operation, error)
	// Deletes the specified hosts for a cluster.
	DeleteHosts(context.Context, *DeleteClusterHostsRequest) (*operation.Operation, error)
	// Returns the specified shard.
	GetShard(context.Context, *GetClusterShardRequest) (*Shard, error)
	// Retrieves a list of shards.
	ListShards(context.Context, *ListClusterShardsRequest) (*ListClusterShardsResponse, error)
	// Creates a new shard.
	AddShard(context.Context, *AddClusterShardRequest) (*operation.Operation, error)
	// Deletes the specified shard.
	DeleteShard(context.Context, *DeleteClusterShardRequest) (*operation.Operation, error)
	// Rebalances the cluster. Evenly distributes all the hash slots between the shards.
	Rebalance(context.Context, *RebalanceClusterRequest) (*operation.Operation, error)
}

// UnimplementedClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (*UnimplementedClusterServiceServer) Get(ctx context.Context, req *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedClusterServiceServer) List(ctx context.Context, req *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedClusterServiceServer) Create(ctx context.Context, req *CreateClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedClusterServiceServer) Update(ctx context.Context, req *UpdateClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedClusterServiceServer) Delete(ctx context.Context, req *DeleteClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedClusterServiceServer) Start(ctx context.Context, req *StartClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedClusterServiceServer) Stop(ctx context.Context, req *StopClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedClusterServiceServer) Move(ctx context.Context, req *MoveClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (*UnimplementedClusterServiceServer) Backup(ctx context.Context, req *BackupClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedClusterServiceServer) Restore(ctx context.Context, req *RestoreClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedClusterServiceServer) StartFailover(ctx context.Context, req *StartClusterFailoverRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFailover not implemented")
}
func (*UnimplementedClusterServiceServer) ListLogs(ctx context.Context, req *ListClusterLogsRequest) (*ListClusterLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}
func (*UnimplementedClusterServiceServer) ListOperations(ctx context.Context, req *ListClusterOperationsRequest) (*ListClusterOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (*UnimplementedClusterServiceServer) ListBackups(ctx context.Context, req *ListClusterBackupsRequest) (*ListClusterBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackups not implemented")
}
func (*UnimplementedClusterServiceServer) ListHosts(ctx context.Context, req *ListClusterHostsRequest) (*ListClusterHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}
func (*UnimplementedClusterServiceServer) AddHosts(ctx context.Context, req *AddClusterHostsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHosts not implemented")
}
func (*UnimplementedClusterServiceServer) DeleteHosts(ctx context.Context, req *DeleteClusterHostsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHosts not implemented")
}
func (*UnimplementedClusterServiceServer) GetShard(ctx context.Context, req *GetClusterShardRequest) (*Shard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShard not implemented")
}
func (*UnimplementedClusterServiceServer) ListShards(ctx context.Context, req *ListClusterShardsRequest) (*ListClusterShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShards not implemented")
}
func (*UnimplementedClusterServiceServer) AddShard(ctx context.Context, req *AddClusterShardRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShard not implemented")
}
func (*UnimplementedClusterServiceServer) DeleteShard(ctx context.Context, req *DeleteClusterShardRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShard not implemented")
}
func (*UnimplementedClusterServiceServer) Rebalance(ctx context.Context, req *RebalanceClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebalance not implemented")
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Get(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).List(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Create(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Update(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Delete(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Start(ctx, req.(*StartClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Stop(ctx, req.(*StopClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Move(ctx, req.(*MoveClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Backup(ctx, req.(*BackupClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Restore(ctx, req.(*RestoreClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_StartFailover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartClusterFailoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).StartFailover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/StartFailover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).StartFailover(ctx, req.(*StartClusterFailoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/ListLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListLogs(ctx, req.(*ListClusterLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListOperations(ctx, req.(*ListClusterOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/ListBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListBackups(ctx, req.(*ListClusterBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/ListHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListHosts(ctx, req.(*ListClusterHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_AddHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).AddHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/AddHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).AddHosts(ctx, req.(*AddClusterHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_DeleteHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).DeleteHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/DeleteHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).DeleteHosts(ctx, req.(*DeleteClusterHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/GetShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetShard(ctx, req.(*GetClusterShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/ListShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListShards(ctx, req.(*ListClusterShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_AddShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).AddShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/AddShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).AddShard(ctx, req.(*AddClusterShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_DeleteShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).DeleteShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/DeleteShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).DeleteShard(ctx, req.(*DeleteClusterShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Rebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalanceClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Rebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.mdb.redis.v1.ClusterService/Rebalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Rebalance(ctx, req.(*RebalanceClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.mdb.redis.v1.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ClusterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClusterService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ClusterService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClusterService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterService_Delete_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ClusterService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ClusterService_Stop_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _ClusterService_Move_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _ClusterService_Backup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _ClusterService_Restore_Handler,
		},
		{
			MethodName: "StartFailover",
			Handler:    _ClusterService_StartFailover_Handler,
		},
		{
			MethodName: "ListLogs",
			Handler:    _ClusterService_ListLogs_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _ClusterService_ListOperations_Handler,
		},
		{
			MethodName: "ListBackups",
			Handler:    _ClusterService_ListBackups_Handler,
		},
		{
			MethodName: "ListHosts",
			Handler:    _ClusterService_ListHosts_Handler,
		},
		{
			MethodName: "AddHosts",
			Handler:    _ClusterService_AddHosts_Handler,
		},
		{
			MethodName: "DeleteHosts",
			Handler:    _ClusterService_DeleteHosts_Handler,
		},
		{
			MethodName: "GetShard",
			Handler:    _ClusterService_GetShard_Handler,
		},
		{
			MethodName: "ListShards",
			Handler:    _ClusterService_ListShards_Handler,
		},
		{
			MethodName: "AddShard",
			Handler:    _ClusterService_AddShard_Handler,
		},
		{
			MethodName: "DeleteShard",
			Handler:    _ClusterService_DeleteShard_Handler,
		},
		{
			MethodName: "Rebalance",
			Handler:    _ClusterService_Rebalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/mdb/redis/v1/cluster_service.proto",
}
