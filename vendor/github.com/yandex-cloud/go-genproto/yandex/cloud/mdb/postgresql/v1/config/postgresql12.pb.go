// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/postgresql/v1/config/postgresql12.proto

package postgresql

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PostgresqlConfig12_WalLevel int32

const (
	PostgresqlConfig12_WAL_LEVEL_UNSPECIFIED PostgresqlConfig12_WalLevel = 0
	PostgresqlConfig12_WAL_LEVEL_REPLICA     PostgresqlConfig12_WalLevel = 1
	PostgresqlConfig12_WAL_LEVEL_LOGICAL     PostgresqlConfig12_WalLevel = 2
)

var PostgresqlConfig12_WalLevel_name = map[int32]string{
	0: "WAL_LEVEL_UNSPECIFIED",
	1: "WAL_LEVEL_REPLICA",
	2: "WAL_LEVEL_LOGICAL",
}

var PostgresqlConfig12_WalLevel_value = map[string]int32{
	"WAL_LEVEL_UNSPECIFIED": 0,
	"WAL_LEVEL_REPLICA":     1,
	"WAL_LEVEL_LOGICAL":     2,
}

func (x PostgresqlConfig12_WalLevel) String() string {
	return proto.EnumName(PostgresqlConfig12_WalLevel_name, int32(x))
}

func (PostgresqlConfig12_WalLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 0}
}

type PostgresqlConfig12_SynchronousCommit int32

const (
	PostgresqlConfig12_SYNCHRONOUS_COMMIT_UNSPECIFIED  PostgresqlConfig12_SynchronousCommit = 0
	PostgresqlConfig12_SYNCHRONOUS_COMMIT_ON           PostgresqlConfig12_SynchronousCommit = 1
	PostgresqlConfig12_SYNCHRONOUS_COMMIT_OFF          PostgresqlConfig12_SynchronousCommit = 2
	PostgresqlConfig12_SYNCHRONOUS_COMMIT_LOCAL        PostgresqlConfig12_SynchronousCommit = 3
	PostgresqlConfig12_SYNCHRONOUS_COMMIT_REMOTE_WRITE PostgresqlConfig12_SynchronousCommit = 4
	PostgresqlConfig12_SYNCHRONOUS_COMMIT_REMOTE_APPLY PostgresqlConfig12_SynchronousCommit = 5
)

var PostgresqlConfig12_SynchronousCommit_name = map[int32]string{
	0: "SYNCHRONOUS_COMMIT_UNSPECIFIED",
	1: "SYNCHRONOUS_COMMIT_ON",
	2: "SYNCHRONOUS_COMMIT_OFF",
	3: "SYNCHRONOUS_COMMIT_LOCAL",
	4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE",
	5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY",
}

var PostgresqlConfig12_SynchronousCommit_value = map[string]int32{
	"SYNCHRONOUS_COMMIT_UNSPECIFIED":  0,
	"SYNCHRONOUS_COMMIT_ON":           1,
	"SYNCHRONOUS_COMMIT_OFF":          2,
	"SYNCHRONOUS_COMMIT_LOCAL":        3,
	"SYNCHRONOUS_COMMIT_REMOTE_WRITE": 4,
	"SYNCHRONOUS_COMMIT_REMOTE_APPLY": 5,
}

func (x PostgresqlConfig12_SynchronousCommit) String() string {
	return proto.EnumName(PostgresqlConfig12_SynchronousCommit_name, int32(x))
}

func (PostgresqlConfig12_SynchronousCommit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 1}
}

type PostgresqlConfig12_ConstraintExclusion int32

const (
	PostgresqlConfig12_CONSTRAINT_EXCLUSION_UNSPECIFIED PostgresqlConfig12_ConstraintExclusion = 0
	PostgresqlConfig12_CONSTRAINT_EXCLUSION_ON          PostgresqlConfig12_ConstraintExclusion = 1
	PostgresqlConfig12_CONSTRAINT_EXCLUSION_OFF         PostgresqlConfig12_ConstraintExclusion = 2
	PostgresqlConfig12_CONSTRAINT_EXCLUSION_PARTITION   PostgresqlConfig12_ConstraintExclusion = 3
)

var PostgresqlConfig12_ConstraintExclusion_name = map[int32]string{
	0: "CONSTRAINT_EXCLUSION_UNSPECIFIED",
	1: "CONSTRAINT_EXCLUSION_ON",
	2: "CONSTRAINT_EXCLUSION_OFF",
	3: "CONSTRAINT_EXCLUSION_PARTITION",
}

var PostgresqlConfig12_ConstraintExclusion_value = map[string]int32{
	"CONSTRAINT_EXCLUSION_UNSPECIFIED": 0,
	"CONSTRAINT_EXCLUSION_ON":          1,
	"CONSTRAINT_EXCLUSION_OFF":         2,
	"CONSTRAINT_EXCLUSION_PARTITION":   3,
}

func (x PostgresqlConfig12_ConstraintExclusion) String() string {
	return proto.EnumName(PostgresqlConfig12_ConstraintExclusion_name, int32(x))
}

func (PostgresqlConfig12_ConstraintExclusion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 2}
}

type PostgresqlConfig12_ForceParallelMode int32

const (
	PostgresqlConfig12_FORCE_PARALLEL_MODE_UNSPECIFIED PostgresqlConfig12_ForceParallelMode = 0
	PostgresqlConfig12_FORCE_PARALLEL_MODE_ON          PostgresqlConfig12_ForceParallelMode = 1
	PostgresqlConfig12_FORCE_PARALLEL_MODE_OFF         PostgresqlConfig12_ForceParallelMode = 2
	PostgresqlConfig12_FORCE_PARALLEL_MODE_REGRESS     PostgresqlConfig12_ForceParallelMode = 3
)

var PostgresqlConfig12_ForceParallelMode_name = map[int32]string{
	0: "FORCE_PARALLEL_MODE_UNSPECIFIED",
	1: "FORCE_PARALLEL_MODE_ON",
	2: "FORCE_PARALLEL_MODE_OFF",
	3: "FORCE_PARALLEL_MODE_REGRESS",
}

var PostgresqlConfig12_ForceParallelMode_value = map[string]int32{
	"FORCE_PARALLEL_MODE_UNSPECIFIED": 0,
	"FORCE_PARALLEL_MODE_ON":          1,
	"FORCE_PARALLEL_MODE_OFF":         2,
	"FORCE_PARALLEL_MODE_REGRESS":     3,
}

func (x PostgresqlConfig12_ForceParallelMode) String() string {
	return proto.EnumName(PostgresqlConfig12_ForceParallelMode_name, int32(x))
}

func (PostgresqlConfig12_ForceParallelMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 3}
}

type PostgresqlConfig12_LogLevel int32

const (
	PostgresqlConfig12_LOG_LEVEL_UNSPECIFIED PostgresqlConfig12_LogLevel = 0
	PostgresqlConfig12_LOG_LEVEL_DEBUG5      PostgresqlConfig12_LogLevel = 1
	PostgresqlConfig12_LOG_LEVEL_DEBUG4      PostgresqlConfig12_LogLevel = 2
	PostgresqlConfig12_LOG_LEVEL_DEBUG3      PostgresqlConfig12_LogLevel = 3
	PostgresqlConfig12_LOG_LEVEL_DEBUG2      PostgresqlConfig12_LogLevel = 4
	PostgresqlConfig12_LOG_LEVEL_DEBUG1      PostgresqlConfig12_LogLevel = 5
	PostgresqlConfig12_LOG_LEVEL_LOG         PostgresqlConfig12_LogLevel = 6
	PostgresqlConfig12_LOG_LEVEL_NOTICE      PostgresqlConfig12_LogLevel = 7
	PostgresqlConfig12_LOG_LEVEL_WARNING     PostgresqlConfig12_LogLevel = 8
	PostgresqlConfig12_LOG_LEVEL_ERROR       PostgresqlConfig12_LogLevel = 9
	PostgresqlConfig12_LOG_LEVEL_FATAL       PostgresqlConfig12_LogLevel = 10
	PostgresqlConfig12_LOG_LEVEL_PANIC       PostgresqlConfig12_LogLevel = 11
)

var PostgresqlConfig12_LogLevel_name = map[int32]string{
	0:  "LOG_LEVEL_UNSPECIFIED",
	1:  "LOG_LEVEL_DEBUG5",
	2:  "LOG_LEVEL_DEBUG4",
	3:  "LOG_LEVEL_DEBUG3",
	4:  "LOG_LEVEL_DEBUG2",
	5:  "LOG_LEVEL_DEBUG1",
	6:  "LOG_LEVEL_LOG",
	7:  "LOG_LEVEL_NOTICE",
	8:  "LOG_LEVEL_WARNING",
	9:  "LOG_LEVEL_ERROR",
	10: "LOG_LEVEL_FATAL",
	11: "LOG_LEVEL_PANIC",
}

var PostgresqlConfig12_LogLevel_value = map[string]int32{
	"LOG_LEVEL_UNSPECIFIED": 0,
	"LOG_LEVEL_DEBUG5":      1,
	"LOG_LEVEL_DEBUG4":      2,
	"LOG_LEVEL_DEBUG3":      3,
	"LOG_LEVEL_DEBUG2":      4,
	"LOG_LEVEL_DEBUG1":      5,
	"LOG_LEVEL_LOG":         6,
	"LOG_LEVEL_NOTICE":      7,
	"LOG_LEVEL_WARNING":     8,
	"LOG_LEVEL_ERROR":       9,
	"LOG_LEVEL_FATAL":       10,
	"LOG_LEVEL_PANIC":       11,
}

func (x PostgresqlConfig12_LogLevel) String() string {
	return proto.EnumName(PostgresqlConfig12_LogLevel_name, int32(x))
}

func (PostgresqlConfig12_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 4}
}

type PostgresqlConfig12_LogErrorVerbosity int32

const (
	PostgresqlConfig12_LOG_ERROR_VERBOSITY_UNSPECIFIED PostgresqlConfig12_LogErrorVerbosity = 0
	PostgresqlConfig12_LOG_ERROR_VERBOSITY_TERSE       PostgresqlConfig12_LogErrorVerbosity = 1
	PostgresqlConfig12_LOG_ERROR_VERBOSITY_DEFAULT     PostgresqlConfig12_LogErrorVerbosity = 2
	PostgresqlConfig12_LOG_ERROR_VERBOSITY_VERBOSE     PostgresqlConfig12_LogErrorVerbosity = 3
)

var PostgresqlConfig12_LogErrorVerbosity_name = map[int32]string{
	0: "LOG_ERROR_VERBOSITY_UNSPECIFIED",
	1: "LOG_ERROR_VERBOSITY_TERSE",
	2: "LOG_ERROR_VERBOSITY_DEFAULT",
	3: "LOG_ERROR_VERBOSITY_VERBOSE",
}

var PostgresqlConfig12_LogErrorVerbosity_value = map[string]int32{
	"LOG_ERROR_VERBOSITY_UNSPECIFIED": 0,
	"LOG_ERROR_VERBOSITY_TERSE":       1,
	"LOG_ERROR_VERBOSITY_DEFAULT":     2,
	"LOG_ERROR_VERBOSITY_VERBOSE":     3,
}

func (x PostgresqlConfig12_LogErrorVerbosity) String() string {
	return proto.EnumName(PostgresqlConfig12_LogErrorVerbosity_name, int32(x))
}

func (PostgresqlConfig12_LogErrorVerbosity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 5}
}

type PostgresqlConfig12_LogStatement int32

const (
	PostgresqlConfig12_LOG_STATEMENT_UNSPECIFIED PostgresqlConfig12_LogStatement = 0
	PostgresqlConfig12_LOG_STATEMENT_NONE        PostgresqlConfig12_LogStatement = 1
	PostgresqlConfig12_LOG_STATEMENT_DDL         PostgresqlConfig12_LogStatement = 2
	PostgresqlConfig12_LOG_STATEMENT_MOD         PostgresqlConfig12_LogStatement = 3
	PostgresqlConfig12_LOG_STATEMENT_ALL         PostgresqlConfig12_LogStatement = 4
)

var PostgresqlConfig12_LogStatement_name = map[int32]string{
	0: "LOG_STATEMENT_UNSPECIFIED",
	1: "LOG_STATEMENT_NONE",
	2: "LOG_STATEMENT_DDL",
	3: "LOG_STATEMENT_MOD",
	4: "LOG_STATEMENT_ALL",
}

var PostgresqlConfig12_LogStatement_value = map[string]int32{
	"LOG_STATEMENT_UNSPECIFIED": 0,
	"LOG_STATEMENT_NONE":        1,
	"LOG_STATEMENT_DDL":         2,
	"LOG_STATEMENT_MOD":         3,
	"LOG_STATEMENT_ALL":         4,
}

func (x PostgresqlConfig12_LogStatement) String() string {
	return proto.EnumName(PostgresqlConfig12_LogStatement_name, int32(x))
}

func (PostgresqlConfig12_LogStatement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 6}
}

type PostgresqlConfig12_TransactionIsolation int32

const (
	PostgresqlConfig12_TRANSACTION_ISOLATION_UNSPECIFIED      PostgresqlConfig12_TransactionIsolation = 0
	PostgresqlConfig12_TRANSACTION_ISOLATION_READ_UNCOMMITTED PostgresqlConfig12_TransactionIsolation = 1
	PostgresqlConfig12_TRANSACTION_ISOLATION_READ_COMMITTED   PostgresqlConfig12_TransactionIsolation = 2
	PostgresqlConfig12_TRANSACTION_ISOLATION_REPEATABLE_READ  PostgresqlConfig12_TransactionIsolation = 3
	PostgresqlConfig12_TRANSACTION_ISOLATION_SERIALIZABLE     PostgresqlConfig12_TransactionIsolation = 4
)

var PostgresqlConfig12_TransactionIsolation_name = map[int32]string{
	0: "TRANSACTION_ISOLATION_UNSPECIFIED",
	1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED",
	2: "TRANSACTION_ISOLATION_READ_COMMITTED",
	3: "TRANSACTION_ISOLATION_REPEATABLE_READ",
	4: "TRANSACTION_ISOLATION_SERIALIZABLE",
}

var PostgresqlConfig12_TransactionIsolation_value = map[string]int32{
	"TRANSACTION_ISOLATION_UNSPECIFIED":      0,
	"TRANSACTION_ISOLATION_READ_UNCOMMITTED": 1,
	"TRANSACTION_ISOLATION_READ_COMMITTED":   2,
	"TRANSACTION_ISOLATION_REPEATABLE_READ":  3,
	"TRANSACTION_ISOLATION_SERIALIZABLE":     4,
}

func (x PostgresqlConfig12_TransactionIsolation) String() string {
	return proto.EnumName(PostgresqlConfig12_TransactionIsolation_name, int32(x))
}

func (PostgresqlConfig12_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 7}
}

type PostgresqlConfig12_ByteaOutput int32

const (
	PostgresqlConfig12_BYTEA_OUTPUT_UNSPECIFIED PostgresqlConfig12_ByteaOutput = 0
	PostgresqlConfig12_BYTEA_OUTPUT_HEX         PostgresqlConfig12_ByteaOutput = 1
	PostgresqlConfig12_BYTEA_OUTPUT_ESCAPED     PostgresqlConfig12_ByteaOutput = 2
)

var PostgresqlConfig12_ByteaOutput_name = map[int32]string{
	0: "BYTEA_OUTPUT_UNSPECIFIED",
	1: "BYTEA_OUTPUT_HEX",
	2: "BYTEA_OUTPUT_ESCAPED",
}

var PostgresqlConfig12_ByteaOutput_value = map[string]int32{
	"BYTEA_OUTPUT_UNSPECIFIED": 0,
	"BYTEA_OUTPUT_HEX":         1,
	"BYTEA_OUTPUT_ESCAPED":     2,
}

func (x PostgresqlConfig12_ByteaOutput) String() string {
	return proto.EnumName(PostgresqlConfig12_ByteaOutput_name, int32(x))
}

func (PostgresqlConfig12_ByteaOutput) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 8}
}

type PostgresqlConfig12_XmlBinary int32

const (
	PostgresqlConfig12_XML_BINARY_UNSPECIFIED PostgresqlConfig12_XmlBinary = 0
	PostgresqlConfig12_XML_BINARY_BASE64      PostgresqlConfig12_XmlBinary = 1
	PostgresqlConfig12_XML_BINARY_HEX         PostgresqlConfig12_XmlBinary = 2
)

var PostgresqlConfig12_XmlBinary_name = map[int32]string{
	0: "XML_BINARY_UNSPECIFIED",
	1: "XML_BINARY_BASE64",
	2: "XML_BINARY_HEX",
}

var PostgresqlConfig12_XmlBinary_value = map[string]int32{
	"XML_BINARY_UNSPECIFIED": 0,
	"XML_BINARY_BASE64":      1,
	"XML_BINARY_HEX":         2,
}

func (x PostgresqlConfig12_XmlBinary) String() string {
	return proto.EnumName(PostgresqlConfig12_XmlBinary_name, int32(x))
}

func (PostgresqlConfig12_XmlBinary) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 9}
}

type PostgresqlConfig12_XmlOption int32

const (
	PostgresqlConfig12_XML_OPTION_UNSPECIFIED PostgresqlConfig12_XmlOption = 0
	PostgresqlConfig12_XML_OPTION_DOCUMENT    PostgresqlConfig12_XmlOption = 1
	PostgresqlConfig12_XML_OPTION_CONTENT     PostgresqlConfig12_XmlOption = 2
)

var PostgresqlConfig12_XmlOption_name = map[int32]string{
	0: "XML_OPTION_UNSPECIFIED",
	1: "XML_OPTION_DOCUMENT",
	2: "XML_OPTION_CONTENT",
}

var PostgresqlConfig12_XmlOption_value = map[string]int32{
	"XML_OPTION_UNSPECIFIED": 0,
	"XML_OPTION_DOCUMENT":    1,
	"XML_OPTION_CONTENT":     2,
}

func (x PostgresqlConfig12_XmlOption) String() string {
	return proto.EnumName(PostgresqlConfig12_XmlOption_name, int32(x))
}

func (PostgresqlConfig12_XmlOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 10}
}

type PostgresqlConfig12_BackslashQuote int32

const (
	PostgresqlConfig12_BACKSLASH_QUOTE_UNSPECIFIED   PostgresqlConfig12_BackslashQuote = 0
	PostgresqlConfig12_BACKSLASH_QUOTE               PostgresqlConfig12_BackslashQuote = 1
	PostgresqlConfig12_BACKSLASH_QUOTE_ON            PostgresqlConfig12_BackslashQuote = 2
	PostgresqlConfig12_BACKSLASH_QUOTE_OFF           PostgresqlConfig12_BackslashQuote = 3
	PostgresqlConfig12_BACKSLASH_QUOTE_SAFE_ENCODING PostgresqlConfig12_BackslashQuote = 4
)

var PostgresqlConfig12_BackslashQuote_name = map[int32]string{
	0: "BACKSLASH_QUOTE_UNSPECIFIED",
	1: "BACKSLASH_QUOTE",
	2: "BACKSLASH_QUOTE_ON",
	3: "BACKSLASH_QUOTE_OFF",
	4: "BACKSLASH_QUOTE_SAFE_ENCODING",
}

var PostgresqlConfig12_BackslashQuote_value = map[string]int32{
	"BACKSLASH_QUOTE_UNSPECIFIED":   0,
	"BACKSLASH_QUOTE":               1,
	"BACKSLASH_QUOTE_ON":            2,
	"BACKSLASH_QUOTE_OFF":           3,
	"BACKSLASH_QUOTE_SAFE_ENCODING": 4,
}

func (x PostgresqlConfig12_BackslashQuote) String() string {
	return proto.EnumName(PostgresqlConfig12_BackslashQuote_name, int32(x))
}

func (PostgresqlConfig12_BackslashQuote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 11}
}

type PostgresqlConfig12_PlanCacheMode int32

const (
	PostgresqlConfig12_PLAN_CACHE_MODE_UNSPECIFIED        PostgresqlConfig12_PlanCacheMode = 0
	PostgresqlConfig12_PLAN_CACHE_MODE_AUTO               PostgresqlConfig12_PlanCacheMode = 1
	PostgresqlConfig12_PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN  PostgresqlConfig12_PlanCacheMode = 2
	PostgresqlConfig12_PLAN_CACHE_MODE_FORCE_GENERIC_PLAN PostgresqlConfig12_PlanCacheMode = 3
)

var PostgresqlConfig12_PlanCacheMode_name = map[int32]string{
	0: "PLAN_CACHE_MODE_UNSPECIFIED",
	1: "PLAN_CACHE_MODE_AUTO",
	2: "PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN",
	3: "PLAN_CACHE_MODE_FORCE_GENERIC_PLAN",
}

var PostgresqlConfig12_PlanCacheMode_value = map[string]int32{
	"PLAN_CACHE_MODE_UNSPECIFIED":        0,
	"PLAN_CACHE_MODE_AUTO":               1,
	"PLAN_CACHE_MODE_FORCE_CUSTOM_PLAN":  2,
	"PLAN_CACHE_MODE_FORCE_GENERIC_PLAN": 3,
}

func (x PostgresqlConfig12_PlanCacheMode) String() string {
	return proto.EnumName(PostgresqlConfig12_PlanCacheMode_name, int32(x))
}

func (PostgresqlConfig12_PlanCacheMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 12}
}

type PostgresqlConfig12_PgHintPlanDebugPrint int32

const (
	PostgresqlConfig12_PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED PostgresqlConfig12_PgHintPlanDebugPrint = 0
	PostgresqlConfig12_PG_HINT_PLAN_DEBUG_PRINT_OFF         PostgresqlConfig12_PgHintPlanDebugPrint = 1
	PostgresqlConfig12_PG_HINT_PLAN_DEBUG_PRINT_ON          PostgresqlConfig12_PgHintPlanDebugPrint = 2
	PostgresqlConfig12_PG_HINT_PLAN_DEBUG_PRINT_DETAILED    PostgresqlConfig12_PgHintPlanDebugPrint = 3
	PostgresqlConfig12_PG_HINT_PLAN_DEBUG_PRINT_VERBOSE     PostgresqlConfig12_PgHintPlanDebugPrint = 4
)

var PostgresqlConfig12_PgHintPlanDebugPrint_name = map[int32]string{
	0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED",
	1: "PG_HINT_PLAN_DEBUG_PRINT_OFF",
	2: "PG_HINT_PLAN_DEBUG_PRINT_ON",
	3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED",
	4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE",
}

var PostgresqlConfig12_PgHintPlanDebugPrint_value = map[string]int32{
	"PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED": 0,
	"PG_HINT_PLAN_DEBUG_PRINT_OFF":         1,
	"PG_HINT_PLAN_DEBUG_PRINT_ON":          2,
	"PG_HINT_PLAN_DEBUG_PRINT_DETAILED":    3,
	"PG_HINT_PLAN_DEBUG_PRINT_VERBOSE":     4,
}

func (x PostgresqlConfig12_PgHintPlanDebugPrint) String() string {
	return proto.EnumName(PostgresqlConfig12_PgHintPlanDebugPrint_name, int32(x))
}

func (PostgresqlConfig12_PgHintPlanDebugPrint) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 13}
}

type PostgresqlConfig12_SharedPreloadLibraries int32

const (
	PostgresqlConfig12_SHARED_PRELOAD_LIBRARIES_UNSPECIFIED  PostgresqlConfig12_SharedPreloadLibraries = 0
	PostgresqlConfig12_SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN PostgresqlConfig12_SharedPreloadLibraries = 1
	PostgresqlConfig12_SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN PostgresqlConfig12_SharedPreloadLibraries = 2
)

var PostgresqlConfig12_SharedPreloadLibraries_name = map[int32]string{
	0: "SHARED_PRELOAD_LIBRARIES_UNSPECIFIED",
	1: "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN",
	2: "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
}

var PostgresqlConfig12_SharedPreloadLibraries_value = map[string]int32{
	"SHARED_PRELOAD_LIBRARIES_UNSPECIFIED":  0,
	"SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN": 1,
	"SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN": 2,
}

func (x PostgresqlConfig12_SharedPreloadLibraries) String() string {
	return proto.EnumName(PostgresqlConfig12_SharedPreloadLibraries_name, int32(x))
}

func (PostgresqlConfig12_SharedPreloadLibraries) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0, 14}
}

// Options and structure of `PostgresqlConfig` reflects PostgreSQL configuration file
// parameters which detailed description is available in
// [PostgreSQL documentation](https://www.postgresql.org/docs/11/runtime-config.html).
type PostgresqlConfig12 struct {
	MaxConnections                  *wrappers.Int64Value                        `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	SharedBuffers                   *wrappers.Int64Value                        `protobuf:"bytes,2,opt,name=shared_buffers,json=sharedBuffers,proto3" json:"shared_buffers,omitempty"`
	TempBuffers                     *wrappers.Int64Value                        `protobuf:"bytes,3,opt,name=temp_buffers,json=tempBuffers,proto3" json:"temp_buffers,omitempty"`
	MaxPreparedTransactions         *wrappers.Int64Value                        `protobuf:"bytes,4,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	WorkMem                         *wrappers.Int64Value                        `protobuf:"bytes,5,opt,name=work_mem,json=workMem,proto3" json:"work_mem,omitempty"`
	MaintenanceWorkMem              *wrappers.Int64Value                        `protobuf:"bytes,6,opt,name=maintenance_work_mem,json=maintenanceWorkMem,proto3" json:"maintenance_work_mem,omitempty"`
	AutovacuumWorkMem               *wrappers.Int64Value                        `protobuf:"bytes,7,opt,name=autovacuum_work_mem,json=autovacuumWorkMem,proto3" json:"autovacuum_work_mem,omitempty"`
	TempFileLimit                   *wrappers.Int64Value                        `protobuf:"bytes,8,opt,name=temp_file_limit,json=tempFileLimit,proto3" json:"temp_file_limit,omitempty"`
	VacuumCostDelay                 *wrappers.Int64Value                        `protobuf:"bytes,9,opt,name=vacuum_cost_delay,json=vacuumCostDelay,proto3" json:"vacuum_cost_delay,omitempty"`
	VacuumCostPageHit               *wrappers.Int64Value                        `protobuf:"bytes,10,opt,name=vacuum_cost_page_hit,json=vacuumCostPageHit,proto3" json:"vacuum_cost_page_hit,omitempty"`
	VacuumCostPageMiss              *wrappers.Int64Value                        `protobuf:"bytes,11,opt,name=vacuum_cost_page_miss,json=vacuumCostPageMiss,proto3" json:"vacuum_cost_page_miss,omitempty"`
	VacuumCostPageDirty             *wrappers.Int64Value                        `protobuf:"bytes,12,opt,name=vacuum_cost_page_dirty,json=vacuumCostPageDirty,proto3" json:"vacuum_cost_page_dirty,omitempty"`
	VacuumCostLimit                 *wrappers.Int64Value                        `protobuf:"bytes,13,opt,name=vacuum_cost_limit,json=vacuumCostLimit,proto3" json:"vacuum_cost_limit,omitempty"`
	BgwriterDelay                   *wrappers.Int64Value                        `protobuf:"bytes,14,opt,name=bgwriter_delay,json=bgwriterDelay,proto3" json:"bgwriter_delay,omitempty"`
	BgwriterLruMaxpages             *wrappers.Int64Value                        `protobuf:"bytes,15,opt,name=bgwriter_lru_maxpages,json=bgwriterLruMaxpages,proto3" json:"bgwriter_lru_maxpages,omitempty"`
	BgwriterLruMultiplier           *wrappers.DoubleValue                       `protobuf:"bytes,16,opt,name=bgwriter_lru_multiplier,json=bgwriterLruMultiplier,proto3" json:"bgwriter_lru_multiplier,omitempty"`
	BgwriterFlushAfter              *wrappers.Int64Value                        `protobuf:"bytes,17,opt,name=bgwriter_flush_after,json=bgwriterFlushAfter,proto3" json:"bgwriter_flush_after,omitempty"`
	BackendFlushAfter               *wrappers.Int64Value                        `protobuf:"bytes,18,opt,name=backend_flush_after,json=backendFlushAfter,proto3" json:"backend_flush_after,omitempty"`
	OldSnapshotThreshold            *wrappers.Int64Value                        `protobuf:"bytes,19,opt,name=old_snapshot_threshold,json=oldSnapshotThreshold,proto3" json:"old_snapshot_threshold,omitempty"`
	WalLevel                        PostgresqlConfig12_WalLevel                 `protobuf:"varint,20,opt,name=wal_level,json=walLevel,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_WalLevel" json:"wal_level,omitempty"`
	SynchronousCommit               PostgresqlConfig12_SynchronousCommit        `protobuf:"varint,21,opt,name=synchronous_commit,json=synchronousCommit,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_SynchronousCommit" json:"synchronous_commit,omitempty"`
	CheckpointTimeout               *wrappers.Int64Value                        `protobuf:"bytes,22,opt,name=checkpoint_timeout,json=checkpointTimeout,proto3" json:"checkpoint_timeout,omitempty"`
	CheckpointCompletionTarget      *wrappers.DoubleValue                       `protobuf:"bytes,23,opt,name=checkpoint_completion_target,json=checkpointCompletionTarget,proto3" json:"checkpoint_completion_target,omitempty"`
	CheckpointFlushAfter            *wrappers.Int64Value                        `protobuf:"bytes,24,opt,name=checkpoint_flush_after,json=checkpointFlushAfter,proto3" json:"checkpoint_flush_after,omitempty"`
	MaxWalSize                      *wrappers.Int64Value                        `protobuf:"bytes,25,opt,name=max_wal_size,json=maxWalSize,proto3" json:"max_wal_size,omitempty"`
	MinWalSize                      *wrappers.Int64Value                        `protobuf:"bytes,26,opt,name=min_wal_size,json=minWalSize,proto3" json:"min_wal_size,omitempty"`
	MaxStandbyStreamingDelay        *wrappers.Int64Value                        `protobuf:"bytes,27,opt,name=max_standby_streaming_delay,json=maxStandbyStreamingDelay,proto3" json:"max_standby_streaming_delay,omitempty"`
	DefaultStatisticsTarget         *wrappers.Int64Value                        `protobuf:"bytes,28,opt,name=default_statistics_target,json=defaultStatisticsTarget,proto3" json:"default_statistics_target,omitempty"`
	ConstraintExclusion             PostgresqlConfig12_ConstraintExclusion      `protobuf:"varint,29,opt,name=constraint_exclusion,json=constraintExclusion,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_ConstraintExclusion" json:"constraint_exclusion,omitempty"`
	CursorTupleFraction             *wrappers.DoubleValue                       `protobuf:"bytes,30,opt,name=cursor_tuple_fraction,json=cursorTupleFraction,proto3" json:"cursor_tuple_fraction,omitempty"`
	FromCollapseLimit               *wrappers.Int64Value                        `protobuf:"bytes,31,opt,name=from_collapse_limit,json=fromCollapseLimit,proto3" json:"from_collapse_limit,omitempty"`
	JoinCollapseLimit               *wrappers.Int64Value                        `protobuf:"bytes,32,opt,name=join_collapse_limit,json=joinCollapseLimit,proto3" json:"join_collapse_limit,omitempty"`
	ForceParallelMode               PostgresqlConfig12_ForceParallelMode        `protobuf:"varint,33,opt,name=force_parallel_mode,json=forceParallelMode,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_ForceParallelMode" json:"force_parallel_mode,omitempty"`
	ClientMinMessages               PostgresqlConfig12_LogLevel                 `protobuf:"varint,34,opt,name=client_min_messages,json=clientMinMessages,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogLevel" json:"client_min_messages,omitempty"`
	LogMinMessages                  PostgresqlConfig12_LogLevel                 `protobuf:"varint,35,opt,name=log_min_messages,json=logMinMessages,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogLevel" json:"log_min_messages,omitempty"`
	LogMinErrorStatement            PostgresqlConfig12_LogLevel                 `protobuf:"varint,36,opt,name=log_min_error_statement,json=logMinErrorStatement,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogLevel" json:"log_min_error_statement,omitempty"`
	LogMinDurationStatement         *wrappers.Int64Value                        `protobuf:"bytes,37,opt,name=log_min_duration_statement,json=logMinDurationStatement,proto3" json:"log_min_duration_statement,omitempty"`
	LogCheckpoints                  *wrappers.BoolValue                         `protobuf:"bytes,38,opt,name=log_checkpoints,json=logCheckpoints,proto3" json:"log_checkpoints,omitempty"`
	LogConnections                  *wrappers.BoolValue                         `protobuf:"bytes,39,opt,name=log_connections,json=logConnections,proto3" json:"log_connections,omitempty"`
	LogDisconnections               *wrappers.BoolValue                         `protobuf:"bytes,40,opt,name=log_disconnections,json=logDisconnections,proto3" json:"log_disconnections,omitempty"`
	LogDuration                     *wrappers.BoolValue                         `protobuf:"bytes,41,opt,name=log_duration,json=logDuration,proto3" json:"log_duration,omitempty"`
	LogErrorVerbosity               PostgresqlConfig12_LogErrorVerbosity        `protobuf:"varint,42,opt,name=log_error_verbosity,json=logErrorVerbosity,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogErrorVerbosity" json:"log_error_verbosity,omitempty"`
	LogLockWaits                    *wrappers.BoolValue                         `protobuf:"bytes,43,opt,name=log_lock_waits,json=logLockWaits,proto3" json:"log_lock_waits,omitempty"`
	LogStatement                    PostgresqlConfig12_LogStatement             `protobuf:"varint,44,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogStatement" json:"log_statement,omitempty"`
	LogTempFiles                    *wrappers.Int64Value                        `protobuf:"bytes,45,opt,name=log_temp_files,json=logTempFiles,proto3" json:"log_temp_files,omitempty"`
	SearchPath                      string                                      `protobuf:"bytes,46,opt,name=search_path,json=searchPath,proto3" json:"search_path,omitempty"`
	RowSecurity                     *wrappers.BoolValue                         `protobuf:"bytes,47,opt,name=row_security,json=rowSecurity,proto3" json:"row_security,omitempty"`
	DefaultTransactionIsolation     PostgresqlConfig12_TransactionIsolation     `protobuf:"varint,48,opt,name=default_transaction_isolation,json=defaultTransactionIsolation,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_TransactionIsolation" json:"default_transaction_isolation,omitempty"`
	StatementTimeout                *wrappers.Int64Value                        `protobuf:"bytes,49,opt,name=statement_timeout,json=statementTimeout,proto3" json:"statement_timeout,omitempty"`
	LockTimeout                     *wrappers.Int64Value                        `protobuf:"bytes,50,opt,name=lock_timeout,json=lockTimeout,proto3" json:"lock_timeout,omitempty"`
	IdleInTransactionSessionTimeout *wrappers.Int64Value                        `protobuf:"bytes,51,opt,name=idle_in_transaction_session_timeout,json=idleInTransactionSessionTimeout,proto3" json:"idle_in_transaction_session_timeout,omitempty"`
	ByteaOutput                     PostgresqlConfig12_ByteaOutput              `protobuf:"varint,52,opt,name=bytea_output,json=byteaOutput,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_ByteaOutput" json:"bytea_output,omitempty"`
	Xmlbinary                       PostgresqlConfig12_XmlBinary                `protobuf:"varint,53,opt,name=xmlbinary,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_XmlBinary" json:"xmlbinary,omitempty"`
	Xmloption                       PostgresqlConfig12_XmlOption                `protobuf:"varint,54,opt,name=xmloption,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_XmlOption" json:"xmloption,omitempty"`
	GinPendingListLimit             *wrappers.Int64Value                        `protobuf:"bytes,55,opt,name=gin_pending_list_limit,json=ginPendingListLimit,proto3" json:"gin_pending_list_limit,omitempty"`
	DeadlockTimeout                 *wrappers.Int64Value                        `protobuf:"bytes,56,opt,name=deadlock_timeout,json=deadlockTimeout,proto3" json:"deadlock_timeout,omitempty"`
	MaxLocksPerTransaction          *wrappers.Int64Value                        `protobuf:"bytes,57,opt,name=max_locks_per_transaction,json=maxLocksPerTransaction,proto3" json:"max_locks_per_transaction,omitempty"`
	MaxPredLocksPerTransaction      *wrappers.Int64Value                        `protobuf:"bytes,58,opt,name=max_pred_locks_per_transaction,json=maxPredLocksPerTransaction,proto3" json:"max_pred_locks_per_transaction,omitempty"`
	ArrayNulls                      *wrappers.BoolValue                         `protobuf:"bytes,59,opt,name=array_nulls,json=arrayNulls,proto3" json:"array_nulls,omitempty"`
	BackslashQuote                  PostgresqlConfig12_BackslashQuote           `protobuf:"varint,60,opt,name=backslash_quote,json=backslashQuote,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_BackslashQuote" json:"backslash_quote,omitempty"`
	DefaultWithOids                 *wrappers.BoolValue                         `protobuf:"bytes,61,opt,name=default_with_oids,json=defaultWithOids,proto3" json:"default_with_oids,omitempty"`
	EscapeStringWarning             *wrappers.BoolValue                         `protobuf:"bytes,62,opt,name=escape_string_warning,json=escapeStringWarning,proto3" json:"escape_string_warning,omitempty"`
	LoCompatPrivileges              *wrappers.BoolValue                         `protobuf:"bytes,63,opt,name=lo_compat_privileges,json=loCompatPrivileges,proto3" json:"lo_compat_privileges,omitempty"`
	OperatorPrecedenceWarning       *wrappers.BoolValue                         `protobuf:"bytes,64,opt,name=operator_precedence_warning,json=operatorPrecedenceWarning,proto3" json:"operator_precedence_warning,omitempty"`
	QuoteAllIdentifiers             *wrappers.BoolValue                         `protobuf:"bytes,65,opt,name=quote_all_identifiers,json=quoteAllIdentifiers,proto3" json:"quote_all_identifiers,omitempty"`
	StandardConformingStrings       *wrappers.BoolValue                         `protobuf:"bytes,66,opt,name=standard_conforming_strings,json=standardConformingStrings,proto3" json:"standard_conforming_strings,omitempty"`
	SynchronizeSeqscans             *wrappers.BoolValue                         `protobuf:"bytes,67,opt,name=synchronize_seqscans,json=synchronizeSeqscans,proto3" json:"synchronize_seqscans,omitempty"`
	TransformNullEquals             *wrappers.BoolValue                         `protobuf:"bytes,68,opt,name=transform_null_equals,json=transformNullEquals,proto3" json:"transform_null_equals,omitempty"`
	ExitOnError                     *wrappers.BoolValue                         `protobuf:"bytes,69,opt,name=exit_on_error,json=exitOnError,proto3" json:"exit_on_error,omitempty"`
	SeqPageCost                     *wrappers.DoubleValue                       `protobuf:"bytes,70,opt,name=seq_page_cost,json=seqPageCost,proto3" json:"seq_page_cost,omitempty"`
	RandomPageCost                  *wrappers.DoubleValue                       `protobuf:"bytes,71,opt,name=random_page_cost,json=randomPageCost,proto3" json:"random_page_cost,omitempty"`
	AutovacuumMaxWorkers            *wrappers.Int64Value                        `protobuf:"bytes,72,opt,name=autovacuum_max_workers,json=autovacuumMaxWorkers,proto3" json:"autovacuum_max_workers,omitempty"`
	AutovacuumVacuumCostDelay       *wrappers.Int64Value                        `protobuf:"bytes,73,opt,name=autovacuum_vacuum_cost_delay,json=autovacuumVacuumCostDelay,proto3" json:"autovacuum_vacuum_cost_delay,omitempty"`
	AutovacuumVacuumCostLimit       *wrappers.Int64Value                        `protobuf:"bytes,74,opt,name=autovacuum_vacuum_cost_limit,json=autovacuumVacuumCostLimit,proto3" json:"autovacuum_vacuum_cost_limit,omitempty"`
	AutovacuumNaptime               *wrappers.Int64Value                        `protobuf:"bytes,75,opt,name=autovacuum_naptime,json=autovacuumNaptime,proto3" json:"autovacuum_naptime,omitempty"`
	ArchiveTimeout                  *wrappers.Int64Value                        `protobuf:"bytes,76,opt,name=archive_timeout,json=archiveTimeout,proto3" json:"archive_timeout,omitempty"`
	TrackActivityQuerySize          *wrappers.Int64Value                        `protobuf:"bytes,77,opt,name=track_activity_query_size,json=trackActivityQuerySize,proto3" json:"track_activity_query_size,omitempty"`
	EnableBitmapscan                *wrappers.BoolValue                         `protobuf:"bytes,80,opt,name=enable_bitmapscan,json=enableBitmapscan,proto3" json:"enable_bitmapscan,omitempty"`
	EnableHashagg                   *wrappers.BoolValue                         `protobuf:"bytes,81,opt,name=enable_hashagg,json=enableHashagg,proto3" json:"enable_hashagg,omitempty"`
	EnableHashjoin                  *wrappers.BoolValue                         `protobuf:"bytes,82,opt,name=enable_hashjoin,json=enableHashjoin,proto3" json:"enable_hashjoin,omitempty"`
	EnableIndexscan                 *wrappers.BoolValue                         `protobuf:"bytes,83,opt,name=enable_indexscan,json=enableIndexscan,proto3" json:"enable_indexscan,omitempty"`
	EnableIndexonlyscan             *wrappers.BoolValue                         `protobuf:"bytes,84,opt,name=enable_indexonlyscan,json=enableIndexonlyscan,proto3" json:"enable_indexonlyscan,omitempty"`
	EnableMaterial                  *wrappers.BoolValue                         `protobuf:"bytes,85,opt,name=enable_material,json=enableMaterial,proto3" json:"enable_material,omitempty"`
	EnableMergejoin                 *wrappers.BoolValue                         `protobuf:"bytes,86,opt,name=enable_mergejoin,json=enableMergejoin,proto3" json:"enable_mergejoin,omitempty"`
	EnableNestloop                  *wrappers.BoolValue                         `protobuf:"bytes,87,opt,name=enable_nestloop,json=enableNestloop,proto3" json:"enable_nestloop,omitempty"`
	EnableSeqscan                   *wrappers.BoolValue                         `protobuf:"bytes,88,opt,name=enable_seqscan,json=enableSeqscan,proto3" json:"enable_seqscan,omitempty"`
	EnableSort                      *wrappers.BoolValue                         `protobuf:"bytes,89,opt,name=enable_sort,json=enableSort,proto3" json:"enable_sort,omitempty"`
	EnableTidscan                   *wrappers.BoolValue                         `protobuf:"bytes,90,opt,name=enable_tidscan,json=enableTidscan,proto3" json:"enable_tidscan,omitempty"`
	MaxWorkerProcesses              *wrappers.Int64Value                        `protobuf:"bytes,91,opt,name=max_worker_processes,json=maxWorkerProcesses,proto3" json:"max_worker_processes,omitempty"`
	MaxParallelWorkers              *wrappers.Int64Value                        `protobuf:"bytes,92,opt,name=max_parallel_workers,json=maxParallelWorkers,proto3" json:"max_parallel_workers,omitempty"`
	MaxParallelWorkersPerGather     *wrappers.Int64Value                        `protobuf:"bytes,93,opt,name=max_parallel_workers_per_gather,json=maxParallelWorkersPerGather,proto3" json:"max_parallel_workers_per_gather,omitempty"`
	AutovacuumVacuumScaleFactor     *wrappers.DoubleValue                       `protobuf:"bytes,94,opt,name=autovacuum_vacuum_scale_factor,json=autovacuumVacuumScaleFactor,proto3" json:"autovacuum_vacuum_scale_factor,omitempty"`
	AutovacuumAnalyzeScaleFactor    *wrappers.DoubleValue                       `protobuf:"bytes,95,opt,name=autovacuum_analyze_scale_factor,json=autovacuumAnalyzeScaleFactor,proto3" json:"autovacuum_analyze_scale_factor,omitempty"`
	DefaultTransactionReadOnly      *wrappers.BoolValue                         `protobuf:"bytes,96,opt,name=default_transaction_read_only,json=defaultTransactionReadOnly,proto3" json:"default_transaction_read_only,omitempty"`
	Timezone                        string                                      `protobuf:"bytes,97,opt,name=timezone,proto3" json:"timezone,omitempty"`
	EnableParallelAppend            *wrappers.BoolValue                         `protobuf:"bytes,98,opt,name=enable_parallel_append,json=enableParallelAppend,proto3" json:"enable_parallel_append,omitempty"`
	EnableParallelHash              *wrappers.BoolValue                         `protobuf:"bytes,99,opt,name=enable_parallel_hash,json=enableParallelHash,proto3" json:"enable_parallel_hash,omitempty"`
	EnablePartitionPruning          *wrappers.BoolValue                         `protobuf:"bytes,100,opt,name=enable_partition_pruning,json=enablePartitionPruning,proto3" json:"enable_partition_pruning,omitempty"`
	EnablePartitionwiseAggregate    *wrappers.BoolValue                         `protobuf:"bytes,101,opt,name=enable_partitionwise_aggregate,json=enablePartitionwiseAggregate,proto3" json:"enable_partitionwise_aggregate,omitempty"`
	EnablePartitionwiseJoin         *wrappers.BoolValue                         `protobuf:"bytes,102,opt,name=enable_partitionwise_join,json=enablePartitionwiseJoin,proto3" json:"enable_partitionwise_join,omitempty"`
	Jit                             *wrappers.BoolValue                         `protobuf:"bytes,103,opt,name=jit,proto3" json:"jit,omitempty"`
	MaxParallelMaintenanceWorkers   *wrappers.Int64Value                        `protobuf:"bytes,104,opt,name=max_parallel_maintenance_workers,json=maxParallelMaintenanceWorkers,proto3" json:"max_parallel_maintenance_workers,omitempty"`
	ParallelLeaderParticipation     *wrappers.BoolValue                         `protobuf:"bytes,105,opt,name=parallel_leader_participation,json=parallelLeaderParticipation,proto3" json:"parallel_leader_participation,omitempty"`
	VacuumCleanupIndexScaleFactor   *wrappers.DoubleValue                       `protobuf:"bytes,106,opt,name=vacuum_cleanup_index_scale_factor,json=vacuumCleanupIndexScaleFactor,proto3" json:"vacuum_cleanup_index_scale_factor,omitempty"`
	LogTransactionSampleRate        *wrappers.DoubleValue                       `protobuf:"bytes,107,opt,name=log_transaction_sample_rate,json=logTransactionSampleRate,proto3" json:"log_transaction_sample_rate,omitempty"`
	PlanCacheMode                   PostgresqlConfig12_PlanCacheMode            `protobuf:"varint,108,opt,name=plan_cache_mode,json=planCacheMode,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_PlanCacheMode" json:"plan_cache_mode,omitempty"`
	EffectiveIoConcurrency          *wrappers.Int64Value                        `protobuf:"bytes,109,opt,name=effective_io_concurrency,json=effectiveIoConcurrency,proto3" json:"effective_io_concurrency,omitempty"`
	EffectiveCacheSize              *wrappers.Int64Value                        `protobuf:"bytes,110,opt,name=effective_cache_size,json=effectiveCacheSize,proto3" json:"effective_cache_size,omitempty"`
	SharedPreloadLibraries          []PostgresqlConfig12_SharedPreloadLibraries `protobuf:"varint,111,rep,packed,name=shared_preload_libraries,json=sharedPreloadLibraries,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_SharedPreloadLibraries" json:"shared_preload_libraries,omitempty"`
	AutoExplainLogMinDuration       *wrappers.Int64Value                        `protobuf:"bytes,112,opt,name=auto_explain_log_min_duration,json=autoExplainLogMinDuration,proto3" json:"auto_explain_log_min_duration,omitempty"`
	AutoExplainLogAnalyze           *wrappers.BoolValue                         `protobuf:"bytes,113,opt,name=auto_explain_log_analyze,json=autoExplainLogAnalyze,proto3" json:"auto_explain_log_analyze,omitempty"`
	AutoExplainLogBuffers           *wrappers.BoolValue                         `protobuf:"bytes,114,opt,name=auto_explain_log_buffers,json=autoExplainLogBuffers,proto3" json:"auto_explain_log_buffers,omitempty"`
	AutoExplainLogTiming            *wrappers.BoolValue                         `protobuf:"bytes,115,opt,name=auto_explain_log_timing,json=autoExplainLogTiming,proto3" json:"auto_explain_log_timing,omitempty"`
	AutoExplainLogTriggers          *wrappers.BoolValue                         `protobuf:"bytes,116,opt,name=auto_explain_log_triggers,json=autoExplainLogTriggers,proto3" json:"auto_explain_log_triggers,omitempty"`
	AutoExplainLogVerbose           *wrappers.BoolValue                         `protobuf:"bytes,117,opt,name=auto_explain_log_verbose,json=autoExplainLogVerbose,proto3" json:"auto_explain_log_verbose,omitempty"`
	AutoExplainLogNestedStatements  *wrappers.BoolValue                         `protobuf:"bytes,118,opt,name=auto_explain_log_nested_statements,json=autoExplainLogNestedStatements,proto3" json:"auto_explain_log_nested_statements,omitempty"`
	AutoExplainSampleRate           *wrappers.DoubleValue                       `protobuf:"bytes,119,opt,name=auto_explain_sample_rate,json=autoExplainSampleRate,proto3" json:"auto_explain_sample_rate,omitempty"`
	PgHintPlanEnableHint            *wrappers.BoolValue                         `protobuf:"bytes,120,opt,name=pg_hint_plan_enable_hint,json=pgHintPlanEnableHint,proto3" json:"pg_hint_plan_enable_hint,omitempty"`
	PgHintPlanEnableHintTable       *wrappers.BoolValue                         `protobuf:"bytes,121,opt,name=pg_hint_plan_enable_hint_table,json=pgHintPlanEnableHintTable,proto3" json:"pg_hint_plan_enable_hint_table,omitempty"`
	PgHintPlanDebugPrint            PostgresqlConfig12_PgHintPlanDebugPrint     `protobuf:"varint,122,opt,name=pg_hint_plan_debug_print,json=pgHintPlanDebugPrint,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_PgHintPlanDebugPrint" json:"pg_hint_plan_debug_print,omitempty"`
	PgHintPlanMessageLevel          PostgresqlConfig12_LogLevel                 `protobuf:"varint,123,opt,name=pg_hint_plan_message_level,json=pgHintPlanMessageLevel,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogLevel" json:"pg_hint_plan_message_level,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}                                    `json:"-"`
	XXX_unrecognized                []byte                                      `json:"-"`
	XXX_sizecache                   int32                                       `json:"-"`
}

func (m *PostgresqlConfig12) Reset()         { *m = PostgresqlConfig12{} }
func (m *PostgresqlConfig12) String() string { return proto.CompactTextString(m) }
func (*PostgresqlConfig12) ProtoMessage()    {}
func (*PostgresqlConfig12) Descriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{0}
}

func (m *PostgresqlConfig12) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostgresqlConfig12.Unmarshal(m, b)
}
func (m *PostgresqlConfig12) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostgresqlConfig12.Marshal(b, m, deterministic)
}
func (m *PostgresqlConfig12) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresqlConfig12.Merge(m, src)
}
func (m *PostgresqlConfig12) XXX_Size() int {
	return xxx_messageInfo_PostgresqlConfig12.Size(m)
}
func (m *PostgresqlConfig12) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresqlConfig12.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresqlConfig12 proto.InternalMessageInfo

func (m *PostgresqlConfig12) GetMaxConnections() *wrappers.Int64Value {
	if m != nil {
		return m.MaxConnections
	}
	return nil
}

func (m *PostgresqlConfig12) GetSharedBuffers() *wrappers.Int64Value {
	if m != nil {
		return m.SharedBuffers
	}
	return nil
}

func (m *PostgresqlConfig12) GetTempBuffers() *wrappers.Int64Value {
	if m != nil {
		return m.TempBuffers
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxPreparedTransactions() *wrappers.Int64Value {
	if m != nil {
		return m.MaxPreparedTransactions
	}
	return nil
}

func (m *PostgresqlConfig12) GetWorkMem() *wrappers.Int64Value {
	if m != nil {
		return m.WorkMem
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaintenanceWorkMem() *wrappers.Int64Value {
	if m != nil {
		return m.MaintenanceWorkMem
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutovacuumWorkMem() *wrappers.Int64Value {
	if m != nil {
		return m.AutovacuumWorkMem
	}
	return nil
}

func (m *PostgresqlConfig12) GetTempFileLimit() *wrappers.Int64Value {
	if m != nil {
		return m.TempFileLimit
	}
	return nil
}

func (m *PostgresqlConfig12) GetVacuumCostDelay() *wrappers.Int64Value {
	if m != nil {
		return m.VacuumCostDelay
	}
	return nil
}

func (m *PostgresqlConfig12) GetVacuumCostPageHit() *wrappers.Int64Value {
	if m != nil {
		return m.VacuumCostPageHit
	}
	return nil
}

func (m *PostgresqlConfig12) GetVacuumCostPageMiss() *wrappers.Int64Value {
	if m != nil {
		return m.VacuumCostPageMiss
	}
	return nil
}

func (m *PostgresqlConfig12) GetVacuumCostPageDirty() *wrappers.Int64Value {
	if m != nil {
		return m.VacuumCostPageDirty
	}
	return nil
}

func (m *PostgresqlConfig12) GetVacuumCostLimit() *wrappers.Int64Value {
	if m != nil {
		return m.VacuumCostLimit
	}
	return nil
}

func (m *PostgresqlConfig12) GetBgwriterDelay() *wrappers.Int64Value {
	if m != nil {
		return m.BgwriterDelay
	}
	return nil
}

func (m *PostgresqlConfig12) GetBgwriterLruMaxpages() *wrappers.Int64Value {
	if m != nil {
		return m.BgwriterLruMaxpages
	}
	return nil
}

func (m *PostgresqlConfig12) GetBgwriterLruMultiplier() *wrappers.DoubleValue {
	if m != nil {
		return m.BgwriterLruMultiplier
	}
	return nil
}

func (m *PostgresqlConfig12) GetBgwriterFlushAfter() *wrappers.Int64Value {
	if m != nil {
		return m.BgwriterFlushAfter
	}
	return nil
}

func (m *PostgresqlConfig12) GetBackendFlushAfter() *wrappers.Int64Value {
	if m != nil {
		return m.BackendFlushAfter
	}
	return nil
}

func (m *PostgresqlConfig12) GetOldSnapshotThreshold() *wrappers.Int64Value {
	if m != nil {
		return m.OldSnapshotThreshold
	}
	return nil
}

func (m *PostgresqlConfig12) GetWalLevel() PostgresqlConfig12_WalLevel {
	if m != nil {
		return m.WalLevel
	}
	return PostgresqlConfig12_WAL_LEVEL_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetSynchronousCommit() PostgresqlConfig12_SynchronousCommit {
	if m != nil {
		return m.SynchronousCommit
	}
	return PostgresqlConfig12_SYNCHRONOUS_COMMIT_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetCheckpointTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.CheckpointTimeout
	}
	return nil
}

func (m *PostgresqlConfig12) GetCheckpointCompletionTarget() *wrappers.DoubleValue {
	if m != nil {
		return m.CheckpointCompletionTarget
	}
	return nil
}

func (m *PostgresqlConfig12) GetCheckpointFlushAfter() *wrappers.Int64Value {
	if m != nil {
		return m.CheckpointFlushAfter
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxWalSize() *wrappers.Int64Value {
	if m != nil {
		return m.MaxWalSize
	}
	return nil
}

func (m *PostgresqlConfig12) GetMinWalSize() *wrappers.Int64Value {
	if m != nil {
		return m.MinWalSize
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxStandbyStreamingDelay() *wrappers.Int64Value {
	if m != nil {
		return m.MaxStandbyStreamingDelay
	}
	return nil
}

func (m *PostgresqlConfig12) GetDefaultStatisticsTarget() *wrappers.Int64Value {
	if m != nil {
		return m.DefaultStatisticsTarget
	}
	return nil
}

func (m *PostgresqlConfig12) GetConstraintExclusion() PostgresqlConfig12_ConstraintExclusion {
	if m != nil {
		return m.ConstraintExclusion
	}
	return PostgresqlConfig12_CONSTRAINT_EXCLUSION_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetCursorTupleFraction() *wrappers.DoubleValue {
	if m != nil {
		return m.CursorTupleFraction
	}
	return nil
}

func (m *PostgresqlConfig12) GetFromCollapseLimit() *wrappers.Int64Value {
	if m != nil {
		return m.FromCollapseLimit
	}
	return nil
}

func (m *PostgresqlConfig12) GetJoinCollapseLimit() *wrappers.Int64Value {
	if m != nil {
		return m.JoinCollapseLimit
	}
	return nil
}

func (m *PostgresqlConfig12) GetForceParallelMode() PostgresqlConfig12_ForceParallelMode {
	if m != nil {
		return m.ForceParallelMode
	}
	return PostgresqlConfig12_FORCE_PARALLEL_MODE_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetClientMinMessages() PostgresqlConfig12_LogLevel {
	if m != nil {
		return m.ClientMinMessages
	}
	return PostgresqlConfig12_LOG_LEVEL_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetLogMinMessages() PostgresqlConfig12_LogLevel {
	if m != nil {
		return m.LogMinMessages
	}
	return PostgresqlConfig12_LOG_LEVEL_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetLogMinErrorStatement() PostgresqlConfig12_LogLevel {
	if m != nil {
		return m.LogMinErrorStatement
	}
	return PostgresqlConfig12_LOG_LEVEL_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetLogMinDurationStatement() *wrappers.Int64Value {
	if m != nil {
		return m.LogMinDurationStatement
	}
	return nil
}

func (m *PostgresqlConfig12) GetLogCheckpoints() *wrappers.BoolValue {
	if m != nil {
		return m.LogCheckpoints
	}
	return nil
}

func (m *PostgresqlConfig12) GetLogConnections() *wrappers.BoolValue {
	if m != nil {
		return m.LogConnections
	}
	return nil
}

func (m *PostgresqlConfig12) GetLogDisconnections() *wrappers.BoolValue {
	if m != nil {
		return m.LogDisconnections
	}
	return nil
}

func (m *PostgresqlConfig12) GetLogDuration() *wrappers.BoolValue {
	if m != nil {
		return m.LogDuration
	}
	return nil
}

func (m *PostgresqlConfig12) GetLogErrorVerbosity() PostgresqlConfig12_LogErrorVerbosity {
	if m != nil {
		return m.LogErrorVerbosity
	}
	return PostgresqlConfig12_LOG_ERROR_VERBOSITY_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetLogLockWaits() *wrappers.BoolValue {
	if m != nil {
		return m.LogLockWaits
	}
	return nil
}

func (m *PostgresqlConfig12) GetLogStatement() PostgresqlConfig12_LogStatement {
	if m != nil {
		return m.LogStatement
	}
	return PostgresqlConfig12_LOG_STATEMENT_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetLogTempFiles() *wrappers.Int64Value {
	if m != nil {
		return m.LogTempFiles
	}
	return nil
}

func (m *PostgresqlConfig12) GetSearchPath() string {
	if m != nil {
		return m.SearchPath
	}
	return ""
}

func (m *PostgresqlConfig12) GetRowSecurity() *wrappers.BoolValue {
	if m != nil {
		return m.RowSecurity
	}
	return nil
}

func (m *PostgresqlConfig12) GetDefaultTransactionIsolation() PostgresqlConfig12_TransactionIsolation {
	if m != nil {
		return m.DefaultTransactionIsolation
	}
	return PostgresqlConfig12_TRANSACTION_ISOLATION_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetStatementTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.StatementTimeout
	}
	return nil
}

func (m *PostgresqlConfig12) GetLockTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.LockTimeout
	}
	return nil
}

func (m *PostgresqlConfig12) GetIdleInTransactionSessionTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.IdleInTransactionSessionTimeout
	}
	return nil
}

func (m *PostgresqlConfig12) GetByteaOutput() PostgresqlConfig12_ByteaOutput {
	if m != nil {
		return m.ByteaOutput
	}
	return PostgresqlConfig12_BYTEA_OUTPUT_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetXmlbinary() PostgresqlConfig12_XmlBinary {
	if m != nil {
		return m.Xmlbinary
	}
	return PostgresqlConfig12_XML_BINARY_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetXmloption() PostgresqlConfig12_XmlOption {
	if m != nil {
		return m.Xmloption
	}
	return PostgresqlConfig12_XML_OPTION_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetGinPendingListLimit() *wrappers.Int64Value {
	if m != nil {
		return m.GinPendingListLimit
	}
	return nil
}

func (m *PostgresqlConfig12) GetDeadlockTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.DeadlockTimeout
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxLocksPerTransaction() *wrappers.Int64Value {
	if m != nil {
		return m.MaxLocksPerTransaction
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxPredLocksPerTransaction() *wrappers.Int64Value {
	if m != nil {
		return m.MaxPredLocksPerTransaction
	}
	return nil
}

func (m *PostgresqlConfig12) GetArrayNulls() *wrappers.BoolValue {
	if m != nil {
		return m.ArrayNulls
	}
	return nil
}

func (m *PostgresqlConfig12) GetBackslashQuote() PostgresqlConfig12_BackslashQuote {
	if m != nil {
		return m.BackslashQuote
	}
	return PostgresqlConfig12_BACKSLASH_QUOTE_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetDefaultWithOids() *wrappers.BoolValue {
	if m != nil {
		return m.DefaultWithOids
	}
	return nil
}

func (m *PostgresqlConfig12) GetEscapeStringWarning() *wrappers.BoolValue {
	if m != nil {
		return m.EscapeStringWarning
	}
	return nil
}

func (m *PostgresqlConfig12) GetLoCompatPrivileges() *wrappers.BoolValue {
	if m != nil {
		return m.LoCompatPrivileges
	}
	return nil
}

func (m *PostgresqlConfig12) GetOperatorPrecedenceWarning() *wrappers.BoolValue {
	if m != nil {
		return m.OperatorPrecedenceWarning
	}
	return nil
}

func (m *PostgresqlConfig12) GetQuoteAllIdentifiers() *wrappers.BoolValue {
	if m != nil {
		return m.QuoteAllIdentifiers
	}
	return nil
}

func (m *PostgresqlConfig12) GetStandardConformingStrings() *wrappers.BoolValue {
	if m != nil {
		return m.StandardConformingStrings
	}
	return nil
}

func (m *PostgresqlConfig12) GetSynchronizeSeqscans() *wrappers.BoolValue {
	if m != nil {
		return m.SynchronizeSeqscans
	}
	return nil
}

func (m *PostgresqlConfig12) GetTransformNullEquals() *wrappers.BoolValue {
	if m != nil {
		return m.TransformNullEquals
	}
	return nil
}

func (m *PostgresqlConfig12) GetExitOnError() *wrappers.BoolValue {
	if m != nil {
		return m.ExitOnError
	}
	return nil
}

func (m *PostgresqlConfig12) GetSeqPageCost() *wrappers.DoubleValue {
	if m != nil {
		return m.SeqPageCost
	}
	return nil
}

func (m *PostgresqlConfig12) GetRandomPageCost() *wrappers.DoubleValue {
	if m != nil {
		return m.RandomPageCost
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutovacuumMaxWorkers() *wrappers.Int64Value {
	if m != nil {
		return m.AutovacuumMaxWorkers
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutovacuumVacuumCostDelay() *wrappers.Int64Value {
	if m != nil {
		return m.AutovacuumVacuumCostDelay
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutovacuumVacuumCostLimit() *wrappers.Int64Value {
	if m != nil {
		return m.AutovacuumVacuumCostLimit
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutovacuumNaptime() *wrappers.Int64Value {
	if m != nil {
		return m.AutovacuumNaptime
	}
	return nil
}

func (m *PostgresqlConfig12) GetArchiveTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.ArchiveTimeout
	}
	return nil
}

func (m *PostgresqlConfig12) GetTrackActivityQuerySize() *wrappers.Int64Value {
	if m != nil {
		return m.TrackActivityQuerySize
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableBitmapscan() *wrappers.BoolValue {
	if m != nil {
		return m.EnableBitmapscan
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableHashagg() *wrappers.BoolValue {
	if m != nil {
		return m.EnableHashagg
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableHashjoin() *wrappers.BoolValue {
	if m != nil {
		return m.EnableHashjoin
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableIndexscan() *wrappers.BoolValue {
	if m != nil {
		return m.EnableIndexscan
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableIndexonlyscan() *wrappers.BoolValue {
	if m != nil {
		return m.EnableIndexonlyscan
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableMaterial() *wrappers.BoolValue {
	if m != nil {
		return m.EnableMaterial
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableMergejoin() *wrappers.BoolValue {
	if m != nil {
		return m.EnableMergejoin
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableNestloop() *wrappers.BoolValue {
	if m != nil {
		return m.EnableNestloop
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableSeqscan() *wrappers.BoolValue {
	if m != nil {
		return m.EnableSeqscan
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableSort() *wrappers.BoolValue {
	if m != nil {
		return m.EnableSort
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableTidscan() *wrappers.BoolValue {
	if m != nil {
		return m.EnableTidscan
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxWorkerProcesses() *wrappers.Int64Value {
	if m != nil {
		return m.MaxWorkerProcesses
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxParallelWorkers() *wrappers.Int64Value {
	if m != nil {
		return m.MaxParallelWorkers
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxParallelWorkersPerGather() *wrappers.Int64Value {
	if m != nil {
		return m.MaxParallelWorkersPerGather
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutovacuumVacuumScaleFactor() *wrappers.DoubleValue {
	if m != nil {
		return m.AutovacuumVacuumScaleFactor
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutovacuumAnalyzeScaleFactor() *wrappers.DoubleValue {
	if m != nil {
		return m.AutovacuumAnalyzeScaleFactor
	}
	return nil
}

func (m *PostgresqlConfig12) GetDefaultTransactionReadOnly() *wrappers.BoolValue {
	if m != nil {
		return m.DefaultTransactionReadOnly
	}
	return nil
}

func (m *PostgresqlConfig12) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *PostgresqlConfig12) GetEnableParallelAppend() *wrappers.BoolValue {
	if m != nil {
		return m.EnableParallelAppend
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnableParallelHash() *wrappers.BoolValue {
	if m != nil {
		return m.EnableParallelHash
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnablePartitionPruning() *wrappers.BoolValue {
	if m != nil {
		return m.EnablePartitionPruning
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnablePartitionwiseAggregate() *wrappers.BoolValue {
	if m != nil {
		return m.EnablePartitionwiseAggregate
	}
	return nil
}

func (m *PostgresqlConfig12) GetEnablePartitionwiseJoin() *wrappers.BoolValue {
	if m != nil {
		return m.EnablePartitionwiseJoin
	}
	return nil
}

func (m *PostgresqlConfig12) GetJit() *wrappers.BoolValue {
	if m != nil {
		return m.Jit
	}
	return nil
}

func (m *PostgresqlConfig12) GetMaxParallelMaintenanceWorkers() *wrappers.Int64Value {
	if m != nil {
		return m.MaxParallelMaintenanceWorkers
	}
	return nil
}

func (m *PostgresqlConfig12) GetParallelLeaderParticipation() *wrappers.BoolValue {
	if m != nil {
		return m.ParallelLeaderParticipation
	}
	return nil
}

func (m *PostgresqlConfig12) GetVacuumCleanupIndexScaleFactor() *wrappers.DoubleValue {
	if m != nil {
		return m.VacuumCleanupIndexScaleFactor
	}
	return nil
}

func (m *PostgresqlConfig12) GetLogTransactionSampleRate() *wrappers.DoubleValue {
	if m != nil {
		return m.LogTransactionSampleRate
	}
	return nil
}

func (m *PostgresqlConfig12) GetPlanCacheMode() PostgresqlConfig12_PlanCacheMode {
	if m != nil {
		return m.PlanCacheMode
	}
	return PostgresqlConfig12_PLAN_CACHE_MODE_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetEffectiveIoConcurrency() *wrappers.Int64Value {
	if m != nil {
		return m.EffectiveIoConcurrency
	}
	return nil
}

func (m *PostgresqlConfig12) GetEffectiveCacheSize() *wrappers.Int64Value {
	if m != nil {
		return m.EffectiveCacheSize
	}
	return nil
}

func (m *PostgresqlConfig12) GetSharedPreloadLibraries() []PostgresqlConfig12_SharedPreloadLibraries {
	if m != nil {
		return m.SharedPreloadLibraries
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutoExplainLogMinDuration() *wrappers.Int64Value {
	if m != nil {
		return m.AutoExplainLogMinDuration
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutoExplainLogAnalyze() *wrappers.BoolValue {
	if m != nil {
		return m.AutoExplainLogAnalyze
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutoExplainLogBuffers() *wrappers.BoolValue {
	if m != nil {
		return m.AutoExplainLogBuffers
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutoExplainLogTiming() *wrappers.BoolValue {
	if m != nil {
		return m.AutoExplainLogTiming
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutoExplainLogTriggers() *wrappers.BoolValue {
	if m != nil {
		return m.AutoExplainLogTriggers
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutoExplainLogVerbose() *wrappers.BoolValue {
	if m != nil {
		return m.AutoExplainLogVerbose
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutoExplainLogNestedStatements() *wrappers.BoolValue {
	if m != nil {
		return m.AutoExplainLogNestedStatements
	}
	return nil
}

func (m *PostgresqlConfig12) GetAutoExplainSampleRate() *wrappers.DoubleValue {
	if m != nil {
		return m.AutoExplainSampleRate
	}
	return nil
}

func (m *PostgresqlConfig12) GetPgHintPlanEnableHint() *wrappers.BoolValue {
	if m != nil {
		return m.PgHintPlanEnableHint
	}
	return nil
}

func (m *PostgresqlConfig12) GetPgHintPlanEnableHintTable() *wrappers.BoolValue {
	if m != nil {
		return m.PgHintPlanEnableHintTable
	}
	return nil
}

func (m *PostgresqlConfig12) GetPgHintPlanDebugPrint() PostgresqlConfig12_PgHintPlanDebugPrint {
	if m != nil {
		return m.PgHintPlanDebugPrint
	}
	return PostgresqlConfig12_PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED
}

func (m *PostgresqlConfig12) GetPgHintPlanMessageLevel() PostgresqlConfig12_LogLevel {
	if m != nil {
		return m.PgHintPlanMessageLevel
	}
	return PostgresqlConfig12_LOG_LEVEL_UNSPECIFIED
}

type PostgresqlConfigSet12 struct {
	// Effective settings for a PostgreSQL 12 cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *PostgresqlConfig12 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a PostgreSQL 12 cluster.
	UserConfig *PostgresqlConfig12 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a PostgreSQL 12 cluster.
	DefaultConfig        *PostgresqlConfig12 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PostgresqlConfigSet12) Reset()         { *m = PostgresqlConfigSet12{} }
func (m *PostgresqlConfigSet12) String() string { return proto.CompactTextString(m) }
func (*PostgresqlConfigSet12) ProtoMessage()    {}
func (*PostgresqlConfigSet12) Descriptor() ([]byte, []int) {
	return fileDescriptor_24d5a15cdb12e7fb, []int{1}
}

func (m *PostgresqlConfigSet12) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostgresqlConfigSet12.Unmarshal(m, b)
}
func (m *PostgresqlConfigSet12) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostgresqlConfigSet12.Marshal(b, m, deterministic)
}
func (m *PostgresqlConfigSet12) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgresqlConfigSet12.Merge(m, src)
}
func (m *PostgresqlConfigSet12) XXX_Size() int {
	return xxx_messageInfo_PostgresqlConfigSet12.Size(m)
}
func (m *PostgresqlConfigSet12) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgresqlConfigSet12.DiscardUnknown(m)
}

var xxx_messageInfo_PostgresqlConfigSet12 proto.InternalMessageInfo

func (m *PostgresqlConfigSet12) GetEffectiveConfig() *PostgresqlConfig12 {
	if m != nil {
		return m.EffectiveConfig
	}
	return nil
}

func (m *PostgresqlConfigSet12) GetUserConfig() *PostgresqlConfig12 {
	if m != nil {
		return m.UserConfig
	}
	return nil
}

func (m *PostgresqlConfigSet12) GetDefaultConfig() *PostgresqlConfig12 {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func init() {
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_WalLevel", PostgresqlConfig12_WalLevel_name, PostgresqlConfig12_WalLevel_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_SynchronousCommit", PostgresqlConfig12_SynchronousCommit_name, PostgresqlConfig12_SynchronousCommit_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_ConstraintExclusion", PostgresqlConfig12_ConstraintExclusion_name, PostgresqlConfig12_ConstraintExclusion_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_ForceParallelMode", PostgresqlConfig12_ForceParallelMode_name, PostgresqlConfig12_ForceParallelMode_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogLevel", PostgresqlConfig12_LogLevel_name, PostgresqlConfig12_LogLevel_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogErrorVerbosity", PostgresqlConfig12_LogErrorVerbosity_name, PostgresqlConfig12_LogErrorVerbosity_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_LogStatement", PostgresqlConfig12_LogStatement_name, PostgresqlConfig12_LogStatement_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_TransactionIsolation", PostgresqlConfig12_TransactionIsolation_name, PostgresqlConfig12_TransactionIsolation_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_ByteaOutput", PostgresqlConfig12_ByteaOutput_name, PostgresqlConfig12_ByteaOutput_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_XmlBinary", PostgresqlConfig12_XmlBinary_name, PostgresqlConfig12_XmlBinary_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_XmlOption", PostgresqlConfig12_XmlOption_name, PostgresqlConfig12_XmlOption_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_BackslashQuote", PostgresqlConfig12_BackslashQuote_name, PostgresqlConfig12_BackslashQuote_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_PlanCacheMode", PostgresqlConfig12_PlanCacheMode_name, PostgresqlConfig12_PlanCacheMode_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_PgHintPlanDebugPrint", PostgresqlConfig12_PgHintPlanDebugPrint_name, PostgresqlConfig12_PgHintPlanDebugPrint_value)
	proto.RegisterEnum("yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12_SharedPreloadLibraries", PostgresqlConfig12_SharedPreloadLibraries_name, PostgresqlConfig12_SharedPreloadLibraries_value)
	proto.RegisterType((*PostgresqlConfig12)(nil), "yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig12")
	proto.RegisterType((*PostgresqlConfigSet12)(nil), "yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfigSet12")
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/postgresql/v1/config/postgresql12.proto", fileDescriptor_24d5a15cdb12e7fb)
}

var fileDescriptor_24d5a15cdb12e7fb = []byte{
	// 4107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x9b, 0xdb, 0x7a, 0xdb, 0xc6,
	0x7a, 0xf7, 0x3f, 0x4a, 0x4e, 0x62, 0x8f, 0x2c, 0x09, 0x1c, 0x6d, 0x0c, 0x49, 0xde, 0x45, 0xd9,
	0x7c, 0xce, 0xea, 0x92, 0x44, 0xca, 0x8a, 0xe3, 0x34, 0x4d, 0x1a, 0x88, 0x84, 0x24, 0xae, 0x80,
	0x1b, 0x83, 0x94, 0x65, 0x3b, 0x75, 0x26, 0x43, 0x60, 0x48, 0x8e, 0x05, 0x62, 0x60, 0x00, 0xd4,
	0xc6, 0xeb, 0x69, 0x9f, 0xf6, 0xa4, 0x07, 0xeb, 0x70, 0x1d, 0xb5, 0xbd, 0x95, 0x5e, 0x80, 0x4e,
	0x7b, 0xd4, 0xde, 0x41, 0x2f, 0x42, 0x47, 0x7d, 0x66, 0x00, 0x10, 0xe0, 0x46, 0x01, 0x65, 0xc7,
	0x47, 0xe2, 0xcc, 0xfc, 0x7f, 0xef, 0x6c, 0xdf, 0x99, 0x77, 0x06, 0x06, 0x4f, 0xcf, 0xb1, 0x6d,
	0x92, 0xb3, 0x2d, 0xc3, 0x62, 0x3d, 0x73, 0xab, 0x6b, 0x36, 0xb7, 0x1c, 0xe6, 0xf9, 0x6d, 0x97,
	0x78, 0x6f, 0xad, 0xad, 0x93, 0xfc, 0x96, 0xc1, 0xec, 0x16, 0x6d, 0x27, 0x12, 0xf3, 0xdb, 0x9b,
	0x8e, 0xcb, 0x7c, 0x06, 0xbf, 0x08, 0x94, 0x9b, 0x42, 0xb9, 0xd9, 0x35, 0x9b, 0x9b, 0x71, 0xa1,
	0xcd, 0x93, 0xfc, 0x66, 0xa0, 0x5c, 0xbd, 0xdf, 0x66, 0xac, 0x6d, 0x91, 0x2d, 0x21, 0x6a, 0xf6,
	0x5a, 0x5b, 0xa7, 0x2e, 0x76, 0x1c, 0xe2, 0x7a, 0x01, 0x66, 0xf5, 0xde, 0x40, 0x05, 0x4e, 0xb0,
	0x45, 0x4d, 0xec, 0x53, 0x66, 0x07, 0xd9, 0xeb, 0xff, 0x43, 0x00, 0xac, 0xf5, 0xb9, 0x05, 0xc1,
	0xcc, 0x6f, 0xc3, 0x22, 0x98, 0xef, 0xe2, 0x33, 0x64, 0x30, 0xdb, 0x26, 0x06, 0x2f, 0xee, 0xc9,
	0x99, 0x87, 0x99, 0x47, 0x33, 0xdb, 0x6b, 0x9b, 0x81, 0xbd, 0xcd, 0xc8, 0xde, 0x66, 0xc9, 0xf6,
	0x9f, 0xec, 0x3c, 0xc7, 0x56, 0x8f, 0xe8, 0x73, 0x5d, 0x7c, 0x56, 0x88, 0x25, 0x70, 0x17, 0xcc,
	0x79, 0x1d, 0xec, 0x12, 0x13, 0x35, 0x7b, 0xad, 0x16, 0x71, 0x3d, 0x79, 0x2a, 0x1d, 0x32, 0x1b,
	0x48, 0x76, 0x03, 0x05, 0xfc, 0x01, 0xdc, 0xf6, 0x49, 0xd7, 0xe9, 0x13, 0xa6, 0xd3, 0x09, 0x33,
	0x5c, 0x10, 0xe9, 0x8f, 0xc0, 0x0a, 0x6f, 0x89, 0xe3, 0x12, 0x47, 0xd4, 0xc4, 0x77, 0xb1, 0xed,
	0xe1, 0xb0, 0x4d, 0x37, 0xd2, 0x61, 0x77, 0xba, 0xf8, 0xac, 0x16, 0x8a, 0x1b, 0x09, 0x2d, 0x7c,
	0x02, 0x6e, 0x9e, 0x32, 0xf7, 0x18, 0x75, 0x49, 0x57, 0xfe, 0x28, 0x9d, 0xf3, 0x09, 0x2f, 0x5c,
	0x26, 0x5d, 0x58, 0x06, 0x8b, 0x5d, 0x4c, 0x6d, 0x9f, 0xd8, 0xd8, 0x36, 0x08, 0xea, 0x33, 0x3e,
	0x4e, 0x67, 0xc0, 0x84, 0xf0, 0x28, 0xc4, 0xfd, 0x04, 0x16, 0x70, 0xcf, 0x67, 0x27, 0xd8, 0xe8,
	0xf5, 0xba, 0x31, 0xed, 0x93, 0x74, 0x5a, 0x36, 0xd6, 0x45, 0xb0, 0x02, 0x98, 0x17, 0x9d, 0xdd,
	0xa2, 0x16, 0x41, 0x16, 0xed, 0x52, 0x5f, 0xbe, 0x39, 0xc1, 0x88, 0x71, 0xcd, 0x1e, 0xb5, 0x88,
	0xc6, 0x15, 0x70, 0x1f, 0x64, 0xc3, 0xda, 0x18, 0xcc, 0xf3, 0x91, 0x49, 0x2c, 0x7c, 0x2e, 0xdf,
	0x4a, 0xc7, 0xcc, 0x07, 0xaa, 0x02, 0xf3, 0xfc, 0x22, 0xd7, 0x40, 0x0d, 0x2c, 0x26, 0x41, 0x0e,
	0x6e, 0x13, 0xd4, 0xa1, 0xbe, 0x0c, 0x26, 0x68, 0x5b, 0xcc, 0xaa, 0xe1, 0x36, 0x39, 0xa0, 0x3e,
	0xac, 0x80, 0xa5, 0x11, 0x5a, 0x97, 0x7a, 0x9e, 0x3c, 0x33, 0x41, 0xc7, 0x0f, 0xe2, 0xca, 0xd4,
	0xf3, 0x60, 0x0d, 0x2c, 0x8f, 0xf0, 0x4c, 0xea, 0xfa, 0xe7, 0xf2, 0xed, 0x74, 0xe0, 0xc2, 0x20,
	0xb0, 0xc8, 0x75, 0xc3, 0x1d, 0x17, 0xf4, 0xff, 0xec, 0xb5, 0x3a, 0x2e, 0x18, 0x81, 0x1a, 0x98,
	0x6b, 0xb6, 0x4f, 0x5d, 0xea, 0x13, 0x37, 0xec, 0xfe, 0xb9, 0x54, 0xca, 0xee, 0xed, 0xcb, 0x8b,
	0xfc, 0xcd, 0x7c, 0x6e, 0x23, 0x9f, 0xcb, 0xe5, 0x72, 0xfa, 0x6c, 0x04, 0x08, 0x86, 0xa2, 0x0a,
	0x96, 0xfa, 0x44, 0xcb, 0xed, 0xa1, 0x2e, 0x3e, 0xe3, 0x0d, 0xf6, 0xe4, 0xf9, 0x09, 0xda, 0x1a,
	0x29, 0x35, 0xb7, 0x57, 0x0e, 0x75, 0xb0, 0x01, 0xee, 0x0c, 0x02, 0x7b, 0x96, 0x4f, 0x1d, 0x8b,
	0x12, 0x57, 0x96, 0x04, 0xf2, 0xee, 0x08, 0xb2, 0xc8, 0x7a, 0x4d, 0x8b, 0x04, 0xcc, 0xa5, 0x24,
	0xb3, 0x2f, 0x85, 0x2f, 0xc1, 0x62, 0x9f, 0xda, 0xb2, 0x7a, 0x5e, 0x07, 0xe1, 0x96, 0x4f, 0x5c,
	0x39, 0x9b, 0xde, 0x7c, 0x70, 0x79, 0x91, 0xff, 0x38, 0xb7, 0xb1, 0x9d, 0xdb, 0x79, 0xaa, 0xc3,
	0x08, 0xb2, 0xc7, 0x19, 0x0a, 0x47, 0xc0, 0x23, 0xb0, 0xd0, 0xc4, 0xc6, 0x31, 0xb1, 0xcd, 0x01,
	0x32, 0xbc, 0x1e, 0x39, 0x1b, 0x32, 0x12, 0xe0, 0x26, 0x58, 0x66, 0x96, 0x89, 0x3c, 0x1b, 0x3b,
	0x5e, 0x87, 0xf9, 0xc8, 0xef, 0xb8, 0xc4, 0xeb, 0x30, 0xcb, 0x94, 0x17, 0xd2, 0xd9, 0xf3, 0x97,
	0x17, 0xf9, 0x99, 0x8d, 0xfc, 0xc6, 0xd3, 0x27, 0x3b, 0x39, 0x31, 0x6e, 0x8b, 0xcc, 0x32, 0xeb,
	0x21, 0xaa, 0x11, 0x91, 0x20, 0x02, 0xb7, 0x4e, 0xb1, 0x85, 0x2c, 0x72, 0x42, 0x2c, 0x79, 0xf1,
	0x61, 0xe6, 0xd1, 0xdc, 0xf6, 0xee, 0xe6, 0x44, 0xfb, 0xcb, 0xe6, 0xe8, 0xe6, 0xb0, 0x79, 0x84,
	0x2d, 0x8d, 0x93, 0xf4, 0x9b, 0xa7, 0xe1, 0x5f, 0xf0, 0x1d, 0x80, 0xde, 0xb9, 0x6d, 0x74, 0x5c,
	0x66, 0xb3, 0x9e, 0x87, 0x0c, 0xd6, 0xe5, 0x73, 0x77, 0x49, 0x58, 0xfa, 0xe9, 0xfd, 0x2d, 0xd5,
	0x63, 0x66, 0x41, 0x20, 0xf5, 0xac, 0x37, 0x9c, 0x04, 0x7f, 0x01, 0xd0, 0xe8, 0x10, 0xe3, 0xd8,
	0x61, 0xd4, 0xf6, 0x91, 0x4f, 0xbb, 0x84, 0xf5, 0x7c, 0x79, 0x39, 0xbd, 0xf3, 0xe0, 0xe5, 0x45,
	0x7e, 0xee, 0x31, 0xef, 0xb6, 0xb8, 0xff, 0xb2, 0x31, 0xaa, 0x11, 0x90, 0xe0, 0x2f, 0xe0, 0x6e,
	0x82, 0x6f, 0xb0, 0xae, 0x63, 0x11, 0xbe, 0x05, 0x20, 0x1f, 0xbb, 0x6d, 0xe2, 0xcb, 0x77, 0x26,
	0x98, 0xaf, 0xab, 0x31, 0xa1, 0xd0, 0x07, 0x34, 0x84, 0x1e, 0xbe, 0x06, 0xcb, 0x09, 0x7e, 0x72,
	0x72, 0xc9, 0xd7, 0x9b, 0x5c, 0x8b, 0x31, 0x26, 0x31, 0xbf, 0xbe, 0x07, 0xb7, 0xf9, 0x06, 0xc8,
	0xc7, 0xdf, 0xa3, 0xef, 0x88, 0xbc, 0x92, 0xbe, 0x62, 0x41, 0x17, 0x9f, 0x1d, 0x61, 0xab, 0x4e,
	0xdf, 0x11, 0x21, 0xa7, 0x76, 0x2c, 0x5f, 0x9d, 0x44, 0x4e, 0xed, 0x48, 0xfe, 0x0a, 0xac, 0x71,
	0xeb, 0x9e, 0x8f, 0x6d, 0xb3, 0x79, 0x8e, 0x3c, 0xdf, 0x25, 0xb8, 0x4b, 0xed, 0x76, 0xe8, 0x97,
	0xd6, 0xd2, 0x69, 0x72, 0x17, 0x9f, 0xd5, 0x03, 0x79, 0x3d, 0x52, 0x07, 0x4e, 0xe9, 0x08, 0xac,
	0x98, 0xa4, 0x85, 0x7b, 0x96, 0xcf, 0xf9, 0x3e, 0xf5, 0x7c, 0x6a, 0x78, 0xd1, 0xa8, 0xdc, 0x9d,
	0x60, 0x6b, 0x0f, 0xd5, 0xf5, 0xbe, 0x38, 0x1c, 0x91, 0x7f, 0xce, 0x80, 0x45, 0x83, 0xd9, 0x9e,
	0xef, 0xf2, 0xfd, 0x16, 0x91, 0x33, 0xc3, 0xea, 0x79, 0x94, 0xd9, 0xf2, 0x3d, 0x31, 0xa1, 0xcb,
	0xef, 0x3f, 0xa1, 0x0b, 0x7d, 0xaa, 0x1a, 0x41, 0xf5, 0x05, 0x63, 0x34, 0x11, 0xd6, 0xc0, 0x92,
	0xd1, 0x73, 0x3d, 0xe6, 0x22, 0xbf, 0xe7, 0x58, 0x04, 0xb5, 0xdc, 0xe0, 0xdc, 0x21, 0xdf, 0x9f,
	0x60, 0xb6, 0x2d, 0x04, 0xd2, 0x06, 0x57, 0xee, 0x85, 0x42, 0xf8, 0x1a, 0x2c, 0xb4, 0x5c, 0xc6,
	0xf7, 0x16, 0xcb, 0xc2, 0x8e, 0x17, 0xed, 0xef, 0x0f, 0xd2, 0xe7, 0x98, 0x74, 0x79, 0x91, 0xbf,
	0x9d, 0xdf, 0xd8, 0xce, 0xef, 0x7c, 0xb3, 0xf3, 0xf4, 0xf1, 0x93, 0x9d, 0x6f, 0xf4, 0x2c, 0x27,
	0x15, 0x42, 0x50, 0xb0, 0xe7, 0xbc, 0x06, 0x0b, 0x6f, 0x18, 0xb5, 0x87, 0xf1, 0x0f, 0xdf, 0x0b,
	0xcf, 0x49, 0x83, 0xf8, 0x3f, 0x83, 0x85, 0x16, 0x73, 0x0d, 0x82, 0x1c, 0xec, 0x62, 0xcb, 0x22,
	0x16, 0xea, 0x32, 0x93, 0xc8, 0x9f, 0x7e, 0xa8, 0x87, 0xd9, 0xe3, 0xd0, 0x5a, 0xc8, 0x2c, 0x33,
	0x93, 0xe8, 0xd9, 0xd6, 0x70, 0x12, 0x74, 0xc1, 0x82, 0x61, 0x51, 0x62, 0xfb, 0x88, 0x2f, 0x85,
	0x2e, 0xf1, 0x3c, 0xb1, 0xf7, 0xad, 0x7f, 0xa8, 0x23, 0xd5, 0x58, 0x3b, 0x70, 0xa4, 0xd9, 0x00,
	0x5f, 0xa6, 0x76, 0x39, 0x84, 0x43, 0x0b, 0x48, 0x16, 0x6b, 0x0f, 0x1a, 0xfc, 0xec, 0x77, 0x33,
	0x38, 0x67, 0xb1, 0x76, 0xd2, 0xda, 0x39, 0xb8, 0x13, 0x59, 0x23, 0xae, 0xcb, 0x5c, 0xb1, 0xa0,
	0x48, 0x97, 0xd8, 0xbe, 0xfc, 0xf9, 0xef, 0x66, 0x74, 0x31, 0x30, 0xaa, 0x72, 0x03, 0xf5, 0x88,
	0x0f, 0x5f, 0x80, 0xd5, 0xc8, 0xb4, 0xd9, 0x73, 0x45, 0x6c, 0x92, 0xb0, 0xfe, 0xc5, 0x04, 0xcb,
	0x38, 0xc0, 0x16, 0x43, 0x71, 0x4c, 0x2e, 0x80, 0x79, 0x4e, 0x8e, 0xbd, 0xa2, 0x27, 0x7f, 0x29,
	0x70, 0xab, 0x23, 0xb8, 0x5d, 0xc6, 0xac, 0x30, 0x86, 0xb1, 0x58, 0xbb, 0x10, 0x2b, 0xfa, 0x90,
	0x44, 0x24, 0xf4, 0xff, 0x27, 0x83, 0x24, 0x02, 0xa1, 0x12, 0x80, 0x1c, 0x62, 0x52, 0x2f, 0xc9,
	0x79, 0x94, 0xca, 0xc9, 0x5a, 0xac, 0x5d, 0x1c, 0x10, 0x71, 0x7f, 0x2c, 0x50, 0x61, 0x6b, 0xe5,
	0xaf, 0x52, 0x21, 0x33, 0x1c, 0x12, 0x16, 0xe7, 0xeb, 0x88, 0xcb, 0x83, 0x41, 0x3e, 0x21, 0x6e,
	0x93, 0x79, 0xd4, 0x3f, 0x97, 0xff, 0xf0, 0xa1, 0xeb, 0x48, 0x63, 0x6d, 0x31, 0xae, 0xcf, 0x23,
	0xa4, 0xa8, 0xfb, 0x60, 0x12, 0xfc, 0x11, 0xf0, 0x8e, 0x41, 0x16, 0x33, 0x8e, 0xd1, 0x29, 0xa6,
	0xbe, 0x27, 0xff, 0x4d, 0x6a, 0xed, 0x79, 0x6b, 0x35, 0x66, 0x1c, 0x1f, 0xf1, 0xf2, 0xf0, 0x18,
	0xcc, 0x72, 0x42, 0x3c, 0x3f, 0xfe, 0x28, 0x2a, 0xbe, 0xf7, 0x41, 0x15, 0xef, 0xcf, 0x18, 0x61,
	0x2c, 0x9e, 0x3f, 0x4a, 0x50, 0xdd, 0x7e, 0x44, 0xe4, 0xc9, 0x1b, 0xe9, 0xb3, 0x91, 0x23, 0x1a,
	0x61, 0x3c, 0xe4, 0xc1, 0x07, 0x60, 0xc6, 0x23, 0xd8, 0x35, 0x3a, 0xc8, 0xc1, 0x7e, 0x47, 0xde,
	0x7c, 0x98, 0x79, 0x74, 0x4b, 0x07, 0x41, 0x52, 0x0d, 0xfb, 0x1d, 0x3e, 0x9c, 0x2e, 0x3b, 0x45,
	0x1e, 0x31, 0x7a, 0x2e, 0x1f, 0x88, 0xad, 0xf4, 0xe1, 0x74, 0xd9, 0x69, 0x3d, 0x2c, 0x0e, 0xff,
	0x9a, 0x01, 0xf7, 0xa2, 0x3d, 0x30, 0x11, 0xd9, 0x22, 0xea, 0x31, 0x2b, 0x98, 0x1f, 0x39, 0xd1,
	0x41, 0x95, 0xf7, 0xef, 0xa0, 0x44, 0xd0, 0x5b, 0x8a, 0xa8, 0xfa, 0x5a, 0x68, 0x74, 0x5c, 0x26,
	0x3c, 0x00, 0xd9, 0xfe, 0x00, 0xf5, 0xcf, 0x63, 0xf9, 0xf4, 0xae, 0x93, 0xfa, 0xaa, 0xe8, 0xe8,
	0xf5, 0x03, 0x9f, 0xec, 0xc6, 0x71, 0x1f, 0xb2, 0x3d, 0x41, 0xf0, 0xcf, 0x05, 0x91, 0x9e, 0x82,
	0xcf, 0xa8, 0x69, 0x11, 0x44, 0xed, 0x81, 0xde, 0xf1, 0x88, 0xe7, 0x89, 0x03, 0x5c, 0x88, 0x7d,
	0x9c, 0x8e, 0x7d, 0xc0, 0x39, 0x25, 0x3b, 0xd1, 0xde, 0x7a, 0x00, 0x89, 0x4c, 0x75, 0xc0, 0xed,
	0xe6, 0xb9, 0x4f, 0x30, 0x62, 0x3d, 0xdf, 0xe9, 0xf9, 0xf2, 0x8e, 0xe8, 0x77, 0xf5, 0xfd, 0xfb,
	0x7d, 0x97, 0xd3, 0xaa, 0x02, 0xa6, 0xcf, 0x34, 0xe3, 0x1f, 0x10, 0x83, 0x5b, 0x67, 0x5d, 0xab,
	0x49, 0x6d, 0xec, 0x9e, 0xcb, 0x5f, 0x0b, 0x33, 0x85, 0xf7, 0x37, 0xf3, 0xa2, 0x6b, 0xed, 0x0a,
	0x94, 0x1e, 0x53, 0x43, 0x13, 0xcc, 0x11, 0x33, 0xe8, 0xc9, 0xef, 0x60, 0xa2, 0x2a, 0x50, 0x7a,
	0x4c, 0xe5, 0xe1, 0x73, 0x9b, 0xda, 0xc8, 0x21, 0xb6, 0xc9, 0x8f, 0x83, 0x16, 0xed, 0x47, 0xbc,
	0xdf, 0x4c, 0x10, 0x52, 0xb6, 0xa9, 0x5d, 0x0b, 0x94, 0x1a, 0x8d, 0xa2, 0xde, 0x3d, 0x20, 0x99,
	0x04, 0x9b, 0x03, 0x13, 0xe6, 0xe9, 0x04, 0xd1, 0x73, 0x24, 0x8a, 0x46, 0xf2, 0x79, 0x70, 0x63,
	0xc4, 0x93, 0x3c, 0xe4, 0x10, 0x37, 0x39, 0x75, 0xe4, 0x6f, 0xd3, 0x81, 0xcb, 0x5d, 0x7c, 0xc6,
	0x3d, 0x96, 0x57, 0x23, 0x6e, 0x62, 0xbe, 0x40, 0x04, 0xee, 0x87, 0x37, 0x51, 0xe6, 0x15, 0xf0,
	0xbf, 0x4d, 0x87, 0xaf, 0x06, 0xd7, 0x51, 0xe6, 0x38, 0x03, 0xdf, 0x81, 0x19, 0xec, 0xba, 0xf8,
	0x1c, 0xd9, 0x3d, 0xcb, 0xf2, 0xe4, 0xef, 0x52, 0x5d, 0x09, 0x10, 0xc5, 0x2b, 0xbc, 0x34, 0x7c,
	0x0b, 0xe6, 0x79, 0x6c, 0xea, 0x59, 0xd8, 0xeb, 0xa0, 0xb7, 0x3d, 0xe6, 0x13, 0xf9, 0xef, 0xc4,
	0xc0, 0x1f, 0x7c, 0xc0, 0x14, 0x8e, 0x80, 0xcf, 0x38, 0x4f, 0x9f, 0x6b, 0x0e, 0xfc, 0x86, 0x7b,
	0x20, 0x1b, 0xf9, 0xae, 0x53, 0xea, 0x77, 0x10, 0xa3, 0xa6, 0x27, 0x7f, 0x9f, 0x5a, 0xeb, 0xf9,
	0x50, 0x74, 0x44, 0xfd, 0x4e, 0x95, 0x9a, 0x1e, 0xac, 0x80, 0x25, 0xe2, 0x19, 0xd8, 0x21, 0x3c,
	0xbc, 0xe0, 0x93, 0xe9, 0x14, 0xbb, 0x36, 0xb5, 0xdb, 0xf2, 0x0f, 0xa9, 0xac, 0x85, 0x40, 0x58,
	0x17, 0xba, 0xa3, 0x40, 0x06, 0x35, 0xb0, 0x68, 0x31, 0x11, 0xe8, 0x61, 0x1f, 0x39, 0x2e, 0x3d,
	0xa1, 0x16, 0xe1, 0xc7, 0xaf, 0xbf, 0x4f, 0xc5, 0x41, 0x8b, 0x15, 0x84, 0xac, 0xd6, 0x57, 0xf1,
	0x08, 0x88, 0x39, 0xc4, 0xc5, 0x3e, 0x73, 0xf9, 0xd8, 0x1b, 0xc4, 0x24, 0xe2, 0xde, 0x2f, 0xac,
	0xe3, 0x8f, 0xa9, 0xd0, 0x95, 0x48, 0x5e, 0xeb, 0xab, 0xa3, 0x9a, 0x56, 0xc0, 0x92, 0x18, 0x2a,
	0x84, 0x2d, 0x0b, 0x51, 0x93, 0xd8, 0x3e, 0x6d, 0x51, 0xe2, 0x7a, 0xb2, 0x92, 0xde, 0x72, 0x21,
	0x54, 0x2c, 0xab, 0x14, 0xcb, 0x78, 0x5d, 0x45, 0xa4, 0x86, 0x5d, 0x93, 0x9f, 0x78, 0x5a, 0xcc,
	0x15, 0xb1, 0x5a, 0xd0, 0xad, 0x9e, 0xbc, 0x9b, 0x5e, 0xd7, 0x48, 0x5e, 0xe8, 0xab, 0x83, 0xbe,
	0xf5, 0x60, 0x19, 0x2c, 0x46, 0xb1, 0x3b, 0x7d, 0x47, 0x90, 0x47, 0xde, 0x7a, 0x06, 0xb6, 0x3d,
	0xb9, 0x90, 0x5e, 0xd5, 0x84, 0xae, 0x1e, 0xca, 0x78, 0xd3, 0xc5, 0xd2, 0xe1, 0x56, 0xc4, 0x84,
	0x47, 0xe4, 0x6d, 0x0f, 0x5b, 0x9e, 0x5c, 0x4c, 0xe7, 0xf5, 0x85, 0x7c, 0xea, 0xab, 0x42, 0x06,
	0x7f, 0x00, 0xb3, 0xe4, 0x8c, 0xfa, 0x88, 0x85, 0x27, 0x60, 0x59, 0x4d, 0xdf, 0x89, 0xb9, 0xa0,
	0x1a, 0x9c, 0x67, 0xe1, 0x8f, 0x60, 0xd6, 0x23, 0x6f, 0x83, 0x6b, 0x40, 0x83, 0x79, 0xbe, 0xbc,
	0x37, 0x41, 0xa0, 0x36, 0xe3, 0x91, 0xb7, 0x35, 0xdc, 0x26, 0x05, 0xe6, 0x09, 0xff, 0xe5, 0x62,
	0xdb, 0x64, 0xdd, 0x04, 0x64, 0x7f, 0x02, 0xc8, 0x5c, 0xa0, 0xea, 0x73, 0x7e, 0x06, 0xcb, 0x89,
	0x1b, 0x61, 0x11, 0xfb, 0x33, 0xf7, 0x98, 0xcf, 0x8a, 0x83, 0xf4, 0x60, 0xec, 0xe6, 0xe5, 0x45,
	0xfe, 0x46, 0x7e, 0xe3, 0xf1, 0xb6, 0xbe, 0x18, 0x43, 0xca, 0xf8, 0xec, 0x28, 0x40, 0xc0, 0x0e,
	0xb8, 0x9b, 0x80, 0x8f, 0xde, 0xf3, 0x96, 0x26, 0xbc, 0xb2, 0xd8, 0xc8, 0x6f, 0xe4, 0x73, 0x39,
	0x7d, 0x25, 0x86, 0x3d, 0x1f, 0xba, 0xfd, 0x7d, 0x73, 0xa5, 0xa5, 0x60, 0x9b, 0xf8, 0xd3, 0x84,
	0x57, 0x9a, 0x81, 0xa5, 0xab, 0x6c, 0x45, 0xc1, 0x2b, 0x4c, 0xd8, 0xb2, 0xb1, 0xc3, 0xf7, 0x0f,
	0xf9, 0xa7, 0x74, 0x0b, 0xd9, 0xcb, 0x8b, 0xfc, 0x6c, 0x7e, 0xf0, 0x06, 0x29, 0x26, 0x55, 0x02,
	0x10, 0x7c, 0x01, 0xe6, 0xf9, 0x81, 0x8f, 0x9e, 0x90, 0xfe, 0xc6, 0xa4, 0x4d, 0x78, 0x3d, 0x95,
	0x1f, 0xbc, 0x9e, 0x9a, 0x0b, 0x39, 0xd1, 0x5e, 0xd5, 0x02, 0x2b, 0xbe, 0x8b, 0x8d, 0x63, 0xc4,
	0xb7, 0x80, 0x13, 0xea, 0x9f, 0xa3, 0xb7, 0x3d, 0xe2, 0x9e, 0x07, 0x57, 0x35, 0xe5, 0x74, 0x1b,
	0x73, 0x97, 0x17, 0x79, 0x90, 0xcf, 0xe5, 0x36, 0xf2, 0xb9, 0xed, 0x9d, 0x5c, 0x4e, 0x5f, 0x16,
	0x34, 0x25, 0x84, 0x3d, 0xe3, 0x2c, 0x71, 0x8d, 0xb3, 0x0f, 0xb2, 0xc4, 0xc6, 0x4d, 0x8b, 0xa0,
	0x26, 0xf5, 0xbb, 0xd8, 0xe1, 0x6b, 0x50, 0xae, 0xa5, 0xae, 0x10, 0x29, 0x10, 0xed, 0xf6, 0x35,
	0xfc, 0x4c, 0x1d, 0x82, 0x3a, 0xd8, 0xeb, 0xe0, 0x76, 0x5b, 0x7e, 0x96, 0x4a, 0x99, 0x0d, 0x14,
	0x07, 0x81, 0x80, 0x47, 0x64, 0x09, 0xc4, 0x1b, 0x46, 0x6d, 0x59, 0x4f, 0x8f, 0xc8, 0x62, 0x06,
	0x57, 0x40, 0x15, 0x84, 0x75, 0x43, 0x94, 0x6f, 0x6e, 0xa2, 0x3d, 0xf5, 0xf4, 0xad, 0x27, 0xd0,
	0x94, 0x22, 0x09, 0x77, 0x6a, 0x49, 0x0c, 0xb3, 0xad, 0x73, 0x81, 0x6a, 0x4c, 0xb0, 0xf3, 0xc4,
	0xa8, 0x48, 0x96, 0x68, 0x5a, 0x17, 0xfb, 0xc4, 0xa5, 0xd8, 0x92, 0x0f, 0x27, 0x6d, 0x5a, 0x39,
	0x54, 0x24, 0x9a, 0xd6, 0x25, 0x6e, 0x9b, 0x88, 0x0e, 0x7a, 0x3e, 0x69, 0xd3, 0xca, 0x91, 0x24,
	0x51, 0x17, 0x9b, 0x78, 0xbe, 0xc5, 0x98, 0x23, 0x1f, 0x4d, 0x5a, 0x97, 0x4a, 0xa8, 0x48, 0x0c,
	0x77, 0xe8, 0xef, 0xe5, 0x17, 0x93, 0x0e, 0x77, 0xe8, 0xe9, 0xf9, 0xa9, 0x26, 0x42, 0x30, 0xd7,
	0x97, 0x5f, 0xa6, 0x9f, 0x6a, 0x42, 0x3d, 0x73, 0xfd, 0x84, 0x7d, 0x9f, 0x9a, 0xc2, 0xfe, 0xab,
	0x49, 0xed, 0x37, 0x02, 0x01, 0x7c, 0x09, 0x16, 0x63, 0x1f, 0x8a, 0x1c, 0x97, 0x19, 0xc4, 0xf3,
	0x88, 0x27, 0xff, 0x3c, 0xf1, 0xe5, 0x2c, 0x5f, 0x5b, 0x3a, 0xec, 0x46, 0x4e, 0xb4, 0x16, 0x21,
	0x22, 0x74, 0xff, 0x4a, 0x2b, 0xf2, 0xd3, 0xff, 0x70, 0x7d, 0x74, 0x74, 0x5f, 0x15, 0xf9, 0xe9,
	0x2e, 0x78, 0x30, 0x0e, 0x2d, 0x8e, 0x9c, 0x6d, 0xec, 0x77, 0x88, 0x2b, 0xbf, 0xbe, 0x9e, 0x95,
	0xb5, 0x51, 0x2b, 0x35, 0xe2, 0xee, 0x0b, 0x16, 0xb4, 0xc1, 0xfd, 0x51, 0x67, 0xed, 0x19, 0xd8,
	0x22, 0xa8, 0x85, 0x0d, 0x9f, 0xb9, 0xf2, 0x2f, 0xe9, 0x3b, 0xd9, 0xee, 0xcc, 0xe5, 0x45, 0xfe,
	0x93, 0xdc, 0x66, 0x6e, 0x23, 0xbf, 0x99, 0xd3, 0xd7, 0x86, 0xdd, 0x75, 0x9d, 0xe3, 0xf6, 0x04,
	0x0d, 0x3a, 0xe0, 0x41, 0xc2, 0x1e, 0xb6, 0xb1, 0x75, 0xce, 0xcf, 0x14, 0x49, 0x83, 0xe8, 0xba,
	0x06, 0x13, 0xdb, 0x8d, 0x12, 0x00, 0x93, 0x16, 0x5f, 0x8f, 0x0f, 0xb4, 0x5d, 0x82, 0x4d, 0xc4,
	0xd7, 0xaf, 0xfc, 0x6b, 0xea, 0xc4, 0x5a, 0x1d, 0x0d, 0x9a, 0x75, 0x82, 0xcd, 0xaa, 0x6d, 0x9d,
	0xc3, 0x55, 0x70, 0x93, 0x6f, 0x0d, 0xef, 0x98, 0x4d, 0x64, 0x2c, 0x6e, 0x09, 0xfa, 0xbf, 0x79,
	0xa8, 0x14, 0x4e, 0xe2, 0xfe, 0x70, 0x62, 0x87, 0x07, 0x4e, 0x72, 0x33, 0xd5, 0x66, 0xe8, 0x9e,
	0xa2, 0x81, 0x53, 0x84, 0x8e, 0x9f, 0x70, 0x87, 0x89, 0xdc, 0x97, 0xca, 0x46, 0xfa, 0x09, 0x77,
	0x90, 0xc7, 0xfd, 0x29, 0x6c, 0x00, 0x39, 0xa6, 0xf9, 0x54, 0xf4, 0x8b, 0xe3, 0xf6, 0xc4, 0xf1,
	0xd6, 0x4c, 0x25, 0x2e, 0xf7, 0x89, 0x81, 0xb4, 0x16, 0x28, 0xe1, 0xaf, 0xe0, 0xfe, 0x30, 0xf5,
	0x94, 0x7a, 0x04, 0xe1, 0x76, 0xdb, 0x25, 0x6d, 0xec, 0x13, 0x99, 0xa4, 0xb2, 0xef, 0x0e, 0xb1,
	0x39, 0x40, 0x89, 0xf4, 0x3c, 0xd0, 0x1b, 0x6b, 0x41, 0x78, 0xcc, 0x56, 0x2a, 0xfc, 0xce, 0x18,
	0xf8, 0x9f, 0xb8, 0xe7, 0xfc, 0x23, 0x98, 0x7e, 0x43, 0x7d, 0xb9, 0x9d, 0x4a, 0xe0, 0xc5, 0x60,
	0x17, 0x3c, 0x1c, 0x58, 0xa9, 0xc3, 0x1f, 0x07, 0x70, 0x87, 0xd0, 0x49, 0x5f, 0xaa, 0x9f, 0x5c,
	0x5e, 0xe4, 0xa7, 0x7f, 0xf8, 0x3e, 0xa7, 0xdf, 0x4b, 0xac, 0xd3, 0xf2, 0xe0, 0xf7, 0x02, 0xdc,
	0x31, 0xfc, 0x02, 0xee, 0xf5, 0x4d, 0x59, 0x04, 0x9b, 0xdc, 0xa7, 0xf1, 0x16, 0x18, 0xd4, 0x09,
	0x2e, 0x8c, 0x68, 0x6a, 0xb5, 0xd7, 0x22, 0x80, 0x26, 0xf4, 0xb5, 0xa4, 0x1c, 0xfe, 0x23, 0xf8,
	0x34, 0x3a, 0xab, 0x59, 0x04, 0xdb, 0x3d, 0x27, 0xd8, 0x19, 0x07, 0xd7, 0xe6, 0x9b, 0x09, 0xd6,
	0xe6, 0xd2, 0xe5, 0x45, 0x3e, 0x2b, 0xd6, 0x66, 0xae, 0xff, 0x6f, 0x33, 0xa7, 0xdf, 0x0b, 0x1f,
	0xbb, 0x03, 0xb8, 0xd8, 0x3e, 0x93, 0xcb, 0xb4, 0x03, 0xd6, 0xc4, 0x9d, 0x5d, 0xf2, 0xb6, 0x07,
	0x77, 0x1d, 0x8b, 0x20, 0x97, 0x4f, 0x99, 0xe3, 0xeb, 0x3a, 0x05, 0xd9, 0x62, 0xed, 0xe4, 0xa5,
	0x8f, 0x60, 0xe9, 0x7c, 0xf6, 0x30, 0x30, 0xef, 0x58, 0xd8, 0x46, 0x06, 0x36, 0x3a, 0x24, 0x78,
	0x8d, 0xb0, 0x44, 0xc0, 0xbc, 0xff, 0xfe, 0x01, 0x73, 0xcd, 0xc2, 0x76, 0x81, 0xf3, 0xc4, 0x4b,
	0xc4, 0xac, 0x93, 0xfc, 0x09, 0x31, 0x90, 0x49, 0xab, 0x45, 0xf8, 0xd9, 0x8c, 0x20, 0xca, 0x03,
	0x54, 0xdb, 0xe8, 0xb9, 0x2e, 0xb1, 0x8d, 0x73, 0xb9, 0x7b, 0x0d, 0x5f, 0xce, 0x8f, 0x79, 0x7d,
	0x50, 0x89, 0x15, 0x62, 0x0c, 0xc4, 0x60, 0x31, 0x36, 0x11, 0x34, 0x4c, 0x9c, 0x24, 0xed, 0x09,
	0x4f, 0xab, 0xb9, 0x8d, 0xaf, 0x77, 0xbe, 0xfd, 0xe6, 0xeb, 0xaf, 0x9f, 0xe6, 0x1f, 0x3f, 0x7d,
	0xfa, 0x54, 0x87, 0x7d, 0x98, 0x68, 0x85, 0x38, 0x49, 0xfe, 0x25, 0x03, 0xe4, 0xf0, 0xa3, 0x20,
	0xc7, 0x25, 0x16, 0xc3, 0x26, 0xb2, 0x68, 0xd3, 0xc5, 0x2e, 0x25, 0x9e, 0xcc, 0x1e, 0x4e, 0x3f,
	0x9a, 0xdb, 0xae, 0x7d, 0xc0, 0x83, 0xb1, 0x20, 0xd7, 0x02, 0xb0, 0x16, 0x71, 0xf5, 0x65, 0x6f,
	0x6c, 0x3a, 0x74, 0xc0, 0x3d, 0xee, 0xf4, 0x11, 0x39, 0x73, 0x2c, 0x4c, 0x6d, 0x34, 0xfc, 0x10,
	0x21, 0x3b, 0x13, 0x86, 0x00, 0x1b, 0x03, 0xef, 0x57, 0x22, 0xd2, 0x50, 0x03, 0xa6, 0x36, 0xf0,
	0x38, 0x01, 0xeb, 0x40, 0x1e, 0xb1, 0x18, 0x6e, 0x5f, 0xf2, 0xdb, 0xd4, 0x95, 0xb7, 0x34, 0x08,
	0x0e, 0xb7, 0xa9, 0xb1, 0xd0, 0xe8, 0x7b, 0x29, 0xf7, 0xba, 0xd0, 0xe8, 0xc3, 0xa9, 0x67, 0xe0,
	0xce, 0x08, 0xd4, 0xa7, 0x3c, 0xa2, 0x97, 0xbd, 0xf4, 0x6d, 0x67, 0x90, 0xd9, 0x10, 0x3a, 0x78,
	0x08, 0x56, 0x46, 0x91, 0x2e, 0x6d, 0xb7, 0x79, 0x45, 0xfd, 0xf4, 0x9d, 0x62, 0x08, 0x1a, 0x2a,
	0xc7, 0x36, 0x3f, 0x78, 0xda, 0x20, 0x72, 0xef, 0xba, 0xcd, 0x0f, 0x5e, 0x2b, 0x08, 0x6c, 0x81,
	0xf5, 0x11, 0x28, 0x3f, 0x08, 0x13, 0x33, 0x7e, 0x7d, 0xf0, 0xe4, 0x93, 0x54, 0xfc, 0xfd, 0x41,
	0x7c, 0x45, 0x20, 0xfa, 0x6f, 0x0c, 0x1e, 0x6c, 0x0e, 0x55, 0x3e, 0xe9, 0xad, 0x4e, 0xaf, 0xeb,
	0xad, 0x92, 0x6d, 0x49, 0xb8, 0x2a, 0x1d, 0xc8, 0x4e, 0x1b, 0x75, 0xa8, 0xed, 0x23, 0xe1, 0xb2,
	0xa2, 0xf0, 0x89, 0xda, 0xbe, 0x7c, 0x96, 0x3e, 0x96, 0x4e, 0xfb, 0x80, 0xda, 0x3e, 0xf7, 0x4d,
	0x6a, 0x10, 0x44, 0x51, 0x9b, 0x87, 0xcc, 0xf7, 0xaf, 0x62, 0x22, 0x9f, 0xff, 0x29, 0x9f, 0xa7,
	0xdf, 0x16, 0x8d, 0x23, 0x37, 0xf8, 0x1f, 0xf0, 0x5f, 0x33, 0x43, 0x75, 0x36, 0x49, 0xb3, 0xd7,
	0x46, 0x8e, 0xcb, 0xeb, 0xfc, 0xee, 0x43, 0xdf, 0x34, 0x6a, 0x7d, 0xbb, 0x45, 0x8e, 0xad, 0x71,
	0x6a, 0xb2, 0x9d, 0x71, 0x2a, 0xfc, 0x27, 0xb0, 0x3a, 0x50, 0x8f, 0xf0, 0x31, 0x36, 0xfc, 0x96,
	0xe6, 0xcf, 0xbf, 0xdb, 0xe3, 0xe8, 0x72, 0x6c, 0x3d, 0x7c, 0x95, 0x15, 0xe9, 0xeb, 0x75, 0x70,
	0x33, 0xfa, 0xde, 0x06, 0xae, 0x80, 0xa5, 0x23, 0x45, 0x43, 0x9a, 0xfa, 0x5c, 0xd5, 0xd0, 0x61,
	0xa5, 0x5e, 0x53, 0x0b, 0xa5, 0xbd, 0x92, 0x5a, 0x94, 0xfe, 0x1f, 0x5c, 0x02, 0xd9, 0x38, 0x4b,
	0x57, 0x6b, 0x5a, 0xa9, 0xa0, 0x48, 0x99, 0xc1, 0x64, 0xad, 0xba, 0x5f, 0x2a, 0x28, 0x9a, 0x34,
	0xb5, 0xfe, 0xdf, 0x19, 0x90, 0x1d, 0xf9, 0xb6, 0x06, 0xae, 0x83, 0xfb, 0xf5, 0x97, 0x95, 0xc2,
	0x81, 0x5e, 0xad, 0x54, 0x0f, 0xeb, 0xa8, 0x50, 0x2d, 0x97, 0x4b, 0x8d, 0x21, 0x3b, 0x2b, 0x60,
	0x69, 0x4c, 0x99, 0x6a, 0x45, 0xca, 0xc0, 0x55, 0xb0, 0x3c, 0x2e, 0x6b, 0x6f, 0x4f, 0x9a, 0x82,
	0x77, 0x81, 0x3c, 0x26, 0x4f, 0xab, 0xf2, 0xea, 0x4c, 0xc3, 0xcf, 0xc0, 0x83, 0x31, 0xb9, 0xba,
	0x5a, 0xae, 0x36, 0x54, 0x74, 0xa4, 0x97, 0x1a, 0xaa, 0x74, 0xe3, 0xb7, 0x0b, 0x29, 0xb5, 0x9a,
	0xf6, 0x52, 0xfa, 0x68, 0xfd, 0x3f, 0x32, 0x60, 0x61, 0xcc, 0x37, 0x16, 0xf0, 0x73, 0xf0, 0xb0,
	0x50, 0xad, 0xd4, 0x1b, 0xba, 0x52, 0xaa, 0x34, 0x90, 0xfa, 0xa2, 0xa0, 0x1d, 0xd6, 0x4b, 0xd5,
	0xca, 0x50, 0xe3, 0xd6, 0xc0, 0x9d, 0xb1, 0xa5, 0x44, 0xf3, 0xee, 0x02, 0x79, 0x7c, 0xa6, 0x68,
	0xe0, 0x3a, 0xb8, 0x3f, 0x36, 0xb7, 0xa6, 0xe8, 0x8d, 0x52, 0xa3, 0x54, 0xad, 0x48, 0xd3, 0xeb,
	0x7f, 0xcd, 0x80, 0xec, 0xc8, 0xf7, 0x06, 0xbc, 0x5d, 0x7b, 0x55, 0xbd, 0xa0, 0xf2, 0xa2, 0x8a,
	0xa6, 0xa9, 0x1a, 0x2a, 0x57, 0x8b, 0xea, 0x50, 0xcd, 0x56, 0xc1, 0xf2, 0xb8, 0x42, 0xa2, 0x62,
	0x6b, 0xe0, 0xce, 0xd8, 0x3c, 0x51, 0xaf, 0x07, 0x60, 0x6d, 0x5c, 0xa6, 0xae, 0xee, 0xeb, 0x6a,
	0xbd, 0xce, 0x2b, 0x35, 0x05, 0x6e, 0x46, 0x93, 0x90, 0x8f, 0xae, 0x56, 0xdd, 0x1f, 0x3b, 0xc1,
	0x16, 0x81, 0x14, 0x67, 0x15, 0xd5, 0xdd, 0xc3, 0xfd, 0xaf, 0xa5, 0xcc, 0x98, 0xd4, 0x1d, 0x69,
	0x6a, 0x4c, 0xea, 0x63, 0x69, 0x7a, 0x4c, 0xea, 0xb6, 0x74, 0x63, 0x4c, 0x6a, 0x5e, 0xfa, 0x08,
	0x66, 0xc1, 0x6c, 0x9c, 0xaa, 0x55, 0xf7, 0xa5, 0x8f, 0x07, 0x0b, 0x56, 0xaa, 0x8d, 0x52, 0x41,
	0x95, 0x3e, 0xe1, 0x13, 0x3c, 0x4e, 0x3d, 0x52, 0xf4, 0x4a, 0xa9, 0xb2, 0x2f, 0xdd, 0x84, 0x0b,
	0x60, 0x3e, 0x4e, 0x56, 0x75, 0xbd, 0xaa, 0x4b, 0xb7, 0x06, 0x13, 0xf7, 0x94, 0x86, 0xa2, 0x49,
	0x60, 0x30, 0xb1, 0xa6, 0x54, 0x4a, 0x05, 0x69, 0x66, 0xfd, 0xdf, 0x33, 0x20, 0x3b, 0xf2, 0xa2,
	0xcd, 0x47, 0x8a, 0x17, 0x15, 0x38, 0xf4, 0x5c, 0xd5, 0x77, 0xab, 0xf5, 0x52, 0xe3, 0xe5, 0x50,
	0x3f, 0xdd, 0x03, 0x2b, 0xe3, 0x0a, 0x35, 0x54, 0xbd, 0xae, 0x4a, 0x19, 0x3e, 0x1e, 0xe3, 0xb2,
	0x8b, 0xea, 0x9e, 0x72, 0xa8, 0x35, 0x82, 0x01, 0x1b, 0x57, 0x20, 0xf8, 0x4b, 0x95, 0xa6, 0xd7,
	0xff, 0x92, 0x01, 0xb7, 0x93, 0x8f, 0xd6, 0x91, 0xc5, 0x7a, 0x43, 0x69, 0xa8, 0x65, 0xb5, 0x32,
	0xbc, 0x62, 0x97, 0x01, 0x1c, 0xcc, 0xae, 0x54, 0x2b, 0x6a, 0xe0, 0x1a, 0x06, 0xd3, 0x8b, 0x45,
	0x4d, 0x9a, 0x1a, 0x4d, 0x2e, 0x57, 0x8b, 0xd2, 0xf4, 0x68, 0xb2, 0xa2, 0x69, 0xd2, 0x8d, 0xf5,
	0xff, 0xcd, 0x80, 0xc5, 0xb1, 0x6f, 0xc0, 0x5f, 0x80, 0x4f, 0x1b, 0xba, 0x52, 0xa9, 0x2b, 0x05,
	0x3e, 0xf9, 0x51, 0xa9, 0x5e, 0xd5, 0x94, 0xc6, 0xe8, 0x8a, 0xfb, 0x03, 0xf8, 0x72, 0x7c, 0x31,
	0x5d, 0x55, 0x8a, 0xe8, 0xb0, 0x12, 0xac, 0xf2, 0x86, 0x5a, 0x94, 0x32, 0xf0, 0x11, 0xf8, 0xfc,
	0x37, 0xca, 0xc6, 0x25, 0xa7, 0xe0, 0x57, 0xe0, 0x8b, 0xab, 0x4a, 0xd6, 0x54, 0xa5, 0xa1, 0xec,
	0x6a, 0xaa, 0x10, 0x49, 0xd3, 0xf0, 0x4b, 0xb0, 0x3e, 0xbe, 0x68, 0x5d, 0xd5, 0x4b, 0x8a, 0x56,
	0x7a, 0xc5, 0x0b, 0x4b, 0x37, 0xd6, 0x7f, 0x06, 0x33, 0x89, 0x07, 0x59, 0xee, 0x0c, 0x76, 0x5f,
	0x36, 0x54, 0x05, 0x55, 0x0f, 0x1b, 0xb5, 0xc3, 0xc6, 0xe8, 0x5a, 0x19, 0xc8, 0x3d, 0x50, 0x5f,
	0x48, 0x19, 0x28, 0x83, 0xc5, 0x81, 0x54, 0xb5, 0x5e, 0x50, 0x6a, 0xbc, 0xbe, 0xeb, 0x3a, 0xb8,
	0xd5, 0x7f, 0x86, 0xe5, 0x4b, 0xfd, 0x45, 0x59, 0x43, 0xbb, 0xa5, 0x8a, 0xa2, 0xbf, 0x1c, 0xf5,
	0xf2, 0x89, 0xbc, 0x5d, 0xa5, 0xae, 0x3e, 0xd9, 0x91, 0x32, 0x10, 0x82, 0xb9, 0x44, 0x32, 0xb7,
	0x36, 0xb5, 0xfe, 0x42, 0x30, 0x83, 0x77, 0xd7, 0x88, 0x59, 0xad, 0x8d, 0x19, 0x82, 0x3b, 0x60,
	0x21, 0x91, 0x57, 0xac, 0x16, 0x0e, 0xf9, 0xf8, 0x4a, 0x19, 0x3e, 0x71, 0x12, 0x19, 0x85, 0x6a,
	0xa5, 0xc1, 0xd3, 0xa7, 0xb8, 0x8f, 0x9d, 0x1b, 0x7c, 0xd9, 0xe3, 0x93, 0x76, 0x57, 0x29, 0xfc,
	0x54, 0xd7, 0x94, 0xfa, 0x01, 0x7a, 0x76, 0xc8, 0x3d, 0xf2, 0xa0, 0x91, 0x05, 0x30, 0x3f, 0x54,
	0x20, 0x30, 0x30, 0xac, 0xaa, 0x56, 0xa4, 0x29, 0x5e, 0xa3, 0x91, 0xf4, 0xbd, 0x3d, 0x69, 0x1a,
	0x7e, 0x0a, 0xee, 0x0d, 0x67, 0xd4, 0x95, 0x3d, 0x15, 0xa9, 0x95, 0x42, 0xb5, 0xc8, 0x17, 0xfe,
	0x0d, 0xbe, 0x72, 0x67, 0x07, 0xa2, 0x28, 0x5e, 0xb7, 0x9a, 0xa6, 0x54, 0x50, 0x41, 0x29, 0x1c,
	0xa8, 0xe3, 0x7c, 0xab, 0x0c, 0x16, 0x87, 0x0b, 0x28, 0x87, 0x8d, 0xaa, 0x94, 0xe1, 0x93, 0x78,
	0x38, 0x27, 0x70, 0xa6, 0x85, 0xc3, 0x7a, 0xa3, 0x5a, 0x46, 0x3c, 0x53, 0x9a, 0xe2, 0x73, 0x68,
	0x7c, 0xb1, 0x7d, 0xb5, 0xa2, 0xea, 0xa5, 0x42, 0x50, 0x6e, 0x7a, 0xfd, 0xbf, 0x32, 0x60, 0x71,
	0xdc, 0xc9, 0x83, 0xcf, 0xec, 0xda, 0x3e, 0x3a, 0xe0, 0x3b, 0x87, 0x00, 0x09, 0x37, 0x88, 0x6a,
	0x7a, 0x69, 0x64, 0x31, 0x3f, 0x04, 0x77, 0xaf, 0x2c, 0xc9, 0xfb, 0x48, 0x38, 0x98, 0xab, 0x4b,
	0xf0, 0xda, 0xf2, 0x46, 0x5d, 0x55, 0xa0, 0xa8, 0x36, 0x94, 0x92, 0xa6, 0xf2, 0x85, 0xf1, 0x39,
	0x78, 0x78, 0x65, 0xb1, 0xc8, 0x19, 0xdd, 0x58, 0xff, 0xb7, 0x0c, 0x58, 0x1e, 0x1f, 0x73, 0xf1,
	0x46, 0xd5, 0x0f, 0x14, 0x5d, 0x2d, 0xa2, 0x9a, 0xae, 0x6a, 0x55, 0xa5, 0x88, 0xb4, 0xd2, 0xae,
	0xae, 0xe8, 0x25, 0xb5, 0x3e, 0xd4, 0xa8, 0xaf, 0xc0, 0x17, 0x57, 0x96, 0xe4, 0x23, 0x81, 0xd4,
	0x17, 0x35, 0x4d, 0x29, 0xf1, 0xbd, 0xee, 0xb7, 0x8a, 0x26, 0xab, 0x2b, 0x4d, 0xad, 0xff, 0xe7,
	0x14, 0x58, 0x1a, 0x3e, 0x70, 0xd5, 0x89, 0x9f, 0xdf, 0x86, 0x26, 0x90, 0x12, 0x51, 0xae, 0xc8,
	0x08, 0xff, 0x77, 0xcb, 0xb7, 0xef, 0x7d, 0x90, 0xd3, 0xe7, 0xe3, 0x58, 0x57, 0x24, 0xc1, 0x57,
	0x60, 0xa6, 0xe7, 0x11, 0x37, 0x32, 0x30, 0xf5, 0xa1, 0x06, 0x00, 0xa7, 0x85, 0xec, 0x5f, 0xc1,
	0x5c, 0x74, 0x19, 0x19, 0xe2, 0xa7, 0x3f, 0x14, 0x3f, 0x1b, 0x02, 0x83, 0x84, 0xdd, 0x7f, 0xc9,
	0x80, 0xaf, 0x06, 0x58, 0xd8, 0xa1, 0x57, 0xf2, 0x5e, 0x35, 0xda, 0xd4, 0xef, 0xf4, 0x9a, 0x9b,
	0x06, 0xeb, 0x6e, 0x05, 0xaa, 0x8d, 0xe0, 0xff, 0x1b, 0xb5, 0xd9, 0x46, 0x9b, 0xd8, 0xe2, 0xe8,
	0xbf, 0x35, 0xd1, 0xff, 0x84, 0xfa, 0x2e, 0x4e, 0x6c, 0x7e, 0x2c, 0x74, 0x8f, 0xff, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0xa9, 0x80, 0xc9, 0xb0, 0x44, 0x35, 0x00, 0x00,
}
