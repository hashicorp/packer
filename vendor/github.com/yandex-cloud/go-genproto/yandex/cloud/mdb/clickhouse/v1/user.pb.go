// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/clickhouse/v1/user.proto

package clickhouse

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserSettings_OverflowMode int32

const (
	UserSettings_OVERFLOW_MODE_UNSPECIFIED UserSettings_OverflowMode = 0
	UserSettings_OVERFLOW_MODE_THROW       UserSettings_OverflowMode = 1
	UserSettings_OVERFLOW_MODE_BREAK       UserSettings_OverflowMode = 2
)

var UserSettings_OverflowMode_name = map[int32]string{
	0: "OVERFLOW_MODE_UNSPECIFIED",
	1: "OVERFLOW_MODE_THROW",
	2: "OVERFLOW_MODE_BREAK",
}

var UserSettings_OverflowMode_value = map[string]int32{
	"OVERFLOW_MODE_UNSPECIFIED": 0,
	"OVERFLOW_MODE_THROW":       1,
	"OVERFLOW_MODE_BREAK":       2,
}

func (x UserSettings_OverflowMode) String() string {
	return proto.EnumName(UserSettings_OverflowMode_name, int32(x))
}

func (UserSettings_OverflowMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{3, 0}
}

type UserSettings_GroupByOverflowMode int32

const (
	UserSettings_GROUP_BY_OVERFLOW_MODE_UNSPECIFIED UserSettings_GroupByOverflowMode = 0
	UserSettings_GROUP_BY_OVERFLOW_MODE_THROW       UserSettings_GroupByOverflowMode = 1
	UserSettings_GROUP_BY_OVERFLOW_MODE_BREAK       UserSettings_GroupByOverflowMode = 2
	UserSettings_GROUP_BY_OVERFLOW_MODE_ANY         UserSettings_GroupByOverflowMode = 3
)

var UserSettings_GroupByOverflowMode_name = map[int32]string{
	0: "GROUP_BY_OVERFLOW_MODE_UNSPECIFIED",
	1: "GROUP_BY_OVERFLOW_MODE_THROW",
	2: "GROUP_BY_OVERFLOW_MODE_BREAK",
	3: "GROUP_BY_OVERFLOW_MODE_ANY",
}

var UserSettings_GroupByOverflowMode_value = map[string]int32{
	"GROUP_BY_OVERFLOW_MODE_UNSPECIFIED": 0,
	"GROUP_BY_OVERFLOW_MODE_THROW":       1,
	"GROUP_BY_OVERFLOW_MODE_BREAK":       2,
	"GROUP_BY_OVERFLOW_MODE_ANY":         3,
}

func (x UserSettings_GroupByOverflowMode) String() string {
	return proto.EnumName(UserSettings_GroupByOverflowMode_name, int32(x))
}

func (UserSettings_GroupByOverflowMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{3, 1}
}

type UserSettings_DistributedProductMode int32

const (
	UserSettings_DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED UserSettings_DistributedProductMode = 0
	// Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception).
	UserSettings_DISTRIBUTED_PRODUCT_MODE_DENY UserSettings_DistributedProductMode = 1
	//Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN.
	UserSettings_DISTRIBUTED_PRODUCT_MODE_LOCAL UserSettings_DistributedProductMode = 2
	//Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN.
	UserSettings_DISTRIBUTED_PRODUCT_MODE_GLOBAL UserSettings_DistributedProductMode = 3
	//Allows the use of these types of subqueries.
	UserSettings_DISTRIBUTED_PRODUCT_MODE_ALLOW UserSettings_DistributedProductMode = 4
)

var UserSettings_DistributedProductMode_name = map[int32]string{
	0: "DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED",
	1: "DISTRIBUTED_PRODUCT_MODE_DENY",
	2: "DISTRIBUTED_PRODUCT_MODE_LOCAL",
	3: "DISTRIBUTED_PRODUCT_MODE_GLOBAL",
	4: "DISTRIBUTED_PRODUCT_MODE_ALLOW",
}

var UserSettings_DistributedProductMode_value = map[string]int32{
	"DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED": 0,
	"DISTRIBUTED_PRODUCT_MODE_DENY":        1,
	"DISTRIBUTED_PRODUCT_MODE_LOCAL":       2,
	"DISTRIBUTED_PRODUCT_MODE_GLOBAL":      3,
	"DISTRIBUTED_PRODUCT_MODE_ALLOW":       4,
}

func (x UserSettings_DistributedProductMode) String() string {
	return proto.EnumName(UserSettings_DistributedProductMode_name, int32(x))
}

func (UserSettings_DistributedProductMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{3, 2}
}

// A ClickHouse User resource. For more information, see
// the [Developer's guide](/docs/managed-clickhouse/concepts).
type User struct {
	// Name of the ClickHouse user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the ClickHouse cluster the user belongs to.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Set of permissions granted to the user.
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Settings    *UserSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// Set of quotas assigned to the user.
	Quotas               []*UserQuota `protobuf:"bytes,5,rep,name=quotas,proto3" json:"quotas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *User) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *User) GetSettings() *UserSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *User) GetQuotas() []*UserQuota {
	if m != nil {
		return m.Quotas
	}
	return nil
}

type Permission struct {
	// Name of the database that the permission grants access to.
	DatabaseName         string   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Permission) Reset()         { *m = Permission{} }
func (m *Permission) String() string { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()    {}
func (*Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{1}
}

func (m *Permission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permission.Unmarshal(m, b)
}
func (m *Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permission.Marshal(b, m, deterministic)
}
func (m *Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission.Merge(m, src)
}
func (m *Permission) XXX_Size() int {
	return xxx_messageInfo_Permission.Size(m)
}
func (m *Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Permission proto.InternalMessageInfo

func (m *Permission) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

type UserSpec struct {
	// Name of the ClickHouse user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Password of the ClickHouse user.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Set of permissions to grant to the user.
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Settings    *UserSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// Set of quotas assigned to the user.
	Quotas               []*UserQuota `protobuf:"bytes,5,rep,name=quotas,proto3" json:"quotas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserSpec) Reset()         { *m = UserSpec{} }
func (m *UserSpec) String() string { return proto.CompactTextString(m) }
func (*UserSpec) ProtoMessage()    {}
func (*UserSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{2}
}

func (m *UserSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSpec.Unmarshal(m, b)
}
func (m *UserSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSpec.Marshal(b, m, deterministic)
}
func (m *UserSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSpec.Merge(m, src)
}
func (m *UserSpec) XXX_Size() int {
	return xxx_messageInfo_UserSpec.Size(m)
}
func (m *UserSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UserSpec proto.InternalMessageInfo

func (m *UserSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserSpec) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserSpec) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *UserSpec) GetSettings() *UserSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *UserSpec) GetQuotas() []*UserQuota {
	if m != nil {
		return m.Quotas
	}
	return nil
}

// ClickHouse user settings. Supported settings are a limited subset of all settings
// described in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/).
type UserSettings struct {
	// Restricts permissions for non-DDL queries. Possible values: 0 (default) — no restrictions,
	// 1 — only read data queries are allowed, 2 — read data and change settings queries are allowed.
	Readonly *wrappers.Int64Value `protobuf:"bytes,1,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// Whether DDL queries are allowed. Default value: false.
	AllowDdl *wrappers.BoolValue `protobuf:"bytes,2,opt,name=allow_ddl,json=allowDdl,proto3" json:"allow_ddl,omitempty"`
	// For INSERT queries in the replicated table, wait writing for the specified number of replicas and linearize
	// the addition of the data.
	InsertQuorum *wrappers.Int64Value `protobuf:"bytes,3,opt,name=insert_quorum,json=insertQuorum,proto3" json:"insert_quorum,omitempty"`
	// Connection timeout in milliseconds.
	ConnectTimeout *wrappers.Int64Value `protobuf:"bytes,39,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Receive timeout in milliseconds.
	ReceiveTimeout *wrappers.Int64Value `protobuf:"bytes,40,opt,name=receive_timeout,json=receiveTimeout,proto3" json:"receive_timeout,omitempty"`
	// Send timeout in milliseconds.
	SendTimeout *wrappers.Int64Value `protobuf:"bytes,41,opt,name=send_timeout,json=sendTimeout,proto3" json:"send_timeout,omitempty"`
	// Quorum write timeout in milliseconds. Default value: 60000.
	InsertQuorumTimeout *wrappers.Int64Value `protobuf:"bytes,4,opt,name=insert_quorum_timeout,json=insertQuorumTimeout,proto3" json:"insert_quorum_timeout,omitempty"`
	// For SELECT queries from the replicated table, throw an exception if the replica does not have a chunk written
	// with the quorum; do not read the parts that have not yet been written with the quorum.
	SelectSequentialConsistency *wrappers.BoolValue `protobuf:"bytes,5,opt,name=select_sequential_consistency,json=selectSequentialConsistency,proto3" json:"select_sequential_consistency,omitempty"`
	// Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used.
	// Default value: 300000.
	MaxReplicaDelayForDistributedQueries *wrappers.Int64Value `protobuf:"bytes,6,opt,name=max_replica_delay_for_distributed_queries,json=maxReplicaDelayForDistributedQueries,proto3" json:"max_replica_delay_for_distributed_queries,omitempty"`
	// Determine the behavior when all replicas for the queried table are stale. If enabled, the query will be
	// performed anyway. Otherwise, the error will be thrown.
	FallbackToStaleReplicasForDistributedQueries *wrappers.BoolValue `protobuf:"bytes,7,opt,name=fallback_to_stale_replicas_for_distributed_queries,json=fallbackToStaleReplicasForDistributedQueries,proto3" json:"fallback_to_stale_replicas_for_distributed_queries,omitempty"`
	// Wait mode for ALTER queries on replicated tables.
	// Possible values: 0 - do not wait, 1 - wait for execution only of itself, 2 - wait for everyone.
	ReplicationAlterPartitionsSync *wrappers.Int64Value `protobuf:"bytes,42,opt,name=replication_alter_partitions_sync,json=replicationAlterPartitionsSync,proto3" json:"replication_alter_partitions_sync,omitempty"`
	// Determine the behavior of distributed subqueries. Possible values: DISTRIBUTED_PRODUCT_MODE_DENY,
	// DISTRIBUTED_PRODUCT_MODE_LOCAL, DISTRIBUTED_PRODUCT_MODE_GLOBAL, DISTRIBUTED_PRODUCT_MODE_ALLOW.
	DistributedProductMode UserSettings_DistributedProductMode `protobuf:"varint,43,opt,name=distributed_product_mode,json=distributedProductMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_DistributedProductMode" json:"distributed_product_mode,omitempty"`
	// Whether the memory-saving mode of distributed aggregation is enabled.
	DistributedAggregationMemoryEfficient *wrappers.BoolValue `protobuf:"bytes,72,opt,name=distributed_aggregation_memory_efficient,json=distributedAggregationMemoryEfficient,proto3" json:"distributed_aggregation_memory_efficient,omitempty"`
	// Timeout for DDL queries, in milliseconds.
	DistributedDdlTaskTimeout *wrappers.Int64Value `protobuf:"bytes,73,opt,name=distributed_ddl_task_timeout,json=distributedDdlTaskTimeout,proto3" json:"distributed_ddl_task_timeout,omitempty"`
	// Whether unavailable shards can be skipped.
	SkipUnavailableShards *wrappers.BoolValue `protobuf:"bytes,81,opt,name=skip_unavailable_shards,json=skipUnavailableShards,proto3" json:"skip_unavailable_shards,omitempty"`
	// Whether query compilation is enabled.
	Compile *wrappers.BoolValue `protobuf:"bytes,44,opt,name=compile,proto3" json:"compile,omitempty"`
	// The number of structurally identical queries before they are compiled.
	MinCountToCompile *wrappers.Int64Value `protobuf:"bytes,45,opt,name=min_count_to_compile,json=minCountToCompile,proto3" json:"min_count_to_compile,omitempty"`
	// Whether expression compilation is enabled.
	CompileExpressions *wrappers.BoolValue `protobuf:"bytes,46,opt,name=compile_expressions,json=compileExpressions,proto3" json:"compile_expressions,omitempty"`
	// The number of identical expressions before they are compiled.
	MinCountToCompileExpression *wrappers.Int64Value `protobuf:"bytes,47,opt,name=min_count_to_compile_expression,json=minCountToCompileExpression,proto3" json:"min_count_to_compile_expression,omitempty"`
	// The maximum block size for reading.
	MaxBlockSize *wrappers.Int64Value `protobuf:"bytes,9,opt,name=max_block_size,json=maxBlockSize,proto3" json:"max_block_size,omitempty"`
	// Squash blocks passed to INSERT query to specified size in rows, if blocks are not big enough. If set to 0,
	// blocks will never be squashed.
	MinInsertBlockSizeRows *wrappers.Int64Value `protobuf:"bytes,48,opt,name=min_insert_block_size_rows,json=minInsertBlockSizeRows,proto3" json:"min_insert_block_size_rows,omitempty"`
	// Squash blocks passed to INSERT query to specified size in bytes, if blocks are not big enough. If set to 0,
	// blocks will never be squashed.
	MinInsertBlockSizeBytes *wrappers.Int64Value `protobuf:"bytes,49,opt,name=min_insert_block_size_bytes,json=minInsertBlockSizeBytes,proto3" json:"min_insert_block_size_bytes,omitempty"`
	// The maximum block size for insertion.
	MaxInsertBlockSize *wrappers.Int64Value `protobuf:"bytes,10,opt,name=max_insert_block_size,json=maxInsertBlockSize,proto3" json:"max_insert_block_size,omitempty"`
	// The minimum number of bytes for reading the data with O_DIRECT option during SELECT queries execution.
	MinBytesToUseDirectIo *wrappers.Int64Value `protobuf:"bytes,50,opt,name=min_bytes_to_use_direct_io,json=minBytesToUseDirectIo,proto3" json:"min_bytes_to_use_direct_io,omitempty"`
	// Whether to use the cache of uncompressed blocks.
	UseUncompressedCache *wrappers.BoolValue `protobuf:"bytes,51,opt,name=use_uncompressed_cache,json=useUncompressedCache,proto3" json:"use_uncompressed_cache,omitempty"`
	// The maximum request size in rows to use the cache of uncompressed data. The cache is not used for requests larger
	// than the specified value.
	MergeTreeMaxRowsToUseCache *wrappers.Int64Value `protobuf:"bytes,52,opt,name=merge_tree_max_rows_to_use_cache,json=mergeTreeMaxRowsToUseCache,proto3" json:"merge_tree_max_rows_to_use_cache,omitempty"`
	// The maximum request size in bytes to use the cache of uncompressed data. The cache is not used for requests larger
	// than the specified value.
	MergeTreeMaxBytesToUseCache *wrappers.Int64Value `protobuf:"bytes,53,opt,name=merge_tree_max_bytes_to_use_cache,json=mergeTreeMaxBytesToUseCache,proto3" json:"merge_tree_max_bytes_to_use_cache,omitempty"`
	// The minimum number of rows to be read from a file to enable concurrent read.
	MergeTreeMinRowsForConcurrentRead *wrappers.Int64Value `protobuf:"bytes,54,opt,name=merge_tree_min_rows_for_concurrent_read,json=mergeTreeMinRowsForConcurrentRead,proto3" json:"merge_tree_min_rows_for_concurrent_read,omitempty"`
	// The minimum number of bytes to be read from a file to enable concurrent read.
	MergeTreeMinBytesForConcurrentRead *wrappers.Int64Value `protobuf:"bytes,55,opt,name=merge_tree_min_bytes_for_concurrent_read,json=mergeTreeMinBytesForConcurrentRead,proto3" json:"merge_tree_min_bytes_for_concurrent_read,omitempty"`
	MaxBytesBeforeExternalGroupBy      *wrappers.Int64Value `protobuf:"bytes,74,opt,name=max_bytes_before_external_group_by,json=maxBytesBeforeExternalGroupBy,proto3" json:"max_bytes_before_external_group_by,omitempty"`
	MaxBytesBeforeExternalSort         *wrappers.Int64Value `protobuf:"bytes,75,opt,name=max_bytes_before_external_sort,json=maxBytesBeforeExternalSort,proto3" json:"max_bytes_before_external_sort,omitempty"`
	GroupByTwoLevelThreshold           *wrappers.Int64Value `protobuf:"bytes,76,opt,name=group_by_two_level_threshold,json=groupByTwoLevelThreshold,proto3" json:"group_by_two_level_threshold,omitempty"`
	GroupByTwoLevelThresholdBytes      *wrappers.Int64Value `protobuf:"bytes,77,opt,name=group_by_two_level_threshold_bytes,json=groupByTwoLevelThresholdBytes,proto3" json:"group_by_two_level_threshold_bytes,omitempty"`
	// Priority of the query.
	Priority *wrappers.Int64Value `protobuf:"bytes,56,opt,name=priority,proto3" json:"priority,omitempty"`
	// The maximum number of threads to execute the request.
	MaxThreads *wrappers.Int64Value `protobuf:"bytes,8,opt,name=max_threads,json=maxThreads,proto3" json:"max_threads,omitempty"`
	// The maximum memory usage for processing of a single query.
	MaxMemoryUsage *wrappers.Int64Value `protobuf:"bytes,11,opt,name=max_memory_usage,json=maxMemoryUsage,proto3" json:"max_memory_usage,omitempty"`
	// The maximum memory usage for processing all concurrently running queries for the user.
	MaxMemoryUsageForUser *wrappers.Int64Value `protobuf:"bytes,12,opt,name=max_memory_usage_for_user,json=maxMemoryUsageForUser,proto3" json:"max_memory_usage_for_user,omitempty"`
	// The maximum speed of data exchange over the network in bytes per second for a query.
	MaxNetworkBandwidth *wrappers.Int64Value `protobuf:"bytes,57,opt,name=max_network_bandwidth,json=maxNetworkBandwidth,proto3" json:"max_network_bandwidth,omitempty"`
	// The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
	MaxNetworkBandwidthForUser *wrappers.Int64Value `protobuf:"bytes,58,opt,name=max_network_bandwidth_for_user,json=maxNetworkBandwidthForUser,proto3" json:"max_network_bandwidth_for_user,omitempty"`
	// Disables query execution if the index can’t be used by date.
	ForceIndexByDate *wrappers.BoolValue `protobuf:"bytes,59,opt,name=force_index_by_date,json=forceIndexByDate,proto3" json:"force_index_by_date,omitempty"`
	// Disables query execution if indexing by the primary key is not possible.
	ForcePrimaryKey *wrappers.BoolValue `protobuf:"bytes,60,opt,name=force_primary_key,json=forcePrimaryKey,proto3" json:"force_primary_key,omitempty"`
	// The maximum number of rows that can be read from a table when running a query.
	MaxRowsToRead *wrappers.Int64Value `protobuf:"bytes,13,opt,name=max_rows_to_read,json=maxRowsToRead,proto3" json:"max_rows_to_read,omitempty"`
	// The maximum number of bytes (uncompressed data) that can be read from a table when running a query.
	MaxBytesToRead *wrappers.Int64Value `protobuf:"bytes,14,opt,name=max_bytes_to_read,json=maxBytesToRead,proto3" json:"max_bytes_to_read,omitempty"`
	// Determine the behavior on exceeding max_rows_to_read or max_bytes_to_read limit.
	// Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
	ReadOverflowMode UserSettings_OverflowMode `protobuf:"varint,15,opt,name=read_overflow_mode,json=readOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"read_overflow_mode,omitempty"`
	// The maximum number of unique keys received from aggregation.
	MaxRowsToGroupBy *wrappers.Int64Value `protobuf:"bytes,16,opt,name=max_rows_to_group_by,json=maxRowsToGroupBy,proto3" json:"max_rows_to_group_by,omitempty"`
	// Determine the behavior on exceeding max_rows_to_group_by limit. Possible values: GROUP_BY_OVERFLOW_MODE_THROW,
	// GROUP_BY_OVERFLOW_MODE_BREAK, GROUP_BY_OVERFLOW_MODE_ANY.
	GroupByOverflowMode UserSettings_GroupByOverflowMode `protobuf:"varint,17,opt,name=group_by_overflow_mode,json=groupByOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_GroupByOverflowMode" json:"group_by_overflow_mode,omitempty"`
	// The maximum number of rows before sorting.
	MaxRowsToSort *wrappers.Int64Value `protobuf:"bytes,18,opt,name=max_rows_to_sort,json=maxRowsToSort,proto3" json:"max_rows_to_sort,omitempty"`
	// The maximum number of bytes before sorting.
	MaxBytesToSort *wrappers.Int64Value `protobuf:"bytes,19,opt,name=max_bytes_to_sort,json=maxBytesToSort,proto3" json:"max_bytes_to_sort,omitempty"`
	// Determine the behavior on exceeding max_rows_to_sort or max_bytes_to_sort limit.
	// Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
	SortOverflowMode UserSettings_OverflowMode `protobuf:"varint,20,opt,name=sort_overflow_mode,json=sortOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"sort_overflow_mode,omitempty"`
	// Limit on the number of rows in the result.
	MaxResultRows *wrappers.Int64Value `protobuf:"bytes,21,opt,name=max_result_rows,json=maxResultRows,proto3" json:"max_result_rows,omitempty"`
	// Limit on the number of bytes in the result.
	MaxResultBytes *wrappers.Int64Value `protobuf:"bytes,22,opt,name=max_result_bytes,json=maxResultBytes,proto3" json:"max_result_bytes,omitempty"`
	// Determine the behavior on exceeding max_result_rows or max_result_bytes limit.
	// Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
	ResultOverflowMode UserSettings_OverflowMode `protobuf:"varint,23,opt,name=result_overflow_mode,json=resultOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"result_overflow_mode,omitempty"`
	// The maximum number of different rows when using DISTINCT.
	MaxRowsInDistinct *wrappers.Int64Value `protobuf:"bytes,24,opt,name=max_rows_in_distinct,json=maxRowsInDistinct,proto3" json:"max_rows_in_distinct,omitempty"`
	// The maximum number of bytes used by a hash table when using DISTINCT.
	MaxBytesInDistinct *wrappers.Int64Value `protobuf:"bytes,25,opt,name=max_bytes_in_distinct,json=maxBytesInDistinct,proto3" json:"max_bytes_in_distinct,omitempty"`
	// Determine the behavior on exceeding max_rows_in_distinct or max_bytes_in_distinct limit.
	// Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
	DistinctOverflowMode UserSettings_OverflowMode `protobuf:"varint,26,opt,name=distinct_overflow_mode,json=distinctOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"distinct_overflow_mode,omitempty"`
	// The maximum number of rows that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.
	MaxRowsToTransfer *wrappers.Int64Value `protobuf:"bytes,27,opt,name=max_rows_to_transfer,json=maxRowsToTransfer,proto3" json:"max_rows_to_transfer,omitempty"`
	// The maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
	// table when using GLOBAL IN.
	MaxBytesToTransfer *wrappers.Int64Value `protobuf:"bytes,28,opt,name=max_bytes_to_transfer,json=maxBytesToTransfer,proto3" json:"max_bytes_to_transfer,omitempty"`
	// Determine the behavior on exceeding max_rows_to_transfer or max_bytes_to_transfer limit.
	// Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
	TransferOverflowMode UserSettings_OverflowMode `protobuf:"varint,29,opt,name=transfer_overflow_mode,json=transferOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"transfer_overflow_mode,omitempty"`
	// The maximum query execution time in milliseconds.
	MaxExecutionTime *wrappers.Int64Value `protobuf:"bytes,30,opt,name=max_execution_time,json=maxExecutionTime,proto3" json:"max_execution_time,omitempty"`
	// Determine the behavior on exceeding max_execution_time limit.
	// Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
	TimeoutOverflowMode UserSettings_OverflowMode `protobuf:"varint,31,opt,name=timeout_overflow_mode,json=timeoutOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"timeout_overflow_mode,omitempty"`
	// The maximum number of columns that can be read from a table in a single query.
	MaxColumnsToRead *wrappers.Int64Value `protobuf:"bytes,32,opt,name=max_columns_to_read,json=maxColumnsToRead,proto3" json:"max_columns_to_read,omitempty"`
	// The maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
	MaxTemporaryColumns *wrappers.Int64Value `protobuf:"bytes,33,opt,name=max_temporary_columns,json=maxTemporaryColumns,proto3" json:"max_temporary_columns,omitempty"`
	// The maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
	MaxTemporaryNonConstColumns *wrappers.Int64Value `protobuf:"bytes,34,opt,name=max_temporary_non_const_columns,json=maxTemporaryNonConstColumns,proto3" json:"max_temporary_non_const_columns,omitempty"`
	// The maximum part of a query that can be taken to RAM for parsing with the SQL parser, in bytes. Default value: 262144.
	MaxQuerySize *wrappers.Int64Value `protobuf:"bytes,35,opt,name=max_query_size,json=maxQuerySize,proto3" json:"max_query_size,omitempty"`
	// The maximum depth of query syntax tree. Default value: 1000.
	MaxAstDepth *wrappers.Int64Value `protobuf:"bytes,36,opt,name=max_ast_depth,json=maxAstDepth,proto3" json:"max_ast_depth,omitempty"`
	// The maximum size of query syntax tree in number of nodes. Default value: 50000.
	MaxAstElements *wrappers.Int64Value `protobuf:"bytes,37,opt,name=max_ast_elements,json=maxAstElements,proto3" json:"max_ast_elements,omitempty"`
	// The maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk. Default value: 500000.
	MaxExpandedAstElements *wrappers.Int64Value `protobuf:"bytes,38,opt,name=max_expanded_ast_elements,json=maxExpandedAstElements,proto3" json:"max_expanded_ast_elements,omitempty"`
	// Enables or disables the full SQL parser if the fast stream parser cannot parse the data.
	InputFormatValuesInterpretExpressions *wrappers.BoolValue `protobuf:"bytes,61,opt,name=input_format_values_interpret_expressions,json=inputFormatValuesInterpretExpressions,proto3" json:"input_format_values_interpret_expressions,omitempty"`
	// When performing INSERT queries, replace omitted input column values with default values of the respective columns.
	InputFormatDefaultsForOmittedFields *wrappers.BoolValue `protobuf:"bytes,62,opt,name=input_format_defaults_for_omitted_fields,json=inputFormatDefaultsForOmittedFields,proto3" json:"input_format_defaults_for_omitted_fields,omitempty"`
	// Whether quoting of 64-bit integers is enabled in JSON output format.
	OutputFormatJsonQuote_64BitIntegers *wrappers.BoolValue `protobuf:"bytes,63,opt,name=output_format_json_quote_64bit_integers,json=outputFormatJsonQuote64bitIntegers,proto3" json:"output_format_json_quote_64bit_integers,omitempty"`
	// Whether output of special floating-point values (+nan, -nan, +inf and -inf) is enabled in JSON output format.
	OutputFormatJsonQuoteDenormals *wrappers.BoolValue `protobuf:"bytes,64,opt,name=output_format_json_quote_denormals,json=outputFormatJsonQuoteDenormals,proto3" json:"output_format_json_quote_denormals,omitempty"`
	// Whether LowCardinality type is enabled in Native format.
	LowCardinalityAllowInNativeFormat *wrappers.BoolValue `protobuf:"bytes,78,opt,name=low_cardinality_allow_in_native_format,json=lowCardinalityAllowInNativeFormat,proto3" json:"low_cardinality_allow_in_native_format,omitempty"`
	// Return empty result when aggregating without keys on empty set.
	EmptyResultForAggregationByEmptySet *wrappers.BoolValue `protobuf:"bytes,79,opt,name=empty_result_for_aggregation_by_empty_set,json=emptyResultForAggregationByEmptySet,proto3" json:"empty_result_for_aggregation_by_empty_set,omitempty"`
	// HTTP connection timeout, in milliseconds.
	HttpConnectionTimeout *wrappers.Int64Value `protobuf:"bytes,65,opt,name=http_connection_timeout,json=httpConnectionTimeout,proto3" json:"http_connection_timeout,omitempty"`
	// HTTP receive timeout, in milliseconds.
	HttpReceiveTimeout *wrappers.Int64Value `protobuf:"bytes,66,opt,name=http_receive_timeout,json=httpReceiveTimeout,proto3" json:"http_receive_timeout,omitempty"`
	// HTTP send timeout, in milliseconds.
	HttpSendTimeout *wrappers.Int64Value `protobuf:"bytes,67,opt,name=http_send_timeout,json=httpSendTimeout,proto3" json:"http_send_timeout,omitempty"`
	// Whether data compression is enabled in HTTP responses.
	EnableHttpCompression *wrappers.BoolValue `protobuf:"bytes,68,opt,name=enable_http_compression,json=enableHttpCompression,proto3" json:"enable_http_compression,omitempty"`
	// Whether progress notifications using X-ClickHouse-Progress headers are enabled. Default value: false.
	SendProgressInHttpHeaders *wrappers.BoolValue `protobuf:"bytes,69,opt,name=send_progress_in_http_headers,json=sendProgressInHttpHeaders,proto3" json:"send_progress_in_http_headers,omitempty"`
	// Minimum interval between progress notifications, in milliseconds. Default value: 100.
	HttpHeadersProgressInterval *wrappers.Int64Value `protobuf:"bytes,70,opt,name=http_headers_progress_interval,json=httpHeadersProgressInterval,proto3" json:"http_headers_progress_interval,omitempty"`
	// Whether CORS header in HTTP responses is enabled. Default value: false.
	AddHttpCorsHeader    *wrappers.BoolValue `protobuf:"bytes,71,opt,name=add_http_cors_header,json=addHttpCorsHeader,proto3" json:"add_http_cors_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UserSettings) Reset()         { *m = UserSettings{} }
func (m *UserSettings) String() string { return proto.CompactTextString(m) }
func (*UserSettings) ProtoMessage()    {}
func (*UserSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{3}
}

func (m *UserSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSettings.Unmarshal(m, b)
}
func (m *UserSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSettings.Marshal(b, m, deterministic)
}
func (m *UserSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSettings.Merge(m, src)
}
func (m *UserSettings) XXX_Size() int {
	return xxx_messageInfo_UserSettings.Size(m)
}
func (m *UserSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSettings.DiscardUnknown(m)
}

var xxx_messageInfo_UserSettings proto.InternalMessageInfo

func (m *UserSettings) GetReadonly() *wrappers.Int64Value {
	if m != nil {
		return m.Readonly
	}
	return nil
}

func (m *UserSettings) GetAllowDdl() *wrappers.BoolValue {
	if m != nil {
		return m.AllowDdl
	}
	return nil
}

func (m *UserSettings) GetInsertQuorum() *wrappers.Int64Value {
	if m != nil {
		return m.InsertQuorum
	}
	return nil
}

func (m *UserSettings) GetConnectTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *UserSettings) GetReceiveTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.ReceiveTimeout
	}
	return nil
}

func (m *UserSettings) GetSendTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.SendTimeout
	}
	return nil
}

func (m *UserSettings) GetInsertQuorumTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.InsertQuorumTimeout
	}
	return nil
}

func (m *UserSettings) GetSelectSequentialConsistency() *wrappers.BoolValue {
	if m != nil {
		return m.SelectSequentialConsistency
	}
	return nil
}

func (m *UserSettings) GetMaxReplicaDelayForDistributedQueries() *wrappers.Int64Value {
	if m != nil {
		return m.MaxReplicaDelayForDistributedQueries
	}
	return nil
}

func (m *UserSettings) GetFallbackToStaleReplicasForDistributedQueries() *wrappers.BoolValue {
	if m != nil {
		return m.FallbackToStaleReplicasForDistributedQueries
	}
	return nil
}

func (m *UserSettings) GetReplicationAlterPartitionsSync() *wrappers.Int64Value {
	if m != nil {
		return m.ReplicationAlterPartitionsSync
	}
	return nil
}

func (m *UserSettings) GetDistributedProductMode() UserSettings_DistributedProductMode {
	if m != nil {
		return m.DistributedProductMode
	}
	return UserSettings_DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED
}

func (m *UserSettings) GetDistributedAggregationMemoryEfficient() *wrappers.BoolValue {
	if m != nil {
		return m.DistributedAggregationMemoryEfficient
	}
	return nil
}

func (m *UserSettings) GetDistributedDdlTaskTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.DistributedDdlTaskTimeout
	}
	return nil
}

func (m *UserSettings) GetSkipUnavailableShards() *wrappers.BoolValue {
	if m != nil {
		return m.SkipUnavailableShards
	}
	return nil
}

func (m *UserSettings) GetCompile() *wrappers.BoolValue {
	if m != nil {
		return m.Compile
	}
	return nil
}

func (m *UserSettings) GetMinCountToCompile() *wrappers.Int64Value {
	if m != nil {
		return m.MinCountToCompile
	}
	return nil
}

func (m *UserSettings) GetCompileExpressions() *wrappers.BoolValue {
	if m != nil {
		return m.CompileExpressions
	}
	return nil
}

func (m *UserSettings) GetMinCountToCompileExpression() *wrappers.Int64Value {
	if m != nil {
		return m.MinCountToCompileExpression
	}
	return nil
}

func (m *UserSettings) GetMaxBlockSize() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBlockSize
	}
	return nil
}

func (m *UserSettings) GetMinInsertBlockSizeRows() *wrappers.Int64Value {
	if m != nil {
		return m.MinInsertBlockSizeRows
	}
	return nil
}

func (m *UserSettings) GetMinInsertBlockSizeBytes() *wrappers.Int64Value {
	if m != nil {
		return m.MinInsertBlockSizeBytes
	}
	return nil
}

func (m *UserSettings) GetMaxInsertBlockSize() *wrappers.Int64Value {
	if m != nil {
		return m.MaxInsertBlockSize
	}
	return nil
}

func (m *UserSettings) GetMinBytesToUseDirectIo() *wrappers.Int64Value {
	if m != nil {
		return m.MinBytesToUseDirectIo
	}
	return nil
}

func (m *UserSettings) GetUseUncompressedCache() *wrappers.BoolValue {
	if m != nil {
		return m.UseUncompressedCache
	}
	return nil
}

func (m *UserSettings) GetMergeTreeMaxRowsToUseCache() *wrappers.Int64Value {
	if m != nil {
		return m.MergeTreeMaxRowsToUseCache
	}
	return nil
}

func (m *UserSettings) GetMergeTreeMaxBytesToUseCache() *wrappers.Int64Value {
	if m != nil {
		return m.MergeTreeMaxBytesToUseCache
	}
	return nil
}

func (m *UserSettings) GetMergeTreeMinRowsForConcurrentRead() *wrappers.Int64Value {
	if m != nil {
		return m.MergeTreeMinRowsForConcurrentRead
	}
	return nil
}

func (m *UserSettings) GetMergeTreeMinBytesForConcurrentRead() *wrappers.Int64Value {
	if m != nil {
		return m.MergeTreeMinBytesForConcurrentRead
	}
	return nil
}

func (m *UserSettings) GetMaxBytesBeforeExternalGroupBy() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesBeforeExternalGroupBy
	}
	return nil
}

func (m *UserSettings) GetMaxBytesBeforeExternalSort() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesBeforeExternalSort
	}
	return nil
}

func (m *UserSettings) GetGroupByTwoLevelThreshold() *wrappers.Int64Value {
	if m != nil {
		return m.GroupByTwoLevelThreshold
	}
	return nil
}

func (m *UserSettings) GetGroupByTwoLevelThresholdBytes() *wrappers.Int64Value {
	if m != nil {
		return m.GroupByTwoLevelThresholdBytes
	}
	return nil
}

func (m *UserSettings) GetPriority() *wrappers.Int64Value {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *UserSettings) GetMaxThreads() *wrappers.Int64Value {
	if m != nil {
		return m.MaxThreads
	}
	return nil
}

func (m *UserSettings) GetMaxMemoryUsage() *wrappers.Int64Value {
	if m != nil {
		return m.MaxMemoryUsage
	}
	return nil
}

func (m *UserSettings) GetMaxMemoryUsageForUser() *wrappers.Int64Value {
	if m != nil {
		return m.MaxMemoryUsageForUser
	}
	return nil
}

func (m *UserSettings) GetMaxNetworkBandwidth() *wrappers.Int64Value {
	if m != nil {
		return m.MaxNetworkBandwidth
	}
	return nil
}

func (m *UserSettings) GetMaxNetworkBandwidthForUser() *wrappers.Int64Value {
	if m != nil {
		return m.MaxNetworkBandwidthForUser
	}
	return nil
}

func (m *UserSettings) GetForceIndexByDate() *wrappers.BoolValue {
	if m != nil {
		return m.ForceIndexByDate
	}
	return nil
}

func (m *UserSettings) GetForcePrimaryKey() *wrappers.BoolValue {
	if m != nil {
		return m.ForcePrimaryKey
	}
	return nil
}

func (m *UserSettings) GetMaxRowsToRead() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsToRead
	}
	return nil
}

func (m *UserSettings) GetMaxBytesToRead() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesToRead
	}
	return nil
}

func (m *UserSettings) GetReadOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.ReadOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxRowsToGroupBy() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsToGroupBy
	}
	return nil
}

func (m *UserSettings) GetGroupByOverflowMode() UserSettings_GroupByOverflowMode {
	if m != nil {
		return m.GroupByOverflowMode
	}
	return UserSettings_GROUP_BY_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxRowsToSort() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsToSort
	}
	return nil
}

func (m *UserSettings) GetMaxBytesToSort() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesToSort
	}
	return nil
}

func (m *UserSettings) GetSortOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.SortOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxResultRows() *wrappers.Int64Value {
	if m != nil {
		return m.MaxResultRows
	}
	return nil
}

func (m *UserSettings) GetMaxResultBytes() *wrappers.Int64Value {
	if m != nil {
		return m.MaxResultBytes
	}
	return nil
}

func (m *UserSettings) GetResultOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.ResultOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxRowsInDistinct() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsInDistinct
	}
	return nil
}

func (m *UserSettings) GetMaxBytesInDistinct() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesInDistinct
	}
	return nil
}

func (m *UserSettings) GetDistinctOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.DistinctOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxRowsToTransfer() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsToTransfer
	}
	return nil
}

func (m *UserSettings) GetMaxBytesToTransfer() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesToTransfer
	}
	return nil
}

func (m *UserSettings) GetTransferOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.TransferOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxExecutionTime() *wrappers.Int64Value {
	if m != nil {
		return m.MaxExecutionTime
	}
	return nil
}

func (m *UserSettings) GetTimeoutOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.TimeoutOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxColumnsToRead() *wrappers.Int64Value {
	if m != nil {
		return m.MaxColumnsToRead
	}
	return nil
}

func (m *UserSettings) GetMaxTemporaryColumns() *wrappers.Int64Value {
	if m != nil {
		return m.MaxTemporaryColumns
	}
	return nil
}

func (m *UserSettings) GetMaxTemporaryNonConstColumns() *wrappers.Int64Value {
	if m != nil {
		return m.MaxTemporaryNonConstColumns
	}
	return nil
}

func (m *UserSettings) GetMaxQuerySize() *wrappers.Int64Value {
	if m != nil {
		return m.MaxQuerySize
	}
	return nil
}

func (m *UserSettings) GetMaxAstDepth() *wrappers.Int64Value {
	if m != nil {
		return m.MaxAstDepth
	}
	return nil
}

func (m *UserSettings) GetMaxAstElements() *wrappers.Int64Value {
	if m != nil {
		return m.MaxAstElements
	}
	return nil
}

func (m *UserSettings) GetMaxExpandedAstElements() *wrappers.Int64Value {
	if m != nil {
		return m.MaxExpandedAstElements
	}
	return nil
}

func (m *UserSettings) GetInputFormatValuesInterpretExpressions() *wrappers.BoolValue {
	if m != nil {
		return m.InputFormatValuesInterpretExpressions
	}
	return nil
}

func (m *UserSettings) GetInputFormatDefaultsForOmittedFields() *wrappers.BoolValue {
	if m != nil {
		return m.InputFormatDefaultsForOmittedFields
	}
	return nil
}

func (m *UserSettings) GetOutputFormatJsonQuote_64BitIntegers() *wrappers.BoolValue {
	if m != nil {
		return m.OutputFormatJsonQuote_64BitIntegers
	}
	return nil
}

func (m *UserSettings) GetOutputFormatJsonQuoteDenormals() *wrappers.BoolValue {
	if m != nil {
		return m.OutputFormatJsonQuoteDenormals
	}
	return nil
}

func (m *UserSettings) GetLowCardinalityAllowInNativeFormat() *wrappers.BoolValue {
	if m != nil {
		return m.LowCardinalityAllowInNativeFormat
	}
	return nil
}

func (m *UserSettings) GetEmptyResultForAggregationByEmptySet() *wrappers.BoolValue {
	if m != nil {
		return m.EmptyResultForAggregationByEmptySet
	}
	return nil
}

func (m *UserSettings) GetHttpConnectionTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.HttpConnectionTimeout
	}
	return nil
}

func (m *UserSettings) GetHttpReceiveTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.HttpReceiveTimeout
	}
	return nil
}

func (m *UserSettings) GetHttpSendTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.HttpSendTimeout
	}
	return nil
}

func (m *UserSettings) GetEnableHttpCompression() *wrappers.BoolValue {
	if m != nil {
		return m.EnableHttpCompression
	}
	return nil
}

func (m *UserSettings) GetSendProgressInHttpHeaders() *wrappers.BoolValue {
	if m != nil {
		return m.SendProgressInHttpHeaders
	}
	return nil
}

func (m *UserSettings) GetHttpHeadersProgressInterval() *wrappers.Int64Value {
	if m != nil {
		return m.HttpHeadersProgressInterval
	}
	return nil
}

func (m *UserSettings) GetAddHttpCorsHeader() *wrappers.BoolValue {
	if m != nil {
		return m.AddHttpCorsHeader
	}
	return nil
}

// ClickHouse quota representation. Each quota associated with an user and limits it resource usage for an interval.
// See in-depth description [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/quotas/).
type UserQuota struct {
	// Duration of interval for quota in milliseconds.
	// Minimal value is 1 second.
	IntervalDuration *wrappers.Int64Value `protobuf:"bytes,1,opt,name=interval_duration,json=intervalDuration,proto3" json:"interval_duration,omitempty"`
	// The total number of queries.
	// 0 - unlimited.
	Queries *wrappers.Int64Value `protobuf:"bytes,2,opt,name=queries,proto3" json:"queries,omitempty"`
	// The number of queries that threw exception.
	// 0 - unlimited.
	Errors *wrappers.Int64Value `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
	// The total number of rows given as the result..
	// 0 - unlimited.
	ResultRows *wrappers.Int64Value `protobuf:"bytes,4,opt,name=result_rows,json=resultRows,proto3" json:"result_rows,omitempty"`
	// The total number of source rows read from tables for running the query, on all remote servers.
	// 0 - unlimited.
	ReadRows *wrappers.Int64Value `protobuf:"bytes,5,opt,name=read_rows,json=readRows,proto3" json:"read_rows,omitempty"`
	// The total query execution time, in milliseconds (wall time).
	// 0 - unlimited.
	ExecutionTime        *wrappers.Int64Value `protobuf:"bytes,6,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserQuota) Reset()         { *m = UserQuota{} }
func (m *UserQuota) String() string { return proto.CompactTextString(m) }
func (*UserQuota) ProtoMessage()    {}
func (*UserQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{4}
}

func (m *UserQuota) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQuota.Unmarshal(m, b)
}
func (m *UserQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQuota.Marshal(b, m, deterministic)
}
func (m *UserQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQuota.Merge(m, src)
}
func (m *UserQuota) XXX_Size() int {
	return xxx_messageInfo_UserQuota.Size(m)
}
func (m *UserQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQuota.DiscardUnknown(m)
}

var xxx_messageInfo_UserQuota proto.InternalMessageInfo

func (m *UserQuota) GetIntervalDuration() *wrappers.Int64Value {
	if m != nil {
		return m.IntervalDuration
	}
	return nil
}

func (m *UserQuota) GetQueries() *wrappers.Int64Value {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *UserQuota) GetErrors() *wrappers.Int64Value {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *UserQuota) GetResultRows() *wrappers.Int64Value {
	if m != nil {
		return m.ResultRows
	}
	return nil
}

func (m *UserQuota) GetReadRows() *wrappers.Int64Value {
	if m != nil {
		return m.ReadRows
	}
	return nil
}

func (m *UserQuota) GetExecutionTime() *wrappers.Int64Value {
	if m != nil {
		return m.ExecutionTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode", UserSettings_OverflowMode_name, UserSettings_OverflowMode_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.UserSettings_GroupByOverflowMode", UserSettings_GroupByOverflowMode_name, UserSettings_GroupByOverflowMode_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.UserSettings_DistributedProductMode", UserSettings_DistributedProductMode_name, UserSettings_DistributedProductMode_value)
	proto.RegisterType((*User)(nil), "yandex.cloud.mdb.clickhouse.v1.User")
	proto.RegisterType((*Permission)(nil), "yandex.cloud.mdb.clickhouse.v1.Permission")
	proto.RegisterType((*UserSpec)(nil), "yandex.cloud.mdb.clickhouse.v1.UserSpec")
	proto.RegisterType((*UserSettings)(nil), "yandex.cloud.mdb.clickhouse.v1.UserSettings")
	proto.RegisterType((*UserQuota)(nil), "yandex.cloud.mdb.clickhouse.v1.UserQuota")
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/clickhouse/v1/user.proto", fileDescriptor_f24bb57d787c6d5e)
}

var fileDescriptor_f24bb57d787c6d5e = []byte{
	// 2692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x9a, 0xcb, 0x76, 0x1b, 0xb7,
	0x19, 0xc7, 0xab, 0x8b, 0x6d, 0x19, 0x92, 0x6d, 0x0a, 0xba, 0x78, 0x2c, 0x59, 0x8a, 0x4c, 0xe7,
	0x22, 0xa5, 0xd1, 0x35, 0xae, 0x93, 0x34, 0xb1, 0x6b, 0xf1, 0x22, 0x9b, 0xb1, 0x24, 0xca, 0x24,
	0x15, 0x37, 0x97, 0x06, 0x01, 0x67, 0x20, 0x0a, 0xd1, 0xcc, 0x80, 0x02, 0x30, 0x92, 0x98, 0x73,
	0x7a, 0x4e, 0x17, 0x5d, 0x65, 0xdd, 0x17, 0xe8, 0x4b, 0xf4, 0x05, 0xba, 0x70, 0xd6, 0x7d, 0x8a,
	0x76, 0xdb, 0x65, 0x56, 0x3d, 0x00, 0x66, 0xc8, 0x21, 0x25, 0x79, 0x38, 0xf6, 0xae, 0x3b, 0x7b,
	0x06, 0xff, 0xdf, 0xff, 0xc3, 0x07, 0xf0, 0xc3, 0x65, 0x04, 0x96, 0x5a, 0xd8, 0x77, 0xc8, 0xd9,
	0xaa, 0xed, 0xb2, 0xc0, 0x59, 0xf5, 0x9c, 0xfa, 0xaa, 0xed, 0x52, 0xfb, 0xe8, 0x90, 0x05, 0x82,
	0xac, 0x9e, 0xac, 0xaf, 0x06, 0x82, 0xf0, 0x95, 0x26, 0x67, 0x92, 0xc1, 0x79, 0xd3, 0x74, 0x45,
	0x37, 0x5d, 0xf1, 0x9c, 0xfa, 0x4a, 0xa7, 0xe9, 0xca, 0xc9, 0xfa, 0xcc, 0x7c, 0x83, 0xb1, 0x86,
	0x4b, 0x56, 0x75, 0xeb, 0x7a, 0x70, 0xb0, 0x7a, 0xca, 0x71, 0xb3, 0x49, 0xb8, 0x30, 0xfa, 0x99,
	0xb9, 0x2e, 0xab, 0x13, 0xec, 0x52, 0x07, 0x4b, 0xca, 0x7c, 0xf3, 0x3a, 0xfb, 0xb7, 0x41, 0x30,
	0xbc, 0x2f, 0x08, 0x87, 0x10, 0x0c, 0xfb, 0xd8, 0x23, 0xd6, 0xc0, 0xc2, 0xc0, 0xe2, 0xf5, 0x8a,
	0xfe, 0x37, 0x9c, 0x03, 0xc0, 0x76, 0x03, 0x21, 0x09, 0x47, 0xd4, 0xb1, 0x06, 0xf5, 0x9b, 0xeb,
	0xe1, 0x93, 0x92, 0x03, 0xb7, 0xc1, 0x68, 0x93, 0x70, 0x8f, 0x0a, 0x41, 0x99, 0x2f, 0xac, 0xa1,
	0x85, 0xa1, 0xc5, 0xd1, 0x8d, 0x0f, 0x57, 0x5e, 0x1f, 0xf0, 0xca, 0x5e, 0x5b, 0x52, 0x89, 0xcb,
	0xe1, 0x33, 0x30, 0x22, 0x88, 0x94, 0xd4, 0x6f, 0x08, 0x6b, 0x78, 0x61, 0x60, 0x71, 0x74, 0xe3,
	0xa3, 0x24, 0x94, 0x0a, 0xbc, 0x1a, 0x6a, 0x2a, 0x6d, 0x35, 0xdc, 0x04, 0x57, 0x8f, 0x03, 0x26,
	0xb1, 0xb0, 0xae, 0xe8, 0x90, 0x96, 0xfa, 0xe1, 0xbc, 0x50, 0x8a, 0x4a, 0x28, 0xcc, 0x7e, 0x02,
	0x40, 0x27, 0x4e, 0x78, 0x1f, 0xdc, 0x70, 0xb0, 0xc4, 0x75, 0x2c, 0x08, 0x8a, 0x25, 0x69, 0x2c,
	0x7a, 0xb8, 0x8b, 0x3d, 0xf2, 0xe5, 0xf0, 0xc8, 0x60, 0x66, 0x28, 0xfb, 0xcf, 0x41, 0x30, 0xa2,
	0xc3, 0x6a, 0x12, 0x1b, 0xae, 0xc7, 0x73, 0x9a, 0x9b, 0xfb, 0xf7, 0xab, 0xf5, 0x81, 0xff, 0xbe,
	0x5a, 0xbf, 0xf1, 0x2d, 0x5e, 0xfe, 0x69, 0x73, 0xf9, 0x9b, 0xb5, 0xe5, 0xcf, 0xd0, 0x9f, 0x3e,
	0xfc, 0xf9, 0x97, 0xf5, 0xe1, 0x2f, 0x1e, 0x3d, 0xfc, 0x38, 0x4c, 0xf9, 0x12, 0x18, 0x69, 0x62,
	0x21, 0x4e, 0x19, 0x0f, 0x13, 0x9e, 0xbb, 0xa1, 0x64, 0x3f, 0xff, 0xb2, 0x7e, 0xe5, 0xd3, 0xe5,
	0xf5, 0x8d, 0x4f, 0x2b, 0xed, 0xd7, 0xff, 0xcf, 0xe9, 0xff, 0xcf, 0x23, 0x30, 0x16, 0xa7, 0xc3,
	0x27, 0x60, 0x84, 0x13, 0xec, 0x30, 0xdf, 0x6d, 0xe9, 0x6c, 0x8e, 0x6e, 0xcc, 0xae, 0x98, 0x89,
	0xbf, 0x12, 0x4d, 0xfc, 0x95, 0x92, 0x2f, 0x1f, 0x3e, 0xf8, 0x0a, 0xbb, 0x01, 0xc9, 0x5d, 0xfb,
	0xf5, 0xd5, 0xfa, 0xd0, 0xda, 0xf2, 0x46, 0xa5, 0xad, 0x82, 0x9f, 0x80, 0xeb, 0xd8, 0x75, 0xd9,
	0x29, 0x72, 0x1c, 0x57, 0x67, 0x76, 0x74, 0x63, 0xe6, 0x1c, 0x22, 0xc7, 0x98, 0xab, 0x09, 0x95,
	0x11, 0xdd, 0xb8, 0xe0, 0xb8, 0xb0, 0x04, 0x6e, 0x50, 0x5f, 0x10, 0x2e, 0xd1, 0x71, 0xc0, 0x78,
	0xe0, 0x59, 0x43, 0x7d, 0xfa, 0x3f, 0x7e, 0xb4, 0x56, 0x19, 0x33, 0xd2, 0x17, 0x5a, 0x09, 0xb7,
	0xc1, 0x2d, 0x9b, 0xf9, 0x3e, 0xb1, 0x25, 0x92, 0xd4, 0x23, 0x2c, 0x90, 0xd6, 0x07, 0xc9, 0xb0,
	0xab, 0xbf, 0xbe, 0x5a, 0x1f, 0x7c, 0xbc, 0x56, 0xb9, 0x19, 0x6a, 0x6b, 0x46, 0xaa, 0x68, 0x9c,
	0xd8, 0x84, 0x9e, 0x90, 0x36, 0x6d, 0x31, 0x05, 0x2d, 0xd4, 0x46, 0xb4, 0x2d, 0x30, 0x26, 0x88,
	0xef, 0xb4, 0x51, 0x4b, 0xfd, 0xa3, 0x46, 0x95, 0x30, 0xe2, 0x7c, 0x0b, 0xa6, 0xba, 0xd2, 0xd5,
	0x06, 0x0e, 0x27, 0x03, 0xc1, 0xaf, 0xaf, 0xd6, 0xaf, 0x3e, 0x7e, 0xb4, 0xbe, 0xb6, 0xb6, 0x56,
	0x99, 0x88, 0x67, 0x2e, 0x82, 0x7f, 0x0f, 0xe6, 0x04, 0x71, 0x55, 0xfe, 0x04, 0x39, 0x0e, 0x88,
	0x2f, 0x29, 0x76, 0x91, 0xcd, 0x7c, 0x41, 0x85, 0x24, 0xbe, 0xdd, 0xb2, 0xae, 0x24, 0x0e, 0xec,
	0xac, 0x01, 0x54, 0xdb, 0xfa, 0x7c, 0x47, 0x0e, 0xff, 0x32, 0x00, 0x96, 0x3c, 0x7c, 0x86, 0x38,
	0x69, 0xba, 0xd4, 0xc6, 0xc8, 0x21, 0x2e, 0x6e, 0xa1, 0x03, 0xc6, 0x91, 0x43, 0x85, 0xe4, 0xb4,
	0x1e, 0x48, 0xe2, 0xa0, 0xe3, 0x80, 0x70, 0x4a, 0x84, 0x75, 0x35, 0x5d, 0x8f, 0xde, 0xf5, 0xf0,
	0x59, 0xc5, 0x80, 0x0b, 0x8a, 0xbb, 0xc5, 0x78, 0xa1, 0x43, 0x7d, 0x61, 0xa0, 0xf0, 0xaf, 0x03,
	0x60, 0xe3, 0x00, 0xbb, 0x6e, 0x1d, 0xdb, 0x47, 0x48, 0x32, 0x24, 0x24, 0x76, 0x49, 0x14, 0x90,
	0xb8, 0x34, 0x96, 0x6b, 0x89, 0x1d, 0xff, 0x28, 0xa2, 0xd6, 0x58, 0x55, 0x31, 0xc3, 0x50, 0xc4,
	0xc5, 0x61, 0x30, 0x70, 0x2f, 0xf4, 0x54, 0x8b, 0x05, 0xc2, 0xae, 0x5a, 0x04, 0x9a, 0x98, 0x4b,
	0xaa, 0xfe, 0x2f, 0x90, 0x68, 0xf9, 0xb6, 0xf5, 0x61, 0x8a, 0x5f, 0xe2, 0x7c, 0x0c, 0xb7, 0xa9,
	0x68, 0x7b, 0x6d, 0x58, 0xb5, 0xe5, 0xdb, 0xf0, 0xcf, 0xc0, 0x8a, 0xf7, 0xab, 0xc9, 0x99, 0x13,
	0xd8, 0x12, 0x79, 0xcc, 0x21, 0xd6, 0x6f, 0x17, 0x06, 0x16, 0x6f, 0x6e, 0xe4, 0xd3, 0xd4, 0xa3,
	0x95, 0x58, 0x9f, 0xf6, 0x0c, 0x6b, 0x87, 0x39, 0xa4, 0x32, 0xed, 0x5c, 0xf8, 0x1c, 0x0a, 0xb0,
	0x18, 0xb7, 0xc7, 0x8d, 0x06, 0x27, 0x0d, 0xd3, 0x77, 0x8f, 0x78, 0x8c, 0xb7, 0x10, 0x39, 0x38,
	0xa0, 0x36, 0x25, 0xbe, 0xb4, 0x9e, 0x25, 0xe6, 0xfa, 0xbd, 0x18, 0x6b, 0xb3, 0x83, 0xda, 0xd1,
	0xa4, 0x62, 0x04, 0x82, 0xdf, 0x81, 0xbb, 0x71, 0x53, 0xc7, 0x71, 0x91, 0xc4, 0xe2, 0xa8, 0xfd,
	0x93, 0x29, 0x25, 0xe6, 0xb7, 0x72, 0x27, 0x06, 0x28, 0x38, 0x6e, 0x0d, 0x8b, 0xa3, 0xe8, 0xc7,
	0x52, 0x01, 0xb7, 0xc5, 0x11, 0x6d, 0xa2, 0xc0, 0xc7, 0x27, 0x98, 0xba, 0xb8, 0xee, 0x12, 0x24,
	0x0e, 0x31, 0x77, 0x84, 0xf5, 0x22, 0xb1, 0x07, 0x53, 0x4a, 0xba, 0xdf, 0x51, 0x56, 0xb5, 0x10,
	0x3e, 0x00, 0xd7, 0x6c, 0xe6, 0x35, 0xa9, 0x4b, 0xac, 0x8f, 0x12, 0x19, 0x51, 0x53, 0xb8, 0x0f,
	0x26, 0x3d, 0xea, 0x23, 0x9b, 0x05, 0xbe, 0x54, 0x73, 0x3a, 0x42, 0x2c, 0xa7, 0xa8, 0xa4, 0xe3,
	0x1e, 0xf5, 0xf3, 0x0a, 0x50, 0x63, 0xf9, 0x10, 0xfb, 0x1c, 0x4c, 0x84, 0x24, 0x44, 0xce, 0x9a,
	0x9c, 0x84, 0x0b, 0xe1, 0x4a, 0x62, 0x60, 0x30, 0x94, 0x15, 0x3b, 0x2a, 0xf8, 0x23, 0x78, 0xe7,
	0xa2, 0x18, 0x63, 0x64, 0x6b, 0x35, 0x45, 0xb8, 0xb3, 0xe7, 0xc2, 0xed, 0x98, 0xc1, 0x12, 0xb8,
	0xa9, 0xaa, 0x4c, 0xdd, 0x65, 0xf6, 0x11, 0x12, 0xf4, 0x27, 0x62, 0x5d, 0xef, 0xbf, 0xda, 0x8e,
	0x79, 0xf8, 0x2c, 0xa7, 0x94, 0x55, 0xfa, 0x13, 0x81, 0x3f, 0x80, 0x19, 0x15, 0x76, 0x58, 0x72,
	0x3b, 0x44, 0xc4, 0xd9, 0xa9, 0xb0, 0xd6, 0x52, 0x44, 0x3c, 0xed, 0x51, 0xbf, 0xa4, 0x31, 0x6d,
	0x7a, 0x85, 0x9d, 0x0a, 0x58, 0x07, 0xb3, 0x17, 0x3b, 0xd4, 0x5b, 0x92, 0x08, 0x6b, 0x3d, 0x85,
	0xc5, 0xed, 0xf3, 0x16, 0x39, 0x05, 0x81, 0x5f, 0x81, 0x29, 0x95, 0x90, 0x73, 0x1e, 0x16, 0xe8,
	0x3f, 0x2f, 0xd0, 0xc3, 0x67, 0x3d, 0x70, 0x88, 0x4c, 0x76, 0x74, 0xa4, 0x6a, 0x50, 0x03, 0x41,
	0x90, 0x43, 0xb9, 0x5a, 0x40, 0x28, 0xb3, 0x36, 0x52, 0x84, 0x3e, 0xe5, 0x51, 0x5f, 0xc7, 0x5a,
	0x63, 0xfb, 0x82, 0x14, 0x34, 0xa3, 0xc4, 0xe0, 0x1e, 0x98, 0x56, 0xcc, 0xc0, 0x57, 0xd3, 0x45,
	0x0d, 0x2f, 0x71, 0x90, 0x8d, 0xed, 0x43, 0x62, 0x7d, 0x9c, 0x38, 0x0b, 0x27, 0x03, 0x41, 0xf6,
	0x63, 0xc2, 0xbc, 0xd2, 0x41, 0x0a, 0x16, 0x3c, 0xc2, 0x1b, 0x04, 0x49, 0x4e, 0x08, 0xd2, 0x8b,
	0x11, 0x3b, 0x6d, 0x07, 0x6f, 0xd8, 0x0f, 0xfa, 0xcf, 0xca, 0x8c, 0x86, 0xd5, 0x38, 0x21, 0x3b,
	0xf8, 0x4c, 0x8d, 0xa7, 0x8e, 0xdf, 0x58, 0x1d, 0x81, 0x7b, 0x3d, 0x56, 0x5d, 0x89, 0x32, 0x5e,
	0xbf, 0xeb, 0xdf, 0x6b, 0x36, 0xee, 0xd5, 0x49, 0x96, 0x31, 0x3b, 0x05, 0x1f, 0xc4, 0xcd, 0xa8,
	0x6f, 0xfa, 0xa5, 0xd6, 0x33, 0x9b, 0xf9, 0x76, 0xc0, 0x39, 0xf1, 0x25, 0x52, 0xdb, 0x35, 0xeb,
	0x61, 0xff, 0x96, 0xf7, 0x3a, 0x96, 0xd4, 0x57, 0xdd, 0xdb, 0x62, 0x3c, 0xdf, 0xc6, 0x55, 0x08,
	0x76, 0x60, 0x0b, 0x2c, 0xf6, 0x18, 0x9b, 0x5e, 0x5e, 0xe4, 0xfc, 0x49, 0xff, 0xce, 0xd9, 0xb8,
	0xb3, 0xee, 0xec, 0x79, 0xeb, 0x03, 0x90, 0xed, 0x64, 0xb5, 0x4e, 0x0e, 0x18, 0x57, 0xf5, 0x44,
	0x12, 0xee, 0x63, 0x17, 0x35, 0x38, 0x0b, 0x9a, 0xa8, 0xde, 0xb2, 0xbe, 0x4c, 0xae, 0xf2, 0x73,
	0x5e, 0x98, 0xd0, 0x9c, 0x86, 0x14, 0x43, 0xc6, 0x53, 0x85, 0xc8, 0xb5, 0x20, 0x02, 0xf3, 0x97,
	0xfb, 0x08, 0xc6, 0xa5, 0xf5, 0x3c, 0xd9, 0x63, 0xe6, 0x62, 0x8f, 0x2a, 0xe3, 0x6a, 0x53, 0x77,
	0x37, 0x0a, 0x17, 0xc9, 0x53, 0x86, 0x5c, 0x72, 0x42, 0x5c, 0x24, 0x0f, 0x39, 0x11, 0x87, 0xcc,
	0x75, 0xac, 0xed, 0x64, 0xbc, 0xd5, 0x30, 0xc1, 0xd6, 0x4e, 0xd9, 0xb6, 0x52, 0xd7, 0x22, 0xb1,
	0xca, 0xd2, 0xeb, 0xe0, 0x61, 0x9d, 0xd9, 0xe9, 0x23, 0x4b, 0x97, 0x59, 0x98, 0x22, 0xf3, 0x04,
	0x8c, 0x34, 0x39, 0x65, 0x9c, 0xca, 0x96, 0xf5, 0x69, 0x8a, 0x9f, 0x7e, 0x5b, 0x05, 0x0b, 0x60,
	0x54, 0xe5, 0x59, 0x85, 0x86, 0x1d, 0x61, 0x8d, 0xf4, 0x3f, 0x5b, 0x80, 0x87, 0xcf, 0x6a, 0x46,
	0x06, 0x77, 0x41, 0x46, 0x51, 0xc2, 0x6d, 0x45, 0x20, 0x70, 0x83, 0x58, 0xa3, 0x29, 0xe2, 0x51,
	0x6b, 0x87, 0xd9, 0x49, 0xec, 0x2b, 0x2d, 0xfc, 0x1e, 0xdc, 0xe9, 0xe5, 0xe9, 0xc9, 0x1d, 0x08,
	0xc2, 0xad, 0xb1, 0x54, 0x35, 0xae, 0x0b, 0xbc, 0xc5, 0xb8, 0xbe, 0x19, 0x28, 0x9b, 0xe2, 0xec,
	0x13, 0x79, 0xca, 0xf8, 0x11, 0xaa, 0x63, 0xdf, 0x39, 0xa5, 0x8e, 0x3c, 0xb4, 0x3e, 0x4b, 0x1e,
	0x92, 0x09, 0x0f, 0x9f, 0xed, 0x1a, 0x61, 0x2e, 0xd2, 0x45, 0xd3, 0xf5, 0x1c, 0xb0, 0x13, 0xf5,
	0xef, 0xfb, 0x9b, 0xae, 0xbd, 0xe4, 0x28, 0xe2, 0x12, 0x98, 0x38, 0x60, 0xdc, 0x26, 0x88, 0xaa,
	0xfd, 0xa2, 0x9a, 0x57, 0x0e, 0x96, 0xc4, 0xfa, 0x3c, 0xb1, 0x24, 0x67, 0xb4, 0xac, 0xa4, 0x54,
	0xb9, 0x56, 0x01, 0x4b, 0x02, 0xb7, 0xc0, 0xb8, 0x41, 0x35, 0x39, 0xf5, 0x30, 0x6f, 0xa1, 0x23,
	0xd2, 0xb2, 0xbe, 0x48, 0x04, 0xdd, 0xd2, 0xa2, 0x3d, 0xa3, 0x79, 0x4e, 0x5a, 0x70, 0xc7, 0x0c,
	0x7a, 0x54, 0xcb, 0x75, 0xb5, 0xb9, 0x91, 0x62, 0x6c, 0x6e, 0x78, 0x51, 0xf9, 0xd6, 0x95, 0xa5,
	0x0c, 0xc6, 0xbb, 0xea, 0xb5, 0xe6, 0xdd, 0x4c, 0x39, 0x89, 0xc2, 0x12, 0xad, 0x81, 0x0d, 0x00,
	0x15, 0x03, 0xb1, 0x13, 0xc2, 0x0f, 0xd4, 0x31, 0x59, 0x6f, 0xbc, 0x6f, 0xe9, 0x8d, 0xf7, 0x67,
	0xa9, 0x36, 0xde, 0xe5, 0x90, 0xa0, 0xb7, 0xdb, 0x19, 0x05, 0x8d, 0x3f, 0x81, 0x35, 0x30, 0x19,
	0x4f, 0x44, 0xbb, 0x0a, 0x66, 0x52, 0x04, 0x9f, 0x69, 0x27, 0x23, 0xaa, 0x80, 0x01, 0x98, 0x6e,
	0xd7, 0x90, 0xee, 0x2e, 0x8c, 0xeb, 0x2e, 0x3c, 0x49, 0xd5, 0x85, 0x90, 0xda, 0xd5, 0x93, 0x89,
	0xc6, 0xf9, 0x87, 0xbd, 0xa3, 0xaa, 0x4b, 0x2d, 0x7c, 0xa3, 0x51, 0xd5, 0x65, 0xb6, 0x77, 0x54,
	0x35, 0x6f, 0xe2, 0xcd, 0x46, 0x55, 0x03, 0x1b, 0x00, 0x2a, 0x46, 0x4f, 0x4a, 0x26, 0xdf, 0x7a,
	0x54, 0x15, 0xb4, 0x2b, 0x11, 0xdb, 0xe0, 0x96, 0x39, 0x37, 0x8b, 0xc0, 0x95, 0x66, 0xef, 0x39,
	0x95, 0x36, 0x0f, 0x5a, 0xab, 0xb7, 0x9c, 0x61, 0x85, 0x0c, 0x69, 0xa6, 0xfe, 0x4f, 0xa7, 0x4c,
	0x83, 0xc1, 0x99, 0xca, 0x7f, 0x04, 0x26, 0x43, 0x56, 0x77, 0x22, 0x6e, 0xbf, 0x6d, 0x22, 0xa0,
	0xc1, 0x76, 0xa5, 0x62, 0x3f, 0x36, 0xc1, 0xa9, 0xaf, 0x0f, 0xeb, 0xd4, 0xb7, 0xa5, 0x65, 0xa5,
	0x3a, 0xec, 0x98, 0x79, 0x51, 0xf2, 0x0b, 0xa1, 0x1c, 0xbe, 0x34, 0x55, 0xd8, 0xcc, 0x8d, 0x38,
	0xf7, 0x4e, 0x0a, 0x2e, 0x8c, 0xe6, 0x47, 0x0c, 0xcc, 0xc0, 0x74, 0xc4, 0xea, 0x49, 0xcf, 0xcc,
	0xdb, 0xa6, 0x67, 0x32, 0x02, 0x5f, 0x9a, 0x20, 0xc9, 0x90, 0xe4, 0xd8, 0x17, 0x07, 0x84, 0x5b,
	0xb3, 0x6f, 0x90, 0xa0, 0x1a, 0xab, 0x85, 0xf2, 0xee, 0x04, 0xc5, 0xb9, 0x77, 0xdf, 0x24, 0x41,
	0x31, 0x30, 0x03, 0xd3, 0x11, 0xab, 0x27, 0x41, 0x73, 0x6f, 0x9d, 0xa0, 0x08, 0xdc, 0x95, 0xa0,
	0x0a, 0x50, 0x61, 0x20, 0x72, 0x46, 0xec, 0x40, 0xdf, 0x40, 0x48, 0xea, 0x11, 0x6b, 0x3e, 0x65,
	0x81, 0x2c, 0x46, 0xf2, 0x1a, 0xf5, 0x08, 0xf4, 0xc0, 0x54, 0x78, 0xab, 0xd0, 0xd3, 0x87, 0x77,
	0xde, 0xb6, 0x0f, 0x13, 0x21, 0xb7, 0xab, 0x0b, 0x55, 0xa0, 0x56, 0x7e, 0x64, 0x33, 0x37, 0xf0,
	0xfc, 0xce, 0x0a, 0xb5, 0x90, 0xb2, 0x0f, 0x79, 0xa3, 0x0f, 0xd7, 0xa8, 0x3f, 0x9a, 0x11, 0x96,
	0xc4, 0x6b, 0x32, 0xae, 0xd6, 0xe2, 0x10, 0x6f, 0xdd, 0x4b, 0x81, 0x55, 0x71, 0xd5, 0x22, 0x42,
	0xc8, 0xd7, 0x87, 0xff, 0x2e, 0xb2, 0xcf, 0x7c, 0x7d, 0xaf, 0x28, 0xdb, 0x1e, 0xd9, 0x54, 0x87,
	0xff, 0x98, 0xc7, 0x2e, 0xf3, 0xf3, 0x8a, 0x14, 0x79, 0x85, 0x87, 0xff, 0xe3, 0x80, 0xf0, 0x96,
	0x39, 0xe4, 0xde, 0x4f, 0x77, 0xf8, 0x7f, 0xa1, 0x94, 0xfa, 0x78, 0xfb, 0x14, 0xa8, 0xc2, 0x89,
	0xb0, 0x90, 0xc8, 0x21, 0x4d, 0x79, 0x68, 0xbd, 0x9b, 0xe2, 0xd2, 0xd6, 0xc3, 0x67, 0x9b, 0x42,
	0x16, 0x94, 0x2e, 0x5a, 0xc7, 0x14, 0x88, 0xb8, 0xc4, 0x23, 0xbe, 0x14, 0xd6, 0x7b, 0x29, 0xee,
	0x92, 0x0d, 0xab, 0x18, 0x4a, 0xa3, 0x1d, 0x29, 0x39, 0x6b, 0xaa, 0x49, 0xe5, 0x74, 0x73, 0xdf,
	0xef, 0x9f, 0x3b, 0xad, 0xa7, 0xb1, 0x81, 0xc4, 0xf9, 0x12, 0x2c, 0x51, 0xbf, 0x19, 0x48, 0xb5,
	0x61, 0xf4, 0xb0, 0x44, 0x27, 0x4a, 0xa5, 0xaa, 0xa2, 0x24, 0xbc, 0xc9, 0x89, 0xec, 0xba, 0x0e,
	0x7a, 0x94, 0x7c, 0x5b, 0xa7, 0x61, 0x5b, 0x9a, 0xa5, 0x9f, 0x88, 0x52, 0x44, 0x8a, 0xdf, 0x10,
	0x1d, 0x83, 0xc5, 0x2e, 0x57, 0x87, 0x1c, 0xe0, 0xc0, 0x95, 0xe6, 0x24, 0xc9, 0x3c, 0x2a, 0x25,
	0x71, 0xd0, 0x01, 0x25, 0xae, 0x23, 0xac, 0xc7, 0x89, 0xa6, 0xf7, 0x63, 0xa6, 0x85, 0x90, 0xb4,
	0xc5, 0x78, 0xd9, 0x70, 0xb6, 0x34, 0x06, 0x32, 0xf0, 0x01, 0x0b, 0x64, 0xcc, 0xf3, 0x47, 0xc1,
	0x7c, 0x74, 0x1c, 0x30, 0x49, 0xd0, 0xc3, 0x07, 0x75, 0x2a, 0x75, 0x9f, 0x1b, 0x84, 0x0b, 0xeb,
	0x0f, 0x89, 0x8e, 0x59, 0x83, 0x32, 0x96, 0x5f, 0x0a, 0xe6, 0xbf, 0x50, 0x1c, 0x8d, 0x29, 0x85,
	0x14, 0x75, 0x16, 0xbb, 0xd4, 0xd0, 0x21, 0xbe, 0x7a, 0xe6, 0x0a, 0xeb, 0x49, 0xa2, 0xd7, 0xfc,
	0x85, 0x5e, 0x85, 0x88, 0x00, 0x3d, 0xf0, 0xbe, 0xaa, 0x40, 0x36, 0xe6, 0x0e, 0xf5, 0xb1, 0x4b,
	0x65, 0x0b, 0x99, 0xaf, 0x33, 0xd4, 0x47, 0x3e, 0x96, 0xf4, 0x84, 0x84, 0x01, 0x58, 0xbb, 0x89,
	0x5e, 0xf7, 0x5c, 0x76, 0x9a, 0xef, 0x80, 0x36, 0x15, 0xa7, 0xe4, 0xef, 0x6a, 0x8a, 0x09, 0x00,
	0x72, 0xb0, 0x44, 0xbc, 0xa6, 0x6c, 0x45, 0x5b, 0x0a, 0x35, 0x62, 0xf1, 0x2b, 0xde, 0x7a, 0x0b,
	0x99, 0xf7, 0x82, 0x48, 0xab, 0x9c, 0x3c, 0x76, 0xba, 0xb1, 0xd9, 0x61, 0x6c, 0x31, 0x1e, 0xbb,
	0xe1, 0xcd, 0xb5, 0x8a, 0xea, 0x55, 0x95, 0x48, 0x58, 0x05, 0xb7, 0x0f, 0xa5, 0x6c, 0xa2, 0xf0,
	0xab, 0x4d, 0x54, 0xc7, 0x59, 0x20, 0xad, 0xcd, 0xe4, 0xe3, 0xcd, 0x94, 0xd2, 0xe6, 0xdb, 0xd2,
	0xe8, 0x4e, 0x77, 0x07, 0x4c, 0x6a, 0x68, 0xef, 0x87, 0x9f, 0x5c, 0x32, 0x11, 0x2a, 0x61, 0xa5,
	0xfb, 0xa3, 0xcf, 0x53, 0x30, 0xae, 0x71, 0x5d, 0x5f, 0x7e, 0xf2, 0xc9, 0xac, 0x5b, 0x4a, 0x55,
	0x8d, 0x7d, 0xf5, 0xa9, 0x80, 0xdb, 0xc4, 0xd7, 0x37, 0xcc, 0x61, 0x9f, 0xbd, 0xf6, 0xad, 0x69,
	0x21, 0xf9, 0xae, 0xd9, 0x48, 0x9f, 0xe9, 0x1e, 0xb7, 0x85, 0xf0, 0x3b, 0x30, 0xa7, 0xe3, 0x6a,
	0x72, 0xd6, 0x50, 0xcf, 0xd4, 0xdc, 0xd0, 0xf4, 0x43, 0x82, 0x1d, 0x35, 0xe5, 0x8b, 0x89, 0xe4,
	0x3b, 0x0a, 0xb0, 0x17, 0xea, 0x4b, 0xbe, 0x72, 0x78, 0x66, 0xc4, 0xf0, 0x07, 0x30, 0x1f, 0x87,
	0xc5, 0x5d, 0x24, 0xe1, 0x27, 0xd8, 0xb5, 0xb6, 0x92, 0xf3, 0x30, 0x7b, 0xd8, 0x21, 0x76, 0x6c,
	0x8c, 0x1e, 0x3e, 0x07, 0x93, 0xd8, 0x71, 0xa2, 0x84, 0x70, 0x11, 0x5a, 0x59, 0x4f, 0x13, 0xc3,
	0x1e, 0xc7, 0x8e, 0x63, 0xb2, 0xc1, 0x85, 0xa1, 0x67, 0x11, 0x18, 0xeb, 0x5a, 0x60, 0xe7, 0xc0,
	0x9d, 0xf2, 0x57, 0xc5, 0xca, 0xd6, 0x76, 0xf9, 0x25, 0xda, 0x29, 0x17, 0x8a, 0x68, 0x7f, 0xb7,
	0xba, 0x57, 0xcc, 0x97, 0xb6, 0x4a, 0xc5, 0x42, 0xe6, 0x37, 0xf0, 0x36, 0x98, 0xe8, 0x7e, 0x5d,
	0x7b, 0x56, 0x29, 0xbf, 0xcc, 0x0c, 0x9c, 0x7f, 0x91, 0xab, 0x14, 0x37, 0x9f, 0x67, 0x06, 0xb3,
	0x7f, 0x1f, 0x00, 0x13, 0x17, 0x9c, 0x7b, 0xe0, 0xfb, 0x20, 0xfb, 0xb4, 0x52, 0xde, 0xdf, 0x43,
	0xb9, 0xaf, 0xd1, 0xeb, 0x1c, 0x17, 0xc0, 0xdd, 0x4b, 0xda, 0x45, 0xd6, 0x97, 0xb7, 0x08, 0x63,
	0x80, 0xf3, 0x60, 0xe6, 0x92, 0x16, 0x9b, 0xbb, 0x5f, 0x67, 0x86, 0xb2, 0xff, 0x1a, 0x00, 0xd3,
	0x17, 0x7f, 0xd7, 0x81, 0x8b, 0xe0, 0xdd, 0x42, 0xa9, 0x5a, 0xab, 0x94, 0x72, 0xfb, 0xb5, 0x62,
	0x01, 0xed, 0x55, 0xca, 0x85, 0xfd, 0x7c, 0xed, 0xa2, 0x40, 0xef, 0x81, 0xb9, 0x4b, 0x5b, 0x16,
	0x8a, 0xbb, 0x5f, 0x67, 0x06, 0x60, 0x16, 0xcc, 0x5f, 0xda, 0x64, 0xbb, 0x9c, 0xdf, 0xdc, 0xce,
	0x0c, 0xc2, 0xfb, 0xe0, 0x9d, 0x4b, 0xdb, 0x3c, 0xdd, 0x2e, 0xe7, 0x36, 0xb7, 0x33, 0x43, 0xaf,
	0x05, 0x6d, 0x6e, 0x6f, 0x97, 0x5f, 0x66, 0x86, 0xb3, 0xff, 0x18, 0x02, 0xd7, 0xdb, 0x5f, 0xc0,
	0x61, 0x0d, 0x8c, 0x47, 0x13, 0x10, 0x39, 0x01, 0xd7, 0x45, 0xa5, 0x9f, 0x2f, 0xde, 0xf1, 0x0f,
	0x8d, 0x99, 0x88, 0x50, 0x08, 0x01, 0xf0, 0x31, 0xb8, 0x16, 0x7d, 0x28, 0x1c, 0x4c, 0xb1, 0x8f,
	0x89, 0x44, 0xf0, 0x0b, 0x70, 0x95, 0x70, 0xce, 0xb8, 0x48, 0xf5, 0xf1, 0x3b, 0xd4, 0xc0, 0x22,
	0x18, 0x8d, 0x1f, 0x0c, 0x87, 0x53, 0x20, 0x00, 0xef, 0x9c, 0x0a, 0x37, 0xc1, 0x75, 0x7d, 0x45,
	0xa1, 0x21, 0x57, 0xd2, 0x5c, 0xe0, 0x29, 0x99, 0x46, 0x3c, 0x07, 0x37, 0x7b, 0x76, 0xd5, 0x57,
	0xd3, 0x9c, 0x52, 0x49, 0x7c, 0x4b, 0x9d, 0x13, 0x20, 0xdb, 0xb5, 0x69, 0xc6, 0x4d, 0x7a, 0x7e,
	0xe3, 0xfc, 0xcd, 0x4e, 0x83, 0xca, 0xc3, 0xa0, 0xbe, 0x62, 0x33, 0x6f, 0xd5, 0x34, 0x5f, 0x36,
	0x7f, 0x8a, 0xd3, 0x60, 0xcb, 0x0d, 0xe2, 0x6b, 0xc3, 0xd5, 0xd7, 0xff, 0x39, 0xd0, 0xe7, 0x9d,
	0xff, 0xd5, 0xaf, 0x6a, 0xc1, 0xc7, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xba, 0xab, 0xde,
	0x42, 0x24, 0x00, 0x00,
}
