// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto

package clickhouse

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClickhouseConfig_LogLevel int32

const (
	ClickhouseConfig_LOG_LEVEL_UNSPECIFIED ClickhouseConfig_LogLevel = 0
	ClickhouseConfig_TRACE                 ClickhouseConfig_LogLevel = 1
	ClickhouseConfig_DEBUG                 ClickhouseConfig_LogLevel = 2
	ClickhouseConfig_INFORMATION           ClickhouseConfig_LogLevel = 3
	ClickhouseConfig_WARNING               ClickhouseConfig_LogLevel = 4
	ClickhouseConfig_ERROR                 ClickhouseConfig_LogLevel = 5
)

var ClickhouseConfig_LogLevel_name = map[int32]string{
	0: "LOG_LEVEL_UNSPECIFIED",
	1: "TRACE",
	2: "DEBUG",
	3: "INFORMATION",
	4: "WARNING",
	5: "ERROR",
}

var ClickhouseConfig_LogLevel_value = map[string]int32{
	"LOG_LEVEL_UNSPECIFIED": 0,
	"TRACE":                 1,
	"DEBUG":                 2,
	"INFORMATION":           3,
	"WARNING":               4,
	"ERROR":                 5,
}

func (x ClickhouseConfig_LogLevel) String() string {
	return proto.EnumName(ClickhouseConfig_LogLevel_name, int32(x))
}

func (ClickhouseConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 0}
}

type ClickhouseConfig_Compression_Method int32

const (
	ClickhouseConfig_Compression_METHOD_UNSPECIFIED ClickhouseConfig_Compression_Method = 0
	// [LZ4 compression algorithm](https://lz4.github.io/lz4/).
	ClickhouseConfig_Compression_LZ4 ClickhouseConfig_Compression_Method = 1
	// [Zstandard compression algorithm](https://facebook.github.io/zstd/).
	ClickhouseConfig_Compression_ZSTD ClickhouseConfig_Compression_Method = 2
)

var ClickhouseConfig_Compression_Method_name = map[int32]string{
	0: "METHOD_UNSPECIFIED",
	1: "LZ4",
	2: "ZSTD",
}

var ClickhouseConfig_Compression_Method_value = map[string]int32{
	"METHOD_UNSPECIFIED": 0,
	"LZ4":                1,
	"ZSTD":               2,
}

func (x ClickhouseConfig_Compression_Method) String() string {
	return proto.EnumName(ClickhouseConfig_Compression_Method_name, int32(x))
}

func (ClickhouseConfig_Compression_Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 1, 0}
}

type ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode int32

const (
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_SSL_MODE_UNSPECIFIED ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 0
	// Only try a non-SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_DISABLE ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 1
	// First try a non-SSL connection; if that fails, try an SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_ALLOW ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 2
	// First try an SSL connection; if that fails, try a non-SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_PREFER ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 3
	// Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_VERIFY_CA ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 4
	// Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_VERIFY_FULL ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 5
)

var ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_name = map[int32]string{
	0: "SSL_MODE_UNSPECIFIED",
	1: "DISABLE",
	2: "ALLOW",
	3: "PREFER",
	4: "VERIFY_CA",
	5: "VERIFY_FULL",
}

var ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_value = map[string]int32{
	"SSL_MODE_UNSPECIFIED": 0,
	"DISABLE":              1,
	"ALLOW":                2,
	"PREFER":               3,
	"VERIFY_CA":            4,
	"VERIFY_FULL":          5,
}

func (x ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) String() string {
	return proto.EnumName(ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_name, int32(x))
}

func (ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 4, 0}
}

type ClickhouseConfig_ExternalDictionary_Layout_Type int32

const (
	ClickhouseConfig_ExternalDictionary_Layout_TYPE_UNSPECIFIED ClickhouseConfig_ExternalDictionary_Layout_Type = 0
	// The entire dictionary is stored in memory in the form of flat arrays.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_FLAT ClickhouseConfig_ExternalDictionary_Layout_Type = 1
	// The entire dictionary is stored in memory in the form of a hash table.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 2
	// Similar to HASHED, to be used with composite keys.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 3
	// The entire dictionary is stored in memory in the form of a hash table,
	// with an ordered array of ranges and their corresponding values.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_RANGE_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 4
	// The dictionary is stored in a cache with a set number of cells.
	// Available for MySQL, ClickHouse and HTTP dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_CACHE ClickhouseConfig_ExternalDictionary_Layout_Type = 5
	// Similar to CACHE, to be used with composite keys.
	// Available for MySQL, ClickHouse and HTTP dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_CACHE ClickhouseConfig_ExternalDictionary_Layout_Type = 6
)

var ClickhouseConfig_ExternalDictionary_Layout_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "FLAT",
	2: "HASHED",
	3: "COMPLEX_KEY_HASHED",
	4: "RANGE_HASHED",
	5: "CACHE",
	6: "COMPLEX_KEY_CACHE",
}

var ClickhouseConfig_ExternalDictionary_Layout_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":   0,
	"FLAT":               1,
	"HASHED":             2,
	"COMPLEX_KEY_HASHED": 3,
	"RANGE_HASHED":       4,
	"CACHE":              5,
	"COMPLEX_KEY_CACHE":  6,
}

func (x ClickhouseConfig_ExternalDictionary_Layout_Type) String() string {
	return proto.EnumName(ClickhouseConfig_ExternalDictionary_Layout_Type_name, int32(x))
}

func (ClickhouseConfig_ExternalDictionary_Layout_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 6, 0}
}

// ClickHouse configuration options. Detailed description for each set of options
// is available in [ClickHouse documentation](https://clickhouse.yandex/docs/ru/operations/server_settings/settings/).
//
// Any options not listed here are not supported.
type ClickhouseConfig struct {
	// Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
	LogLevel ClickhouseConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel" json:"log_level,omitempty"`
	// Settings for the MergeTree engine.
	// See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
	MergeTree *ClickhouseConfig_MergeTree `protobuf:"bytes,2,opt,name=merge_tree,json=mergeTree,proto3" json:"merge_tree,omitempty"`
	// Compression settings for the ClickHouse cluster.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
	Compression []*ClickhouseConfig_Compression `protobuf:"bytes,3,rep,name=compression,proto3" json:"compression,omitempty"`
	// Configuration of external dictionaries to be used by the ClickHouse cluster.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
	Dictionaries []*ClickhouseConfig_ExternalDictionary `protobuf:"bytes,4,rep,name=dictionaries,proto3" json:"dictionaries,omitempty"`
	// Settings for thinning Graphite data.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
	GraphiteRollup []*ClickhouseConfig_GraphiteRollup `protobuf:"bytes,5,rep,name=graphite_rollup,json=graphiteRollup,proto3" json:"graphite_rollup,omitempty"`
	// Maximum number of inbound connections.
	MaxConnections *wrappers.Int64Value `protobuf:"bytes,6,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Maximum number of simultaneously processed requests.
	MaxConcurrentQueries *wrappers.Int64Value `protobuf:"bytes,7,opt,name=max_concurrent_queries,json=maxConcurrentQueries,proto3" json:"max_concurrent_queries,omitempty"`
	// Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
	KeepAliveTimeout *wrappers.Int64Value `protobuf:"bytes,8,opt,name=keep_alive_timeout,json=keepAliveTimeout,proto3" json:"keep_alive_timeout,omitempty"`
	// Cache size (in bytes) for uncompressed data used by MergeTree tables.
	UncompressedCacheSize *wrappers.Int64Value `protobuf:"bytes,9,opt,name=uncompressed_cache_size,json=uncompressedCacheSize,proto3" json:"uncompressed_cache_size,omitempty"`
	// Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
	MarkCacheSize *wrappers.Int64Value `protobuf:"bytes,10,opt,name=mark_cache_size,json=markCacheSize,proto3" json:"mark_cache_size,omitempty"`
	// Maximum size of the table that can be deleted using a DROP query.
	MaxTableSizeToDrop *wrappers.Int64Value `protobuf:"bytes,11,opt,name=max_table_size_to_drop,json=maxTableSizeToDrop,proto3" json:"max_table_size_to_drop,omitempty"`
	// Maximum size of the partition that can be deleted using a DROP query.
	MaxPartitionSizeToDrop *wrappers.Int64Value `protobuf:"bytes,13,opt,name=max_partition_size_to_drop,json=maxPartitionSizeToDrop,proto3" json:"max_partition_size_to_drop,omitempty"`
	// The setting is deprecated and has no effect.
	BuiltinDictionariesReloadInterval *wrappers.Int64Value `protobuf:"bytes,12,opt,name=builtin_dictionaries_reload_interval,json=builtinDictionariesReloadInterval,proto3" json:"builtin_dictionaries_reload_interval,omitempty"` // Deprecated: Do not use.
	// The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
	Timezone string `protobuf:"bytes,14,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Address of the archive with the user geobase in Object Storage.
	GeobaseUri string `protobuf:"bytes,15,opt,name=geobase_uri,json=geobaseUri,proto3" json:"geobase_uri,omitempty"`
	// The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
	// query_log data based on size is disabled.
	QueryLogRetentionSize *wrappers.Int64Value `protobuf:"bytes,16,opt,name=query_log_retention_size,json=queryLogRetentionSize,proto3" json:"query_log_retention_size,omitempty"`
	// The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
	// query_log data based on time is disabled.
	QueryLogRetentionTime *wrappers.Int64Value `protobuf:"bytes,17,opt,name=query_log_retention_time,json=queryLogRetentionTime,proto3" json:"query_log_retention_time,omitempty"`
	// Whether query_thread_log system table is enabled.
	QueryThreadLogEnabled *wrappers.BoolValue `protobuf:"bytes,18,opt,name=query_thread_log_enabled,json=queryThreadLogEnabled,proto3" json:"query_thread_log_enabled,omitempty"`
	// The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
	// query_thread_log data based on size is disabled.
	QueryThreadLogRetentionSize *wrappers.Int64Value `protobuf:"bytes,19,opt,name=query_thread_log_retention_size,json=queryThreadLogRetentionSize,proto3" json:"query_thread_log_retention_size,omitempty"`
	// The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
	// query_thread_log data based on time is disabled.
	QueryThreadLogRetentionTime *wrappers.Int64Value `protobuf:"bytes,20,opt,name=query_thread_log_retention_time,json=queryThreadLogRetentionTime,proto3" json:"query_thread_log_retention_time,omitempty"`
	// The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
	// part_log data based on size is disabled.
	PartLogRetentionSize *wrappers.Int64Value `protobuf:"bytes,21,opt,name=part_log_retention_size,json=partLogRetentionSize,proto3" json:"part_log_retention_size,omitempty"`
	// The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
	// part_log data based on time is disabled.
	PartLogRetentionTime *wrappers.Int64Value `protobuf:"bytes,22,opt,name=part_log_retention_time,json=partLogRetentionTime,proto3" json:"part_log_retention_time,omitempty"`
	// Whether metric_log system table is enabled.
	MetricLogEnabled *wrappers.BoolValue `protobuf:"bytes,23,opt,name=metric_log_enabled,json=metricLogEnabled,proto3" json:"metric_log_enabled,omitempty"`
	// The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
	// metric_log data based on size is disabled.
	MetricLogRetentionSize *wrappers.Int64Value `protobuf:"bytes,24,opt,name=metric_log_retention_size,json=metricLogRetentionSize,proto3" json:"metric_log_retention_size,omitempty"`
	// The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
	// metric_log data based on time is disabled.
	MetricLogRetentionTime *wrappers.Int64Value `protobuf:"bytes,25,opt,name=metric_log_retention_time,json=metricLogRetentionTime,proto3" json:"metric_log_retention_time,omitempty"`
	// Whether trace_log system table is enabled.
	TraceLogEnabled *wrappers.BoolValue `protobuf:"bytes,26,opt,name=trace_log_enabled,json=traceLogEnabled,proto3" json:"trace_log_enabled,omitempty"`
	// The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
	// trace_log data based on size is disabled.
	TraceLogRetentionSize *wrappers.Int64Value `protobuf:"bytes,27,opt,name=trace_log_retention_size,json=traceLogRetentionSize,proto3" json:"trace_log_retention_size,omitempty"`
	// The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
	// trace_log data based on time is disabled.
	TraceLogRetentionTime *wrappers.Int64Value `protobuf:"bytes,28,opt,name=trace_log_retention_time,json=traceLogRetentionTime,proto3" json:"trace_log_retention_time,omitempty"`
	// Whether text_log system table is enabled.
	TextLogEnabled *wrappers.BoolValue `protobuf:"bytes,29,opt,name=text_log_enabled,json=textLogEnabled,proto3" json:"text_log_enabled,omitempty"`
	// The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
	// text_log data based on size is disabled.
	TextLogRetentionSize *wrappers.Int64Value `protobuf:"bytes,30,opt,name=text_log_retention_size,json=textLogRetentionSize,proto3" json:"text_log_retention_size,omitempty"`
	// The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
	// text_log data based on time is disabled.
	TextLogRetentionTime *wrappers.Int64Value `protobuf:"bytes,31,opt,name=text_log_retention_time,json=textLogRetentionTime,proto3" json:"text_log_retention_time,omitempty"`
	// Logging level for text_log system table. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
	TextLogLevel         ClickhouseConfig_LogLevel `protobuf:"varint,32,opt,name=text_log_level,json=textLogLevel,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel" json:"text_log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ClickhouseConfig) Reset()         { *m = ClickhouseConfig{} }
func (m *ClickhouseConfig) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig) ProtoMessage()    {}
func (*ClickhouseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0}
}

func (m *ClickhouseConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig.Unmarshal(m, b)
}
func (m *ClickhouseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig.Merge(m, src)
}
func (m *ClickhouseConfig) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig.Size(m)
}
func (m *ClickhouseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig proto.InternalMessageInfo

func (m *ClickhouseConfig) GetLogLevel() ClickhouseConfig_LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_UNSPECIFIED
}

func (m *ClickhouseConfig) GetMergeTree() *ClickhouseConfig_MergeTree {
	if m != nil {
		return m.MergeTree
	}
	return nil
}

func (m *ClickhouseConfig) GetCompression() []*ClickhouseConfig_Compression {
	if m != nil {
		return m.Compression
	}
	return nil
}

func (m *ClickhouseConfig) GetDictionaries() []*ClickhouseConfig_ExternalDictionary {
	if m != nil {
		return m.Dictionaries
	}
	return nil
}

func (m *ClickhouseConfig) GetGraphiteRollup() []*ClickhouseConfig_GraphiteRollup {
	if m != nil {
		return m.GraphiteRollup
	}
	return nil
}

func (m *ClickhouseConfig) GetMaxConnections() *wrappers.Int64Value {
	if m != nil {
		return m.MaxConnections
	}
	return nil
}

func (m *ClickhouseConfig) GetMaxConcurrentQueries() *wrappers.Int64Value {
	if m != nil {
		return m.MaxConcurrentQueries
	}
	return nil
}

func (m *ClickhouseConfig) GetKeepAliveTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.KeepAliveTimeout
	}
	return nil
}

func (m *ClickhouseConfig) GetUncompressedCacheSize() *wrappers.Int64Value {
	if m != nil {
		return m.UncompressedCacheSize
	}
	return nil
}

func (m *ClickhouseConfig) GetMarkCacheSize() *wrappers.Int64Value {
	if m != nil {
		return m.MarkCacheSize
	}
	return nil
}

func (m *ClickhouseConfig) GetMaxTableSizeToDrop() *wrappers.Int64Value {
	if m != nil {
		return m.MaxTableSizeToDrop
	}
	return nil
}

func (m *ClickhouseConfig) GetMaxPartitionSizeToDrop() *wrappers.Int64Value {
	if m != nil {
		return m.MaxPartitionSizeToDrop
	}
	return nil
}

// Deprecated: Do not use.
func (m *ClickhouseConfig) GetBuiltinDictionariesReloadInterval() *wrappers.Int64Value {
	if m != nil {
		return m.BuiltinDictionariesReloadInterval
	}
	return nil
}

func (m *ClickhouseConfig) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *ClickhouseConfig) GetGeobaseUri() string {
	if m != nil {
		return m.GeobaseUri
	}
	return ""
}

func (m *ClickhouseConfig) GetQueryLogRetentionSize() *wrappers.Int64Value {
	if m != nil {
		return m.QueryLogRetentionSize
	}
	return nil
}

func (m *ClickhouseConfig) GetQueryLogRetentionTime() *wrappers.Int64Value {
	if m != nil {
		return m.QueryLogRetentionTime
	}
	return nil
}

func (m *ClickhouseConfig) GetQueryThreadLogEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.QueryThreadLogEnabled
	}
	return nil
}

func (m *ClickhouseConfig) GetQueryThreadLogRetentionSize() *wrappers.Int64Value {
	if m != nil {
		return m.QueryThreadLogRetentionSize
	}
	return nil
}

func (m *ClickhouseConfig) GetQueryThreadLogRetentionTime() *wrappers.Int64Value {
	if m != nil {
		return m.QueryThreadLogRetentionTime
	}
	return nil
}

func (m *ClickhouseConfig) GetPartLogRetentionSize() *wrappers.Int64Value {
	if m != nil {
		return m.PartLogRetentionSize
	}
	return nil
}

func (m *ClickhouseConfig) GetPartLogRetentionTime() *wrappers.Int64Value {
	if m != nil {
		return m.PartLogRetentionTime
	}
	return nil
}

func (m *ClickhouseConfig) GetMetricLogEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.MetricLogEnabled
	}
	return nil
}

func (m *ClickhouseConfig) GetMetricLogRetentionSize() *wrappers.Int64Value {
	if m != nil {
		return m.MetricLogRetentionSize
	}
	return nil
}

func (m *ClickhouseConfig) GetMetricLogRetentionTime() *wrappers.Int64Value {
	if m != nil {
		return m.MetricLogRetentionTime
	}
	return nil
}

func (m *ClickhouseConfig) GetTraceLogEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.TraceLogEnabled
	}
	return nil
}

func (m *ClickhouseConfig) GetTraceLogRetentionSize() *wrappers.Int64Value {
	if m != nil {
		return m.TraceLogRetentionSize
	}
	return nil
}

func (m *ClickhouseConfig) GetTraceLogRetentionTime() *wrappers.Int64Value {
	if m != nil {
		return m.TraceLogRetentionTime
	}
	return nil
}

func (m *ClickhouseConfig) GetTextLogEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.TextLogEnabled
	}
	return nil
}

func (m *ClickhouseConfig) GetTextLogRetentionSize() *wrappers.Int64Value {
	if m != nil {
		return m.TextLogRetentionSize
	}
	return nil
}

func (m *ClickhouseConfig) GetTextLogRetentionTime() *wrappers.Int64Value {
	if m != nil {
		return m.TextLogRetentionTime
	}
	return nil
}

func (m *ClickhouseConfig) GetTextLogLevel() ClickhouseConfig_LogLevel {
	if m != nil {
		return m.TextLogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_UNSPECIFIED
}

// Options specific to the MergeTree table engine.
type ClickhouseConfig_MergeTree struct {
	// Number of blocks of hashes to keep in ZooKeeper.
	ReplicatedDeduplicationWindow *wrappers.Int64Value `protobuf:"bytes,1,opt,name=replicated_deduplication_window,json=replicatedDeduplicationWindow,proto3" json:"replicated_deduplication_window,omitempty"`
	// Period of time to keep blocks of hashes for.
	ReplicatedDeduplicationWindowSeconds *wrappers.Int64Value `protobuf:"bytes,2,opt,name=replicated_deduplication_window_seconds,json=replicatedDeduplicationWindowSeconds,proto3" json:"replicated_deduplication_window_seconds,omitempty"`
	// If table contains at least that many active parts in single partition, artificially slow down insert into table.
	PartsToDelayInsert *wrappers.Int64Value `protobuf:"bytes,3,opt,name=parts_to_delay_insert,json=partsToDelayInsert,proto3" json:"parts_to_delay_insert,omitempty"`
	// If more than this number active parts in single partition, throw 'Too many parts ...' exception.
	PartsToThrowInsert *wrappers.Int64Value `protobuf:"bytes,4,opt,name=parts_to_throw_insert,json=partsToThrowInsert,proto3" json:"parts_to_throw_insert,omitempty"`
	// How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
	MaxReplicatedMergesInQueue *wrappers.Int64Value `protobuf:"bytes,5,opt,name=max_replicated_merges_in_queue,json=maxReplicatedMergesInQueue,proto3" json:"max_replicated_merges_in_queue,omitempty"`
	// If there is less than specified number of free entries in background pool (or replicated queue), start to lower
	// maximum size of merge to process.
	NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge *wrappers.Int64Value `protobuf:"bytes,6,opt,name=number_of_free_entries_in_pool_to_lower_max_size_of_merge,json=numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge,proto3" json:"number_of_free_entries_in_pool_to_lower_max_size_of_merge,omitempty"`
	// Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
	// in replication queue).
	MaxBytesToMergeAtMinSpaceInPool *wrappers.Int64Value `protobuf:"bytes,7,opt,name=max_bytes_to_merge_at_min_space_in_pool,json=maxBytesToMergeAtMinSpaceInPool,proto3" json:"max_bytes_to_merge_at_min_space_in_pool,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}             `json:"-"`
	XXX_unrecognized                []byte               `json:"-"`
	XXX_sizecache                   int32                `json:"-"`
}

func (m *ClickhouseConfig_MergeTree) Reset()         { *m = ClickhouseConfig_MergeTree{} }
func (m *ClickhouseConfig_MergeTree) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_MergeTree) ProtoMessage()    {}
func (*ClickhouseConfig_MergeTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 0}
}

func (m *ClickhouseConfig_MergeTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_MergeTree.Unmarshal(m, b)
}
func (m *ClickhouseConfig_MergeTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_MergeTree.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_MergeTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_MergeTree.Merge(m, src)
}
func (m *ClickhouseConfig_MergeTree) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_MergeTree.Size(m)
}
func (m *ClickhouseConfig_MergeTree) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_MergeTree.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_MergeTree proto.InternalMessageInfo

func (m *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindow() *wrappers.Int64Value {
	if m != nil {
		return m.ReplicatedDeduplicationWindow
	}
	return nil
}

func (m *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindowSeconds() *wrappers.Int64Value {
	if m != nil {
		return m.ReplicatedDeduplicationWindowSeconds
	}
	return nil
}

func (m *ClickhouseConfig_MergeTree) GetPartsToDelayInsert() *wrappers.Int64Value {
	if m != nil {
		return m.PartsToDelayInsert
	}
	return nil
}

func (m *ClickhouseConfig_MergeTree) GetPartsToThrowInsert() *wrappers.Int64Value {
	if m != nil {
		return m.PartsToThrowInsert
	}
	return nil
}

func (m *ClickhouseConfig_MergeTree) GetMaxReplicatedMergesInQueue() *wrappers.Int64Value {
	if m != nil {
		return m.MaxReplicatedMergesInQueue
	}
	return nil
}

func (m *ClickhouseConfig_MergeTree) GetNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() *wrappers.Int64Value {
	if m != nil {
		return m.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge
	}
	return nil
}

func (m *ClickhouseConfig_MergeTree) GetMaxBytesToMergeAtMinSpaceInPool() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesToMergeAtMinSpaceInPool
	}
	return nil
}

type ClickhouseConfig_Compression struct {
	// Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
	Method ClickhouseConfig_Compression_Method `protobuf:"varint,1,opt,name=method,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Compression_Method" json:"method,omitempty"`
	// Minimum size of a part of a table.
	MinPartSize int64 `protobuf:"varint,2,opt,name=min_part_size,json=minPartSize,proto3" json:"min_part_size,omitempty"`
	// Minimum ratio of a part relative to the size of all the data in the table.
	MinPartSizeRatio     float64  `protobuf:"fixed64,3,opt,name=min_part_size_ratio,json=minPartSizeRatio,proto3" json:"min_part_size_ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_Compression) Reset()         { *m = ClickhouseConfig_Compression{} }
func (m *ClickhouseConfig_Compression) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_Compression) ProtoMessage()    {}
func (*ClickhouseConfig_Compression) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 1}
}

func (m *ClickhouseConfig_Compression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_Compression.Unmarshal(m, b)
}
func (m *ClickhouseConfig_Compression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_Compression.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_Compression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_Compression.Merge(m, src)
}
func (m *ClickhouseConfig_Compression) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_Compression.Size(m)
}
func (m *ClickhouseConfig_Compression) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_Compression.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_Compression proto.InternalMessageInfo

func (m *ClickhouseConfig_Compression) GetMethod() ClickhouseConfig_Compression_Method {
	if m != nil {
		return m.Method
	}
	return ClickhouseConfig_Compression_METHOD_UNSPECIFIED
}

func (m *ClickhouseConfig_Compression) GetMinPartSize() int64 {
	if m != nil {
		return m.MinPartSize
	}
	return 0
}

func (m *ClickhouseConfig_Compression) GetMinPartSizeRatio() float64 {
	if m != nil {
		return m.MinPartSizeRatio
	}
	return 0
}

type ClickhouseConfig_ExternalDictionary struct {
	// Name of the external dictionary.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Set of attributes for the external dictionary.
	// For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
	Structure *ClickhouseConfig_ExternalDictionary_Structure `protobuf:"bytes,2,opt,name=structure,proto3" json:"structure,omitempty"`
	// Layout for storing the dictionary in memory.
	// For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
	Layout *ClickhouseConfig_ExternalDictionary_Layout `protobuf:"bytes,3,opt,name=layout,proto3" json:"layout,omitempty"`
	// Setting for the period of time between dictionary updates.
	// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
	//
	// Types that are valid to be assigned to Lifetime:
	//	*ClickhouseConfig_ExternalDictionary_FixedLifetime
	//	*ClickhouseConfig_ExternalDictionary_LifetimeRange
	Lifetime isClickhouseConfig_ExternalDictionary_Lifetime `protobuf_oneof:"lifetime"`
	// Description of the source for the external dictionary.
	//
	// Types that are valid to be assigned to Source:
	//	*ClickhouseConfig_ExternalDictionary_HttpSource_
	//	*ClickhouseConfig_ExternalDictionary_MysqlSource_
	//	*ClickhouseConfig_ExternalDictionary_ClickhouseSource_
	//	*ClickhouseConfig_ExternalDictionary_MongodbSource_
	//	*ClickhouseConfig_ExternalDictionary_PostgresqlSource_
	Source               isClickhouseConfig_ExternalDictionary_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary) Reset()         { *m = ClickhouseConfig_ExternalDictionary{} }
func (m *ClickhouseConfig_ExternalDictionary) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_ExternalDictionary) ProtoMessage()    {}
func (*ClickhouseConfig_ExternalDictionary) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2}
}

func (m *ClickhouseConfig_ExternalDictionary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary) GetStructure() *ClickhouseConfig_ExternalDictionary_Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetLayout() *ClickhouseConfig_ExternalDictionary_Layout {
	if m != nil {
		return m.Layout
	}
	return nil
}

type isClickhouseConfig_ExternalDictionary_Lifetime interface {
	isClickhouseConfig_ExternalDictionary_Lifetime()
}

type ClickhouseConfig_ExternalDictionary_FixedLifetime struct {
	FixedLifetime int64 `protobuf:"varint,4,opt,name=fixed_lifetime,json=fixedLifetime,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_LifetimeRange struct {
	LifetimeRange *ClickhouseConfig_ExternalDictionary_Range `protobuf:"bytes,5,opt,name=lifetime_range,json=lifetimeRange,proto3,oneof"`
}

func (*ClickhouseConfig_ExternalDictionary_FixedLifetime) isClickhouseConfig_ExternalDictionary_Lifetime() {
}

func (*ClickhouseConfig_ExternalDictionary_LifetimeRange) isClickhouseConfig_ExternalDictionary_Lifetime() {
}

func (m *ClickhouseConfig_ExternalDictionary) GetLifetime() isClickhouseConfig_ExternalDictionary_Lifetime {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetFixedLifetime() int64 {
	if x, ok := m.GetLifetime().(*ClickhouseConfig_ExternalDictionary_FixedLifetime); ok {
		return x.FixedLifetime
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary) GetLifetimeRange() *ClickhouseConfig_ExternalDictionary_Range {
	if x, ok := m.GetLifetime().(*ClickhouseConfig_ExternalDictionary_LifetimeRange); ok {
		return x.LifetimeRange
	}
	return nil
}

type isClickhouseConfig_ExternalDictionary_Source interface {
	isClickhouseConfig_ExternalDictionary_Source()
}

type ClickhouseConfig_ExternalDictionary_HttpSource_ struct {
	HttpSource *ClickhouseConfig_ExternalDictionary_HttpSource `protobuf:"bytes,6,opt,name=http_source,json=httpSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_MysqlSource_ struct {
	MysqlSource *ClickhouseConfig_ExternalDictionary_MysqlSource `protobuf:"bytes,7,opt,name=mysql_source,json=mysqlSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_ClickhouseSource_ struct {
	ClickhouseSource *ClickhouseConfig_ExternalDictionary_ClickhouseSource `protobuf:"bytes,8,opt,name=clickhouse_source,json=clickhouseSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_MongodbSource_ struct {
	MongodbSource *ClickhouseConfig_ExternalDictionary_MongodbSource `protobuf:"bytes,9,opt,name=mongodb_source,json=mongodbSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_PostgresqlSource_ struct {
	PostgresqlSource *ClickhouseConfig_ExternalDictionary_PostgresqlSource `protobuf:"bytes,10,opt,name=postgresql_source,json=postgresqlSource,proto3,oneof"`
}

func (*ClickhouseConfig_ExternalDictionary_HttpSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_MysqlSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_MongodbSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (m *ClickhouseConfig_ExternalDictionary) GetSource() isClickhouseConfig_ExternalDictionary_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetHttpSource() *ClickhouseConfig_ExternalDictionary_HttpSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_HttpSource_); ok {
		return x.HttpSource
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetMysqlSource() *ClickhouseConfig_ExternalDictionary_MysqlSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_MysqlSource_); ok {
		return x.MysqlSource
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetClickhouseSource() *ClickhouseConfig_ExternalDictionary_ClickhouseSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_ClickhouseSource_); ok {
		return x.ClickhouseSource
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetMongodbSource() *ClickhouseConfig_ExternalDictionary_MongodbSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_MongodbSource_); ok {
		return x.MongodbSource
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetPostgresqlSource() *ClickhouseConfig_ExternalDictionary_PostgresqlSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_PostgresqlSource_); ok {
		return x.PostgresqlSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClickhouseConfig_ExternalDictionary) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClickhouseConfig_ExternalDictionary_FixedLifetime)(nil),
		(*ClickhouseConfig_ExternalDictionary_LifetimeRange)(nil),
		(*ClickhouseConfig_ExternalDictionary_HttpSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_MysqlSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_ClickhouseSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_MongodbSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_PostgresqlSource_)(nil),
	}
}

type ClickhouseConfig_ExternalDictionary_HttpSource struct {
	// URL of the source dictionary available over HTTP.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The data format. Valid values are all formats supported by ClickHouse SQL dialect.
	Format               string   `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_HttpSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_HttpSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_HttpSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_HttpSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 0}
}

func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_HttpSource) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_HttpSource) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MysqlSource struct {
	// Name of the MySQL database to connect to.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the database table to use as a ClickHouse dictionary.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Default port to use when connecting to a replica of the dictionary source.
	Port int64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the default user for replicas of the dictionary source.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the default user for replicas of the dictionary source.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// List of MySQL replicas of the database used as dictionary source.
	Replicas []*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica `protobuf:"bytes,6,rep,name=replicas,proto3" json:"replicas,omitempty"`
	// Selection criteria for the data in the specified MySQL table.
	Where string `protobuf:"bytes,7,opt,name=where,proto3" json:"where,omitempty"`
	// Query for checking the dictionary status, to pull only updated data.
	// For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
	InvalidateQuery      string   `protobuf:"bytes,8,opt,name=invalidate_query,json=invalidateQuery,proto3" json:"invalidate_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_MysqlSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_MysqlSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_MysqlSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 1}
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetReplicas() []*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetWhere() string {
	if m != nil {
		return m.Where
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetInvalidateQuery() string {
	if m != nil {
		return m.InvalidateQuery
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MysqlSource_Replica struct {
	// MySQL host of the replica.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The priority of the replica that ClickHouse takes into account when connecting.
	// Replica with the highest priority should have this field set to the lowest number.
	Priority int64 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Port to use when connecting to the replica.
	// If a port is not specified for a replica, ClickHouse uses the port specified for the source.
	Port int64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the MySQL database user.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the MySQL database user.
	Password             string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_MysqlSource_Replica{}
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 1, 0}
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_ClickhouseSource struct {
	// Name of the ClickHouse database.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the table in the specified database to be used as the dictionary source.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// ClickHouse host of the specified database.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the ClickHouse database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the ClickHouse database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Selection criteria for the data in the specified ClickHouse table.
	Where                string   `protobuf:"bytes,7,opt,name=where,proto3" json:"where,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_ClickhouseSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 2}
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetWhere() string {
	if m != nil {
		return m.Where
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MongodbSource struct {
	// Name of the MongoDB database.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the collection in the specified database to be used as the dictionary source.
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// MongoDB host of the specified database.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the MongoDB database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the MongoDB database user.
	Password             string   `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_MongodbSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_MongodbSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_MongodbSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 3}
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_PostgresqlSource struct {
	// Name of the PostrgreSQL database.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the table in the specified database to be used as the dictionary source.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Name of the PostrgreSQL host
	Hosts []string `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the PostrgreSQL database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the PostrgreSQL database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Query for checking the dictionary status, to pull only updated data.
	// For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
	InvalidateQuery string `protobuf:"bytes,7,opt,name=invalidate_query,json=invalidateQuery,proto3" json:"invalidate_query,omitempty"`
	// Mode of SSL TCP/IP connection to the PostgreSQL host.
	// For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
	SslMode              ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode `protobuf:"varint,8,opt,name=ssl_mode,json=sslMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode" json:"ssl_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_PostgresqlSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 4}
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_PostgresqlSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_PostgresqlSource.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_PostgresqlSource.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_PostgresqlSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_PostgresqlSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_PostgresqlSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetInvalidateQuery() string {
	if m != nil {
		return m.InvalidateQuery
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetSslMode() ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode {
	if m != nil {
		return m.SslMode
	}
	return ClickhouseConfig_ExternalDictionary_PostgresqlSource_SSL_MODE_UNSPECIFIED
}

type ClickhouseConfig_ExternalDictionary_Structure struct {
	// Single numeric key column for the dictionary.
	Id *ClickhouseConfig_ExternalDictionary_Structure_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Composite key for the dictionary, containing of one or more key columns.
	// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
	Key *ClickhouseConfig_ExternalDictionary_Structure_Key `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
	// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
	RangeMin *ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,4,opt,name=range_min,json=rangeMin,proto3" json:"range_min,omitempty"`
	// Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
	// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
	RangeMax *ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,5,opt,name=range_max,json=rangeMax,proto3" json:"range_max,omitempty"`
	// Description of the fields available for database queries.
	// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
	Attributes           []*ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Structure{}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Structure) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Structure) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 5}
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Structure) GetId() *ClickhouseConfig_ExternalDictionary_Structure_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) GetKey() *ClickhouseConfig_ExternalDictionary_Structure_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) GetRangeMin() *ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if m != nil {
		return m.RangeMin
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) GetRangeMax() *ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if m != nil {
		return m.RangeMax
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) GetAttributes() []*ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_Structure_Attribute struct {
	// Name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the column.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Default value for an element without data (for example, an empty string).
	NullValue string `protobuf:"bytes,3,opt,name=null_value,json=nullValue,proto3" json:"null_value,omitempty"`
	// Expression, describing the attribute, if applicable.
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	// Indication of hierarchy support.
	// Default value: `false`.
	Hierarchical bool `protobuf:"varint,5,opt,name=hierarchical,proto3" json:"hierarchical,omitempty"`
	// Indication of injective mapping "id -> attribute".
	// Default value: `false`.
	Injective            bool     `protobuf:"varint,6,opt,name=injective,proto3" json:"injective,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Structure_Attribute{}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Structure_Attribute) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Structure_Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 5, 0}
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetNullValue() string {
	if m != nil {
		return m.NullValue
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetHierarchical() bool {
	if m != nil {
		return m.Hierarchical
	}
	return false
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetInjective() bool {
	if m != nil {
		return m.Injective
	}
	return false
}

// Numeric key.
type ClickhouseConfig_ExternalDictionary_Structure_Id struct {
	// Name of the numeric key.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Structure_Id{}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Structure_Id) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Structure_Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 5, 1}
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Complex key.
type ClickhouseConfig_ExternalDictionary_Structure_Key struct {
	// Attributes of a complex key.
	Attributes           []*ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Structure_Key{}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Structure_Key) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Structure_Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 5, 2}
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) GetAttributes() []*ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Layout determining how to store the dictionary in memory.
type ClickhouseConfig_ExternalDictionary_Layout struct {
	// Layout type for an external dictionary.
	Type ClickhouseConfig_ExternalDictionary_Layout_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_Layout_Type" json:"type,omitempty"`
	// Number of cells in the cache. Rounded up to a power of two.
	// Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
	SizeInCells          int64    `protobuf:"varint,2,opt,name=size_in_cells,json=sizeInCells,proto3" json:"size_in_cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Layout) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Layout{}
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Layout) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Layout) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 6}
}

func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Layout) GetType() ClickhouseConfig_ExternalDictionary_Layout_Type {
	if m != nil {
		return m.Type
	}
	return ClickhouseConfig_ExternalDictionary_Layout_TYPE_UNSPECIFIED
}

func (m *ClickhouseConfig_ExternalDictionary_Layout) GetSizeInCells() int64 {
	if m != nil {
		return m.SizeInCells
	}
	return 0
}

type ClickhouseConfig_ExternalDictionary_Range struct {
	// Minimum dictionary lifetime.
	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum dictionary lifetime.
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Range) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Range{}
}
func (m *ClickhouseConfig_ExternalDictionary_Range) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_ExternalDictionary_Range) ProtoMessage()    {}
func (*ClickhouseConfig_ExternalDictionary_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 2, 7}
}

func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.Merge(m, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Range) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_Range) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

// Rollup settings for the GraphiteMergeTree table engine.
type ClickhouseConfig_GraphiteRollup struct {
	// Name for the specified combination of settings for Graphite rollup.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pattern to use for the rollup.
	Patterns             []*ClickhouseConfig_GraphiteRollup_Pattern `protobuf:"bytes,2,rep,name=patterns,proto3" json:"patterns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ClickhouseConfig_GraphiteRollup) Reset()         { *m = ClickhouseConfig_GraphiteRollup{} }
func (m *ClickhouseConfig_GraphiteRollup) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_GraphiteRollup) ProtoMessage()    {}
func (*ClickhouseConfig_GraphiteRollup) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 3}
}

func (m *ClickhouseConfig_GraphiteRollup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup.Unmarshal(m, b)
}
func (m *ClickhouseConfig_GraphiteRollup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_GraphiteRollup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup.Merge(m, src)
}
func (m *ClickhouseConfig_GraphiteRollup) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup.Size(m)
}
func (m *ClickhouseConfig_GraphiteRollup) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_GraphiteRollup proto.InternalMessageInfo

func (m *ClickhouseConfig_GraphiteRollup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClickhouseConfig_GraphiteRollup) GetPatterns() []*ClickhouseConfig_GraphiteRollup_Pattern {
	if m != nil {
		return m.Patterns
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern struct {
	// Pattern for metric names.
	Regexp string `protobuf:"bytes,1,opt,name=regexp,proto3" json:"regexp,omitempty"`
	// Name of the aggregating function to apply to data of the age specified in [retention].
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Age of data to use for thinning.
	Retention            []*ClickhouseConfig_GraphiteRollup_Pattern_Retention `protobuf:"bytes,3,rep,name=retention,proto3" json:"retention,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern) Reset() {
	*m = ClickhouseConfig_GraphiteRollup_Pattern{}
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_GraphiteRollup_Pattern) ProtoMessage()    {}
func (*ClickhouseConfig_GraphiteRollup_Pattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 3, 0}
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.Unmarshal(m, b)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.Merge(m, src)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.Size(m)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern proto.InternalMessageInfo

func (m *ClickhouseConfig_GraphiteRollup_Pattern) GetRegexp() string {
	if m != nil {
		return m.Regexp
	}
	return ""
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern) GetRetention() []*ClickhouseConfig_GraphiteRollup_Pattern_Retention {
	if m != nil {
		return m.Retention
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern_Retention struct {
	// Minimum age of the data in seconds.
	Age int64 `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty"`
	// Precision of determining the age of the data, in seconds.
	Precision            int64    `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) Reset() {
	*m = ClickhouseConfig_GraphiteRollup_Pattern_Retention{}
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) ProtoMessage() {}
func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{0, 3, 0, 0}
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.Unmarshal(m, b)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.Merge(m, src)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.Size(m)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention proto.InternalMessageInfo

func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetPrecision() int64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

type ClickhouseConfigSet struct {
	// Effective settings for a ClickHouse cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *ClickhouseConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a ClickHouse cluster.
	UserConfig *ClickhouseConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a ClickHouse cluster.
	DefaultConfig        *ClickhouseConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClickhouseConfigSet) Reset()         { *m = ClickhouseConfigSet{} }
func (m *ClickhouseConfigSet) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfigSet) ProtoMessage()    {}
func (*ClickhouseConfigSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d960d4060d8a4a84, []int{1}
}

func (m *ClickhouseConfigSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfigSet.Unmarshal(m, b)
}
func (m *ClickhouseConfigSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfigSet.Marshal(b, m, deterministic)
}
func (m *ClickhouseConfigSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfigSet.Merge(m, src)
}
func (m *ClickhouseConfigSet) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfigSet.Size(m)
}
func (m *ClickhouseConfigSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfigSet.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfigSet proto.InternalMessageInfo

func (m *ClickhouseConfigSet) GetEffectiveConfig() *ClickhouseConfig {
	if m != nil {
		return m.EffectiveConfig
	}
	return nil
}

func (m *ClickhouseConfigSet) GetUserConfig() *ClickhouseConfig {
	if m != nil {
		return m.UserConfig
	}
	return nil
}

func (m *ClickhouseConfigSet) GetDefaultConfig() *ClickhouseConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func init() {
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel", ClickhouseConfig_LogLevel_name, ClickhouseConfig_LogLevel_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Compression_Method", ClickhouseConfig_Compression_Method_name, ClickhouseConfig_Compression_Method_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode", ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_name, ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_Layout_Type", ClickhouseConfig_ExternalDictionary_Layout_Type_name, ClickhouseConfig_ExternalDictionary_Layout_Type_value)
	proto.RegisterType((*ClickhouseConfig)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig")
	proto.RegisterType((*ClickhouseConfig_MergeTree)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree")
	proto.RegisterType((*ClickhouseConfig_Compression)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_HttpSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_MysqlSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_ClickhouseSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_MongodbSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_PostgresqlSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Structure)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Structure_Attribute)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Structure_Id)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Structure_Key)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Layout)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Range)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range")
	proto.RegisterType((*ClickhouseConfig_GraphiteRollup)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup")
	proto.RegisterType((*ClickhouseConfig_GraphiteRollup_Pattern)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern")
	proto.RegisterType((*ClickhouseConfig_GraphiteRollup_Pattern_Retention)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention")
	proto.RegisterType((*ClickhouseConfigSet)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet")
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto", fileDescriptor_d960d4060d8a4a84)
}

var fileDescriptor_d960d4060d8a4a84 = []byte{
	// 2584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x9a, 0x4b, 0x8f, 0xdb, 0xd6,
	0x15, 0x80, 0xa3, 0xe7, 0x48, 0x47, 0x1e, 0x0d, 0x7d, 0xe3, 0x07, 0xa3, 0xf8, 0x95, 0x81, 0xdb,
	0x38, 0x08, 0xac, 0xb1, 0xec, 0xd8, 0x69, 0xd0, 0xc6, 0x88, 0x5e, 0xe3, 0x51, 0xac, 0x79, 0xf8,
	0x4a, 0x7e, 0x24, 0x41, 0xc3, 0x52, 0xe2, 0x95, 0xc4, 0x98, 0xe2, 0x65, 0x2e, 0xa9, 0x19, 0x29,
	0x01, 0x02, 0x24, 0x8b, 0x2e, 0xb2, 0x08, 0xfa, 0x0b, 0xba, 0x6a, 0x7f, 0x40, 0x97, 0xdd, 0xa5,
	0x8b, 0xc2, 0xd9, 0x14, 0xe8, 0xa2, 0x40, 0x7f, 0x41, 0x81, 0xfe, 0x06, 0x2f, 0x8a, 0xe2, 0xde,
	0x4b, 0x4a, 0x94, 0x66, 0x6c, 0x4d, 0x15, 0x4d, 0xb3, 0x23, 0x0f, 0x79, 0xbe, 0xf3, 0xb8, 0xaf,
	0x73, 0x28, 0xc1, 0x9d, 0x91, 0x6e, 0x1b, 0x64, 0xb8, 0xd1, 0xb6, 0xe8, 0xc0, 0xd8, 0xe8, 0x1b,
	0xad, 0x8d, 0xb6, 0x65, 0xb6, 0x9f, 0xf6, 0xe8, 0xc0, 0x25, 0x1b, 0xfb, 0x85, 0x8d, 0x36, 0xb5,
	0x3b, 0x66, 0x37, 0x24, 0xcc, 0x3b, 0x8c, 0x7a, 0x14, 0xfd, 0x4c, 0xea, 0xe5, 0x85, 0x5e, 0xbe,
	0x6f, 0xb4, 0xf2, 0xa1, 0x57, 0xf6, 0x0b, 0x79, 0xa9, 0x97, 0xbb, 0xd4, 0xa5, 0xb4, 0x6b, 0x91,
	0x0d, 0xa1, 0xd4, 0x1a, 0x74, 0x36, 0x0e, 0x98, 0xee, 0x38, 0x84, 0xb9, 0x12, 0x93, 0xbb, 0x38,
	0x65, 0x7e, 0x5f, 0xb7, 0x4c, 0x43, 0xf7, 0x4c, 0x6a, 0xcb, 0xc7, 0xeb, 0x7f, 0xf8, 0x00, 0x94,
	0xf2, 0x98, 0x5b, 0x16, 0x4c, 0xf4, 0x6b, 0x48, 0x5b, 0xb4, 0xab, 0x59, 0x64, 0x9f, 0x58, 0x6a,
	0xe4, 0x4a, 0xe4, 0x5a, 0xf6, 0xe6, 0x07, 0xf9, 0x63, 0xb9, 0x93, 0x9f, 0x65, 0xe5, 0xeb, 0xb4,
	0x5b, 0xe7, 0x1c, 0x9c, 0xb2, 0xfc, 0x2b, 0xf4, 0x1b, 0x80, 0x3e, 0x61, 0x5d, 0xa2, 0x79, 0x8c,
	0x10, 0x35, 0x7a, 0x25, 0x72, 0x2d, 0x73, 0xb3, 0xb8, 0x28, 0x7f, 0x9b, 0x93, 0x9a, 0x8c, 0x10,
	0x9c, 0xee, 0x07, 0x97, 0x88, 0x40, 0xa6, 0x4d, 0xfb, 0x0e, 0x23, 0xae, 0x6b, 0x52, 0x5b, 0x8d,
	0x5d, 0x89, 0x5d, 0xcb, 0xdc, 0x2c, 0x2f, 0x6a, 0xa2, 0x3c, 0x41, 0xe1, 0x30, 0x17, 0xd9, 0x70,
	0xca, 0x30, 0xdb, 0x3c, 0x9b, 0x3a, 0x33, 0x89, 0xab, 0xc6, 0x85, 0x9d, 0x0f, 0x17, 0xb5, 0x53,
	0x1d, 0x7a, 0x84, 0xd9, 0xba, 0x55, 0x09, 0x98, 0x23, 0x3c, 0xc5, 0x47, 0x14, 0xd6, 0xba, 0x4c,
	0x77, 0x7a, 0xa6, 0x47, 0x34, 0x46, 0x2d, 0x6b, 0xe0, 0xa8, 0x09, 0x61, 0x72, 0x73, 0x51, 0x93,
	0xf7, 0x7c, 0x1c, 0x16, 0x34, 0x9c, 0xed, 0x4e, 0xdd, 0xa3, 0x1d, 0x58, 0xeb, 0xeb, 0x43, 0xad,
	0x4d, 0x6d, 0x9b, 0x08, 0x3f, 0x5c, 0x35, 0x29, 0x86, 0xeb, 0xf5, 0xbc, 0x9c, 0x76, 0xf9, 0x60,
	0xda, 0xe5, 0x6b, 0xb6, 0x77, 0xe7, 0x9d, 0x47, 0xba, 0x35, 0x20, 0xa5, 0xd4, 0xf3, 0x67, 0x85,
	0xf8, 0xdd, 0xf7, 0x0b, 0x37, 0x70, 0xb6, 0xaf, 0x0f, 0xcb, 0x13, 0x65, 0xf4, 0x09, 0x9c, 0xf3,
	0x79, 0xed, 0x01, 0x63, 0xc4, 0xf6, 0xb4, 0xcf, 0x07, 0x44, 0xa4, 0x6e, 0xe5, 0x7f, 0xc1, 0x9e,
	0x91, 0x58, 0x9f, 0xf1, 0x40, 0x22, 0x50, 0x0d, 0xd0, 0x53, 0x42, 0x1c, 0x4d, 0xb7, 0xcc, 0x7d,
	0xa2, 0x79, 0x66, 0x9f, 0xd0, 0x81, 0xa7, 0xa6, 0xe6, 0x82, 0xb1, 0xc2, 0xd5, 0x8a, 0x5c, 0xab,
	0x29, 0x95, 0x50, 0x03, 0xce, 0x0f, 0xec, 0x60, 0xa4, 0x89, 0xa1, 0xb5, 0xf5, 0x76, 0x8f, 0x68,
	0xae, 0xf9, 0x05, 0x51, 0xd3, 0xf3, 0x79, 0x67, 0xc3, 0xba, 0x65, 0xae, 0xda, 0x30, 0xbf, 0x20,
	0xa8, 0xc9, 0x93, 0xc9, 0x9e, 0x86, 0x61, 0x30, 0x3f, 0xea, 0xb5, 0xe7, 0xcf, 0x0a, 0x99, 0xbb,
	0xb7, 0x6f, 0xdd, 0xf9, 0xc5, 0xbb, 0x37, 0xde, 0x2b, 0xdc, 0xbc, 0x81, 0x57, 0x39, 0x64, 0x42,
	0xdd, 0x95, 0x29, 0xf5, 0xf4, 0x96, 0x25, 0xa1, 0x9a, 0x47, 0x35, 0x83, 0x51, 0x47, 0xcd, 0xcc,
	0xf7, 0x14, 0xf5, 0xf5, 0x61, 0x93, 0x6b, 0x72, 0x54, 0x93, 0x56, 0x18, 0x75, 0xd0, 0x63, 0xc8,
	0x71, 0xa0, 0xa3, 0x33, 0xcf, 0xe4, 0xa3, 0x36, 0x0d, 0x5d, 0x9d, 0x0f, 0xe5, 0xfe, 0xec, 0x05,
	0xda, 0x21, 0xb0, 0x03, 0x57, 0x5b, 0x03, 0xd3, 0xf2, 0x4c, 0x5b, 0x0b, 0xcf, 0x6a, 0x8d, 0x11,
	0x8b, 0xea, 0x86, 0x66, 0xda, 0x1e, 0x61, 0xfb, 0xba, 0xa5, 0x9e, 0x9a, 0x9f, 0x94, 0xa8, 0x1a,
	0xc1, 0x6f, 0xf8, 0xb0, 0x4a, 0x88, 0x85, 0x05, 0xaa, 0xe6, 0x93, 0x50, 0x0e, 0x52, 0x7c, 0x1a,
	0x7c, 0x41, 0x6d, 0xa2, 0x66, 0xaf, 0x44, 0xae, 0xa5, 0xf1, 0xf8, 0x1e, 0x5d, 0x86, 0x4c, 0x97,
	0xd0, 0x96, 0xee, 0x12, 0x6d, 0xc0, 0x4c, 0x75, 0x4d, 0x3c, 0x06, 0x5f, 0xf4, 0x90, 0x99, 0xa8,
	0x09, 0x2a, 0x9f, 0x9c, 0x23, 0x8d, 0x6f, 0x85, 0x8c, 0x78, 0xc4, 0x1e, 0x67, 0x43, 0x55, 0x8e,
	0x31, 0x09, 0x84, 0x72, 0x9d, 0x76, 0x71, 0xa0, 0xea, 0x4f, 0x82, 0x23, 0xa9, 0xdc, 0x2d, 0xf5,
	0xf4, 0x22, 0x54, 0x3e, 0x65, 0x51, 0x23, 0xa0, 0x7a, 0x3d, 0x46, 0x74, 0x43, 0xc0, 0x89, 0xcd,
	0x07, 0xd6, 0x50, 0x91, 0xa0, 0xe6, 0x0e, 0x51, 0x4b, 0x94, 0x5a, 0x61, 0x68, 0x53, 0xa8, 0xd6,
	0x69, 0xb7, 0x2a, 0x15, 0x91, 0x0e, 0x97, 0x0f, 0x41, 0x67, 0xf2, 0xf0, 0xea, 0x7c, 0x8f, 0x5f,
	0x9f, 0x86, 0x4f, 0x67, 0xe3, 0xe5, 0x26, 0x44, 0x52, 0xce, 0x2c, 0x6e, 0x42, 0xa4, 0x06, 0xc3,
	0x79, 0x3e, 0x95, 0x8f, 0xf2, 0xfe, 0xec, 0x7c, 0xf4, 0x19, 0xae, 0x7b, 0xc8, 0xed, 0xa3, 0x99,
	0xc2, 0xdd, 0x73, 0x0b, 0x30, 0x85, 0x9f, 0x5b, 0x80, 0xfa, 0xc4, 0x63, 0x66, 0x7b, 0x6a, 0xf0,
	0xce, 0xcf, 0x1d, 0x3c, 0x45, 0x6a, 0x85, 0xc6, 0xed, 0x11, 0xbc, 0x16, 0x22, 0xcd, 0xc4, 0xac,
	0x1e, 0x67, 0xfd, 0x06, 0xc4, 0xe9, 0xa8, 0x5f, 0xc4, 0x15, 0x71, 0xbf, 0xb6, 0x10, 0x57, 0x44,
	0xbe, 0x09, 0xa7, 0x3d, 0xa6, 0xb7, 0xc9, 0x54, 0xe0, 0xb9, 0xb9, 0x81, 0xaf, 0x09, 0xa5, 0x50,
	0xdc, 0x4d, 0x50, 0x27, 0x9c, 0x99, 0xb0, 0x5f, 0x3f, 0xc6, 0xd2, 0x0a, 0x78, 0x87, 0x16, 0xec,
	0x51, 0x54, 0x11, 0xf4, 0x85, 0x45, 0xa8, 0x22, 0xe6, 0x0a, 0x28, 0x1e, 0x19, 0x7a, 0x53, 0x21,
	0x5f, 0x9c, 0x1b, 0x72, 0x96, 0xeb, 0x84, 0x22, 0xc6, 0x70, 0x7e, 0x4c, 0x99, 0x09, 0xf8, 0xd2,
	0x31, 0xe6, 0xa1, 0x4f, 0x3b, 0x34, 0xb7, 0x8f, 0x60, 0x8a, 0x70, 0x2f, 0x2f, 0xc0, 0x14, 0xd1,
	0x76, 0x20, 0x3b, 0x66, 0xca, 0xa2, 0xf2, 0xca, 0x92, 0x8a, 0xca, 0x53, 0xbe, 0x3d, 0x71, 0x97,
	0xfb, 0x57, 0x02, 0xd2, 0xe3, 0x7a, 0x10, 0xb5, 0xe1, 0x32, 0x23, 0x8e, 0x65, 0xb6, 0x75, 0x8f,
	0x18, 0x9a, 0x41, 0x8c, 0x81, 0xbc, 0xe1, 0xf1, 0x1c, 0x98, 0xb6, 0x41, 0x0f, 0x44, 0x6d, 0x3b,
	0x27, 0xa2, 0x8b, 0x13, 0x46, 0x25, 0x8c, 0x78, 0x2c, 0x08, 0x88, 0xc1, 0x9b, 0x73, 0x8c, 0x68,
	0x2e, 0x69, 0x53, 0xdb, 0x70, 0xfd, 0x42, 0xf7, 0xa5, 0xc6, 0xae, 0xbe, 0xd4, 0x58, 0x43, 0x82,
	0xd0, 0x0e, 0x9c, 0xe5, 0x5b, 0x88, 0x2b, 0x0e, 0x65, 0x62, 0xe9, 0x23, 0xcd, 0xb4, 0x5d, 0xc2,
	0x3c, 0x35, 0x76, 0x8c, 0x13, 0x5f, 0x68, 0x36, 0x69, 0x85, 0xeb, 0xd5, 0x84, 0xda, 0x14, 0xcf,
	0xeb, 0x31, 0x7a, 0x10, 0xf0, 0xe2, 0xc7, 0xe7, 0x35, 0xb9, 0x9e, 0xcf, 0xd3, 0xe0, 0x12, 0xaf,
	0x20, 0x42, 0x79, 0x11, 0x95, 0xb9, 0xab, 0x99, 0x36, 0xaf, 0xf7, 0x06, 0x44, 0x4d, 0xcc, 0x07,
	0xf3, 0x22, 0x04, 0x8f, 0x09, 0x62, 0x54, 0xdd, 0x9a, 0xfd, 0x80, 0xab, 0xa3, 0xef, 0x22, 0xf0,
	0x9e, 0x3d, 0xe8, 0xb7, 0x08, 0xd3, 0x68, 0x47, 0xeb, 0x30, 0x42, 0x34, 0x62, 0x7b, 0xa2, 0x98,
	0x30, 0x6d, 0xcd, 0xa1, 0xd4, 0xe2, 0xa1, 0x58, 0xf4, 0x80, 0x30, 0x8d, 0x7b, 0x22, 0x2a, 0x18,
	0xda, 0x91, 0x6e, 0x1c, 0xa3, 0x82, 0xc5, 0x79, 0x49, 0xdf, 0xed, 0x6c, 0x32, 0x42, 0xaa, 0x12,
	0x5d, 0xb3, 0xf7, 0x28, 0xb5, 0x9a, 0xb4, 0xce, 0xb1, 0xdb, 0xfa, 0x90, 0xaf, 0x96, 0xdd, 0x8e,
	0x70, 0x0c, 0xf5, 0xe1, 0x4d, 0x6e, 0xa7, 0x35, 0xf2, 0x88, 0xc8, 0xa2, 0x6c, 0x6f, 0x74, 0x4f,
	0xeb, 0x9b, 0xb6, 0xe6, 0x3a, 0x7c, 0xfb, 0xf0, 0x1d, 0x3b, 0x46, 0xa1, 0x8b, 0x2f, 0xf7, 0xf5,
	0x61, 0x89, 0xa3, 0x9a, 0x54, 0xe0, 0x8b, 0xde, 0xb6, 0x69, 0x37, 0x38, 0x45, 0xfa, 0x90, 0xfb,
	0x26, 0x0a, 0x99, 0x50, 0x53, 0x82, 0x5a, 0x90, 0xec, 0x13, 0xaf, 0x47, 0x0d, 0xbf, 0x59, 0xfb,
	0x70, 0x09, 0x9d, 0x4e, 0x7e, 0x5b, 0x10, 0xb1, 0x4f, 0x46, 0x6f, 0xc3, 0x2a, 0x0f, 0x46, 0x9c,
	0x7b, 0x62, 0x87, 0xe1, 0xd3, 0x39, 0x56, 0x5a, 0x79, 0xfe, 0xac, 0x10, 0xbb, 0xfb, 0x7e, 0x01,
	0x67, 0xfa, 0xa6, 0xcd, 0xab, 0x3e, 0xb1, 0x89, 0x5c, 0x87, 0x57, 0xa7, 0x5e, 0xd6, 0x18, 0x9f,
	0xc6, 0x62, 0x7e, 0x46, 0xb0, 0x12, 0x7a, 0x13, 0x73, 0xf9, 0xfa, 0x2d, 0x48, 0x4a, 0x6b, 0xe8,
	0x1c, 0xa0, 0xed, 0x6a, 0x73, 0x6b, 0xb7, 0xa2, 0x3d, 0xdc, 0x69, 0xec, 0x55, 0xcb, 0xb5, 0xcd,
	0x5a, 0xb5, 0xa2, 0xbc, 0x82, 0x56, 0x20, 0x56, 0xff, 0xf8, 0x1d, 0x25, 0x82, 0x52, 0x10, 0xff,
	0xb8, 0xd1, 0xac, 0x28, 0xd1, 0xdc, 0xdf, 0x2f, 0x01, 0x3a, 0xdc, 0x31, 0x21, 0x15, 0xe2, 0xb6,
	0xde, 0x27, 0x22, 0x13, 0xe9, 0x52, 0xfc, 0xdf, 0xcf, 0x0a, 0x11, 0x2c, 0x24, 0x68, 0x08, 0x69,
	0xd7, 0x63, 0x83, 0xb6, 0x37, 0x60, 0x41, 0xd7, 0xd9, 0x5c, 0x5e, 0xab, 0x96, 0x6f, 0x04, 0x6c,
	0xdf, 0xe8, 0xc4, 0x18, 0xa2, 0x90, 0xb4, 0xf4, 0x11, 0xef, 0x46, 0xe4, 0x0a, 0x7d, 0xb0, 0x44,
	0xb3, 0x75, 0x01, 0xf6, 0x6d, 0xfa, 0x66, 0xd0, 0x9b, 0x90, 0xed, 0x98, 0x43, 0x62, 0x68, 0x96,
	0xd9, 0x21, 0x62, 0xef, 0xe6, 0x4b, 0x39, 0xb6, 0xf5, 0x0a, 0x5e, 0x15, 0xf2, 0xba, 0x2f, 0x46,
	0x23, 0xc8, 0x06, 0xaf, 0x68, 0x4c, 0xb7, 0xbb, 0xc1, 0xd2, 0xdc, 0x5b, 0xa2, 0x87, 0x98, 0x73,
	0xb9, 0xe9, 0xc0, 0x92, 0x10, 0xa0, 0x21, 0x64, 0x7a, 0x9e, 0xe7, 0x68, 0x2e, 0x1d, 0xb0, 0x76,
	0xb0, 0x2a, 0x1f, 0x2e, 0xd1, 0xee, 0x96, 0xe7, 0x39, 0x0d, 0x01, 0xdf, 0x8a, 0x60, 0xe8, 0x8d,
	0xef, 0xd0, 0x97, 0x70, 0xaa, 0x3f, 0x72, 0x3f, 0xb7, 0x02, 0xd3, 0x72, 0x49, 0x3e, 0x5a, 0xa2,
	0xe9, 0x6d, 0x8e, 0x1f, 0xdb, 0xce, 0xf4, 0x27, 0xb7, 0xe8, 0xdb, 0x08, 0x9c, 0x9e, 0x70, 0x03,
	0x17, 0x64, 0x97, 0xfa, 0xc9, 0x12, 0x5d, 0x98, 0xbc, 0x33, 0xf6, 0x43, 0x69, 0xcf, 0xc8, 0xd0,
	0xd7, 0x11, 0xc8, 0xf6, 0xa9, 0xdd, 0xa5, 0x46, 0x2b, 0xf0, 0x44, 0xf6, 0xb7, 0x4f, 0x96, 0x99,
	0x0c, 0x69, 0x60, 0xec, 0xc6, 0x6a, 0x3f, 0x2c, 0x10, 0x09, 0x71, 0xa8, 0xeb, 0x75, 0x19, 0x09,
	0x8d, 0x09, 0x2c, 0x3d, 0x21, 0x7b, 0x63, 0x1b, 0x93, 0x84, 0x38, 0x33, 0xb2, 0x5c, 0x09, 0x60,
	0x32, 0x6d, 0xd0, 0x39, 0x88, 0x0d, 0x98, 0x35, 0xb5, 0x95, 0x70, 0x01, 0xba, 0x00, 0xc9, 0x0e,
	0x65, 0x7d, 0xdd, 0x13, 0xdb, 0x48, 0xf0, 0xc8, 0x97, 0xe5, 0xfe, 0x13, 0x83, 0x4c, 0x68, 0x02,
	0xa0, 0x33, 0x10, 0x35, 0x5a, 0x53, 0x90, 0xa8, 0xd1, 0x42, 0x39, 0x48, 0x88, 0x9e, 0x7d, 0x0a,
	0x21, 0x45, 0xe8, 0x32, 0xc4, 0x1d, 0xea, 0x9f, 0xe7, 0xb1, 0x52, 0xe6, 0xf9, 0xb3, 0xc2, 0xca,
	0x8d, 0xeb, 0x77, 0x6e, 0xdf, 0xbe, 0x75, 0x1b, 0x8b, 0x07, 0x08, 0x41, 0x7c, 0xe0, 0x12, 0x26,
	0x56, 0x75, 0x1a, 0x8b, 0x6b, 0xde, 0xec, 0x3a, 0xba, 0xeb, 0x1e, 0x50, 0x66, 0x88, 0x45, 0x9c,
	0xc6, 0xe3, 0x7b, 0xf4, 0x4d, 0x04, 0x52, 0xfe, 0x71, 0xec, 0xaa, 0x49, 0xf1, 0xc9, 0xe8, 0xd3,
	0x93, 0x99, 0xee, 0x79, 0xff, 0xcc, 0x2e, 0x25, 0xbf, 0xf9, 0xa1, 0x10, 0xbd, 0x7b, 0x03, 0x8f,
	0xed, 0xa2, 0x33, 0x90, 0x38, 0xe8, 0x11, 0x26, 0xd7, 0x5b, 0x1a, 0xcb, 0x1b, 0xf4, 0x16, 0x28,
	0xa6, 0xed, 0x7f, 0x96, 0x24, 0xe2, 0x73, 0xd0, 0x48, 0xac, 0x86, 0x34, 0x5e, 0x9b, 0xc8, 0x1f,
	0x70, 0x71, 0xee, 0x8f, 0x11, 0x58, 0xf1, 0xf1, 0xe8, 0x0d, 0x88, 0xf7, 0xa8, 0xeb, 0xf9, 0x69,
	0x5d, 0xe5, 0xd9, 0xfb, 0xf6, 0x87, 0x42, 0xe2, 0x57, 0xef, 0xdf, 0xbc, 0x7d, 0x0b, 0x8b, 0x47,
	0xe8, 0xe7, 0x90, 0x72, 0x98, 0x49, 0x99, 0xe9, 0x8d, 0xfc, 0xc3, 0x0a, 0xf8, 0x6b, 0xcf, 0x9f,
	0x49, 0xbf, 0x82, 0x67, 0x4b, 0xcf, 0x76, 0xee, 0x1f, 0x91, 0xf0, 0x37, 0xd5, 0x85, 0x67, 0x41,
	0x10, 0x62, 0xec, 0xc5, 0x21, 0x06, 0xae, 0xc7, 0x5f, 0xe4, 0xba, 0xea, 0xbb, 0x9e, 0x08, 0x9f,
	0x86, 0x87, 0x02, 0x48, 0xce, 0x4c, 0x97, 0x23, 0x47, 0x2a, 0xf7, 0xd7, 0x08, 0xac, 0x4e, 0xad,
	0xe5, 0x17, 0xc4, 0x74, 0x15, 0xa0, 0x4d, 0x2d, 0x4b, 0x7e, 0xf3, 0x9b, 0x0a, 0x2c, 0x24, 0xff,
	0xe9, 0xa2, 0xcb, 0xfd, 0x2d, 0x06, 0xca, 0xec, 0x66, 0xb0, 0xc0, 0xf0, 0x5c, 0x80, 0x04, 0xf7,
	0xd2, 0x15, 0x5f, 0x97, 0xd3, 0xe3, 0xf9, 0x2e, 0x85, 0x27, 0x35, 0x32, 0x47, 0xad, 0x96, 0x95,
	0x23, 0x57, 0x0b, 0xfa, 0x0a, 0x52, 0xae, 0x6b, 0x69, 0x7d, 0x6a, 0xc8, 0xe3, 0x25, 0x7b, 0xb3,
	0x7d, 0x82, 0xbb, 0x69, 0xbe, 0xe1, 0x5a, 0xdb, 0xd4, 0x20, 0x78, 0xc5, 0x95, 0x17, 0xeb, 0x5d,
	0x58, 0xf1, 0x65, 0x48, 0x85, 0x33, 0x8d, 0x46, 0x5d, 0xdb, 0xde, 0xad, 0x54, 0x67, 0xea, 0xba,
	0x0c, 0xac, 0x54, 0x6a, 0x8d, 0x62, 0xa9, 0x5e, 0x55, 0x22, 0x28, 0x0d, 0x89, 0x62, 0xbd, 0xbe,
	0xfb, 0x58, 0x89, 0x22, 0x80, 0xe4, 0x1e, 0xae, 0x6e, 0x56, 0xb1, 0x12, 0x43, 0xab, 0x90, 0x7e,
	0x54, 0xc5, 0xb5, 0xcd, 0x8f, 0xb4, 0x72, 0x51, 0x89, 0xa3, 0x35, 0xc8, 0xf8, 0xb7, 0x9b, 0x0f,
	0xeb, 0x75, 0x25, 0x91, 0xfb, 0xe7, 0x0a, 0xa4, 0xc7, 0xc5, 0x17, 0xea, 0x42, 0xd4, 0x34, 0xfc,
	0xc6, 0xee, 0xf1, 0x49, 0x94, 0x77, 0xf9, 0x9a, 0x81, 0xa3, 0xa6, 0x81, 0x3e, 0x83, 0xd8, 0x53,
	0x32, 0xf2, 0x2b, 0xba, 0x27, 0x27, 0x62, 0xe9, 0x3e, 0x19, 0x61, 0x6e, 0x04, 0x7d, 0x09, 0x69,
	0x51, 0x9d, 0xf1, 0x7e, 0xc2, 0xef, 0xca, 0x3e, 0x3d, 0x11, 0x8b, 0x45, 0xcf, 0x63, 0x66, 0x6b,
	0xe0, 0x11, 0x9c, 0x12, 0x06, 0xb7, 0x4d, 0x3b, 0x64, 0x5c, 0x1f, 0xfa, 0xe5, 0xe1, 0xff, 0xc9,
	0xb8, 0x3e, 0x44, 0xbf, 0x8d, 0x00, 0xe8, 0x81, 0x9c, 0xf7, 0xd0, 0xb1, 0x93, 0x37, 0x3f, 0x5e,
	0xcb, 0x21, 0xcb, 0xb9, 0xef, 0x23, 0x90, 0x1e, 0xbf, 0xf1, 0x92, 0x2e, 0x43, 0x85, 0xb8, 0x37,
	0x72, 0xa6, 0x77, 0x0c, 0x21, 0x41, 0x17, 0x01, 0xec, 0x81, 0x65, 0x69, 0xfb, 0xbc, 0xc9, 0x93,
	0xfb, 0x1e, 0x4e, 0x73, 0x89, 0xe8, 0xfa, 0xd0, 0x25, 0x00, 0x32, 0x1c, 0xff, 0x64, 0x25, 0xcf,
	0x9a, 0x90, 0x04, 0xad, 0xc3, 0xa9, 0x9e, 0x49, 0x98, 0xce, 0xda, 0x3d, 0xb3, 0xad, 0x5b, 0x62,
	0x24, 0x52, 0x78, 0x4a, 0x86, 0x2e, 0x40, 0xda, 0xb4, 0x3f, 0xe3, 0x3b, 0xec, 0xbe, 0xac, 0xa8,
	0x53, 0x78, 0x22, 0xc8, 0x5d, 0x82, 0x68, 0xcd, 0x78, 0xb1, 0xeb, 0xb9, 0xef, 0x22, 0x10, 0xbb,
	0x4f, 0x46, 0xb3, 0x39, 0x8f, 0xfc, 0x64, 0x39, 0xff, 0x7d, 0x14, 0x92, 0xb2, 0xbf, 0x41, 0x8e,
	0x9f, 0x56, 0xd9, 0xe0, 0x3e, 0x5a, 0x7a, 0x03, 0x95, 0x6f, 0x8e, 0x1c, 0x32, 0x35, 0x5c, 0xeb,
	0xb0, 0x2a, 0x5a, 0x57, 0xd3, 0xd6, 0xda, 0xc4, 0xb2, 0xe4, 0xf7, 0x9b, 0x18, 0xce, 0x70, 0x61,
	0xcd, 0x2e, 0x73, 0xd1, 0xfa, 0x57, 0x10, 0xe7, 0x7a, 0xe8, 0x0c, 0x28, 0xcd, 0x8f, 0xf6, 0x66,
	0x37, 0xb7, 0x14, 0xc4, 0x37, 0xeb, 0xc5, 0xa6, 0x12, 0xe1, 0xdb, 0xd9, 0x56, 0xb1, 0xb1, 0x55,
	0xad, 0x28, 0x51, 0xde, 0xe2, 0x96, 0x77, 0xb7, 0xf7, 0xea, 0xd5, 0x27, 0xda, 0xfd, 0xea, 0x47,
	0x9a, 0x2f, 0x8f, 0x21, 0x05, 0x4e, 0xe1, 0xe2, 0xce, 0xbd, 0x6a, 0x20, 0x89, 0xf3, 0xfd, 0xb0,
	0x5c, 0x2c, 0x6f, 0x55, 0x95, 0x04, 0x3a, 0x0b, 0xa7, 0xc3, 0x4a, 0x52, 0x9c, 0xcc, 0xbd, 0x0d,
	0x09, 0xd9, 0x4c, 0x29, 0x10, 0xe3, 0x5b, 0x43, 0x44, 0xb8, 0xc8, 0x2f, 0x85, 0x44, 0x1f, 0xfa,
	0x4e, 0xf3, 0xcb, 0x92, 0x02, 0xa9, 0xa0, 0x03, 0x43, 0xf1, 0xef, 0xff, 0x52, 0x88, 0x94, 0xb2,
	0x90, 0x94, 0xe5, 0xb6, 0xbc, 0xcf, 0xfd, 0x29, 0x06, 0xd9, 0xe9, 0x5f, 0x04, 0x5f, 0x32, 0xd1,
	0x19, 0x3f, 0xa6, 0x3c, 0x9e, 0xce, 0x60, 0x59, 0xee, 0x2c, 0xe7, 0x57, 0xc8, 0xfc, 0x9e, 0xc4,
	0x4e, 0x4a, 0xc8, 0xc0, 0x4e, 0xee, 0x77, 0x51, 0x58, 0xf1, 0x9f, 0xa2, 0x73, 0x90, 0x64, 0xa4,
	0x4b, 0x86, 0x8e, 0xf4, 0x0d, 0xfb, 0x77, 0xe8, 0x0a, 0xa4, 0x3a, 0x03, 0xfb, 0x70, 0xf1, 0x31,
	0x96, 0xa2, 0xaf, 0x20, 0x3d, 0xfe, 0xb2, 0xe9, 0xff, 0x36, 0xfc, 0x64, 0xb9, 0xae, 0xe7, 0xc7,
	0xdf, 0x3f, 0xc7, 0x41, 0x4c, 0x4c, 0xe6, 0xee, 0x43, 0x7a, 0xfc, 0x1c, 0xa9, 0x10, 0xd3, 0xbb,
	0x32, 0xbf, 0xb1, 0x52, 0xd2, 0x2f, 0x4e, 0xb9, 0x08, 0x5d, 0x85, 0xb4, 0xc3, 0x48, 0xdb, 0x74,
	0x83, 0x48, 0x26, 0xcf, 0x27, 0x0f, 0xd6, 0x0d, 0x48, 0x05, 0xdf, 0x3f, 0xd1, 0x6b, 0x70, 0xb6,
	0xbe, 0x7b, 0x4f, 0xab, 0x57, 0x1f, 0x55, 0xeb, 0x33, 0x73, 0x31, 0x0d, 0x89, 0x26, 0x2e, 0x96,
	0xfd, 0x63, 0xb6, 0x52, 0x2d, 0x3d, 0xbc, 0xa7, 0x44, 0xf9, 0x59, 0x5a, 0xdb, 0xd9, 0xdc, 0xc5,
	0xdb, 0xc5, 0x66, 0x6d, 0x77, 0x47, 0x89, 0xf1, 0xf3, 0xf8, 0x71, 0x11, 0xef, 0xd4, 0x76, 0xee,
	0xc9, 0xf9, 0x57, 0xc5, 0x78, 0x17, 0x2b, 0x89, 0xf5, 0x3f, 0x47, 0xe1, 0xd5, 0xd9, 0xd8, 0x1b,
	0xc4, 0x43, 0x3d, 0x50, 0x48, 0xa7, 0x23, 0xf7, 0x17, 0x4d, 0xe6, 0xc8, 0x3f, 0x7b, 0xdf, 0x5d,
	0x30, 0xa3, 0xfe, 0x68, 0xad, 0x8d, 0xb1, 0xfe, 0x7f, 0x12, 0x9e, 0x40, 0x86, 0x57, 0x47, 0x81,
	0x91, 0xe8, 0x8f, 0x32, 0x82, 0x81, 0xb3, 0x7c, 0xf2, 0xa7, 0x90, 0x35, 0x48, 0x47, 0x1f, 0x58,
	0x5e, 0x00, 0x8f, 0xfd, 0x38, 0xf8, 0xaa, 0x8f, 0xf3, 0x03, 0xfa, 0x3a, 0x02, 0x6f, 0x4d, 0x91,
	0x74, 0xc7, 0x7c, 0x21, 0xed, 0xe3, 0x66, 0xd7, 0xf4, 0x7a, 0x83, 0x56, 0xbe, 0x4d, 0xfb, 0x1b,
	0x52, 0xeb, 0xba, 0xfc, 0xeb, 0x46, 0x97, 0x5e, 0xef, 0x12, 0x5b, 0x7c, 0x2f, 0xdc, 0x38, 0xd6,
	0x5f, 0x4a, 0x7e, 0x39, 0x11, 0xb6, 0x92, 0x42, 0xef, 0xd6, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xa4, 0x6b, 0x58, 0x58, 0x8d, 0x22, 0x00, 0x00,
}
