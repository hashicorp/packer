// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto

package clickhouse // import "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1/config"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/yandex-cloud/go-genproto/yandex/cloud/validation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClickhouseConfig_LogLevel int32

const (
	ClickhouseConfig_LOG_LEVEL_UNSPECIFIED ClickhouseConfig_LogLevel = 0
	ClickhouseConfig_TRACE                 ClickhouseConfig_LogLevel = 1
	ClickhouseConfig_DEBUG                 ClickhouseConfig_LogLevel = 2
	ClickhouseConfig_INFORMATION           ClickhouseConfig_LogLevel = 3
	ClickhouseConfig_WARNING               ClickhouseConfig_LogLevel = 4
	ClickhouseConfig_ERROR                 ClickhouseConfig_LogLevel = 5
)

var ClickhouseConfig_LogLevel_name = map[int32]string{
	0: "LOG_LEVEL_UNSPECIFIED",
	1: "TRACE",
	2: "DEBUG",
	3: "INFORMATION",
	4: "WARNING",
	5: "ERROR",
}
var ClickhouseConfig_LogLevel_value = map[string]int32{
	"LOG_LEVEL_UNSPECIFIED": 0,
	"TRACE":                 1,
	"DEBUG":                 2,
	"INFORMATION":           3,
	"WARNING":               4,
	"ERROR":                 5,
}

func (x ClickhouseConfig_LogLevel) String() string {
	return proto.EnumName(ClickhouseConfig_LogLevel_name, int32(x))
}
func (ClickhouseConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 0}
}

type ClickhouseConfig_Compression_Method int32

const (
	ClickhouseConfig_Compression_METHOD_UNSPECIFIED ClickhouseConfig_Compression_Method = 0
	// [LZ4 compression algorithm](https://lz4.github.io/lz4/).
	ClickhouseConfig_Compression_LZ4 ClickhouseConfig_Compression_Method = 1
	// [Zstandard compression algorithm](https://facebook.github.io/zstd/).
	ClickhouseConfig_Compression_ZSTD ClickhouseConfig_Compression_Method = 2
)

var ClickhouseConfig_Compression_Method_name = map[int32]string{
	0: "METHOD_UNSPECIFIED",
	1: "LZ4",
	2: "ZSTD",
}
var ClickhouseConfig_Compression_Method_value = map[string]int32{
	"METHOD_UNSPECIFIED": 0,
	"LZ4":                1,
	"ZSTD":               2,
}

func (x ClickhouseConfig_Compression_Method) String() string {
	return proto.EnumName(ClickhouseConfig_Compression_Method_name, int32(x))
}
func (ClickhouseConfig_Compression_Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 1, 0}
}

type ClickhouseConfig_ExternalDictionary_Layout_Type int32

const (
	ClickhouseConfig_ExternalDictionary_Layout_TYPE_UNSPECIFIED ClickhouseConfig_ExternalDictionary_Layout_Type = 0
	// The entire dictionary is stored in memory in the form of flat arrays.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_FLAT ClickhouseConfig_ExternalDictionary_Layout_Type = 1
	// The entire dictionary is stored in memory in the form of a hash table.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 2
	// Similar to HASHED, to be used with composite keys.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 3
	// The entire dictionary is stored in memory in the form of a hash table,
	// with an ordered array of ranges and their corresponding values.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_RANGE_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 4
	// The dictionary is stored in a cache with a set number of cells.
	// Available for MySQL, ClickHouse and HTTP dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_CACHE ClickhouseConfig_ExternalDictionary_Layout_Type = 5
	// Similar to CACHE, to be used with composite keys.
	// Available for MySQL, ClickHouse and HTTP dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_CACHE ClickhouseConfig_ExternalDictionary_Layout_Type = 6
)

var ClickhouseConfig_ExternalDictionary_Layout_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "FLAT",
	2: "HASHED",
	3: "COMPLEX_KEY_HASHED",
	4: "RANGE_HASHED",
	5: "CACHE",
	6: "COMPLEX_KEY_CACHE",
}
var ClickhouseConfig_ExternalDictionary_Layout_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":   0,
	"FLAT":               1,
	"HASHED":             2,
	"COMPLEX_KEY_HASHED": 3,
	"RANGE_HASHED":       4,
	"CACHE":              5,
	"COMPLEX_KEY_CACHE":  6,
}

func (x ClickhouseConfig_ExternalDictionary_Layout_Type) String() string {
	return proto.EnumName(ClickhouseConfig_ExternalDictionary_Layout_Type_name, int32(x))
}
func (ClickhouseConfig_ExternalDictionary_Layout_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 5, 0}
}

// ClickHouse configuration options. Detailed description for each set of options
// is available in [ClickHouse documentation](https://clickhouse.yandex/docs/ru/operations/server_settings/settings/).
//
// Any options not listed here are not supported.
type ClickhouseConfig struct {
	// Logging level for the ClickHouse cluster.
	LogLevel ClickhouseConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel" json:"log_level,omitempty"`
	// Settings for the MergeTree engine.
	// See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
	MergeTree *ClickhouseConfig_MergeTree `protobuf:"bytes,2,opt,name=merge_tree,json=mergeTree,proto3" json:"merge_tree,omitempty"`
	// Compression settings for the ClickHouse cluster.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
	Compression []*ClickhouseConfig_Compression `protobuf:"bytes,3,rep,name=compression,proto3" json:"compression,omitempty"`
	// Configuration of external dictionaries to be used by the ClickHouse cluster.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
	Dictionaries []*ClickhouseConfig_ExternalDictionary `protobuf:"bytes,4,rep,name=dictionaries,proto3" json:"dictionaries,omitempty"`
	// Settings for thinning Graphite data.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
	GraphiteRollup []*ClickhouseConfig_GraphiteRollup `protobuf:"bytes,5,rep,name=graphite_rollup,json=graphiteRollup,proto3" json:"graphite_rollup,omitempty"`
	// Maximum number of inbound connections.
	MaxConnections *wrappers.Int64Value `protobuf:"bytes,6,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Maximum number of simultaneously processed requests.
	MaxConcurrentQueries *wrappers.Int64Value `protobuf:"bytes,7,opt,name=max_concurrent_queries,json=maxConcurrentQueries,proto3" json:"max_concurrent_queries,omitempty"`
	// Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
	KeepAliveTimeout *wrappers.Int64Value `protobuf:"bytes,8,opt,name=keep_alive_timeout,json=keepAliveTimeout,proto3" json:"keep_alive_timeout,omitempty"`
	// Cache size (in bytes) for uncompressed data used by MergeTree tables.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#uncompressed_cache_size).
	UncompressedCacheSize *wrappers.Int64Value `protobuf:"bytes,9,opt,name=uncompressed_cache_size,json=uncompressedCacheSize,proto3" json:"uncompressed_cache_size,omitempty"`
	// Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
	// See details in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#mark_cache_size).
	MarkCacheSize *wrappers.Int64Value `protobuf:"bytes,10,opt,name=mark_cache_size,json=markCacheSize,proto3" json:"mark_cache_size,omitempty"`
	// Maximum size of the table that can be deleted using a DROP query.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#max_table_size_to_drop).
	MaxTableSizeToDrop *wrappers.Int64Value `protobuf:"bytes,11,opt,name=max_table_size_to_drop,json=maxTableSizeToDrop,proto3" json:"max_table_size_to_drop,omitempty"`
	// Time interval for reloading built-in dictionaries.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#builtin_dictionaries_reload_interval).
	BuiltinDictionariesReloadInterval *wrappers.Int64Value `protobuf:"bytes,12,opt,name=builtin_dictionaries_reload_interval,json=builtinDictionariesReloadInterval,proto3" json:"builtin_dictionaries_reload_interval,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}             `json:"-"`
	XXX_unrecognized                  []byte               `json:"-"`
	XXX_sizecache                     int32                `json:"-"`
}

func (m *ClickhouseConfig) Reset()         { *m = ClickhouseConfig{} }
func (m *ClickhouseConfig) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig) ProtoMessage()    {}
func (*ClickhouseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0}
}
func (m *ClickhouseConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig.Unmarshal(m, b)
}
func (m *ClickhouseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig.Merge(dst, src)
}
func (m *ClickhouseConfig) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig.Size(m)
}
func (m *ClickhouseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig proto.InternalMessageInfo

func (m *ClickhouseConfig) GetLogLevel() ClickhouseConfig_LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_UNSPECIFIED
}

func (m *ClickhouseConfig) GetMergeTree() *ClickhouseConfig_MergeTree {
	if m != nil {
		return m.MergeTree
	}
	return nil
}

func (m *ClickhouseConfig) GetCompression() []*ClickhouseConfig_Compression {
	if m != nil {
		return m.Compression
	}
	return nil
}

func (m *ClickhouseConfig) GetDictionaries() []*ClickhouseConfig_ExternalDictionary {
	if m != nil {
		return m.Dictionaries
	}
	return nil
}

func (m *ClickhouseConfig) GetGraphiteRollup() []*ClickhouseConfig_GraphiteRollup {
	if m != nil {
		return m.GraphiteRollup
	}
	return nil
}

func (m *ClickhouseConfig) GetMaxConnections() *wrappers.Int64Value {
	if m != nil {
		return m.MaxConnections
	}
	return nil
}

func (m *ClickhouseConfig) GetMaxConcurrentQueries() *wrappers.Int64Value {
	if m != nil {
		return m.MaxConcurrentQueries
	}
	return nil
}

func (m *ClickhouseConfig) GetKeepAliveTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.KeepAliveTimeout
	}
	return nil
}

func (m *ClickhouseConfig) GetUncompressedCacheSize() *wrappers.Int64Value {
	if m != nil {
		return m.UncompressedCacheSize
	}
	return nil
}

func (m *ClickhouseConfig) GetMarkCacheSize() *wrappers.Int64Value {
	if m != nil {
		return m.MarkCacheSize
	}
	return nil
}

func (m *ClickhouseConfig) GetMaxTableSizeToDrop() *wrappers.Int64Value {
	if m != nil {
		return m.MaxTableSizeToDrop
	}
	return nil
}

func (m *ClickhouseConfig) GetBuiltinDictionariesReloadInterval() *wrappers.Int64Value {
	if m != nil {
		return m.BuiltinDictionariesReloadInterval
	}
	return nil
}

// Options specific to the MergeTree table engine.
type ClickhouseConfig_MergeTree struct {
	// Number of blocks of hashes to keep in ZooKeeper.
	// See detailed description in [ClickHouse sources](https://github.com/yandex/ClickHouse/blob/v18.1.0-stable/dbms/src/Storages/MergeTree/MergeTreeSettings.h#L59).
	ReplicatedDeduplicationWindow *wrappers.Int64Value `protobuf:"bytes,1,opt,name=replicated_deduplication_window,json=replicatedDeduplicationWindow,proto3" json:"replicated_deduplication_window,omitempty"`
	// Period of time to keep blocks of hashes for.
	// See detailed description in [ClickHouse sources](https://github.com/yandex/ClickHouse/blob/v18.1.0-stable/dbms/src/Storages/MergeTree/MergeTreeSettings.h#L64).
	ReplicatedDeduplicationWindowSeconds *wrappers.Int64Value `protobuf:"bytes,2,opt,name=replicated_deduplication_window_seconds,json=replicatedDeduplicationWindowSeconds,proto3" json:"replicated_deduplication_window_seconds,omitempty"`
	XXX_NoUnkeyedLiteral                 struct{}             `json:"-"`
	XXX_unrecognized                     []byte               `json:"-"`
	XXX_sizecache                        int32                `json:"-"`
}

func (m *ClickhouseConfig_MergeTree) Reset()         { *m = ClickhouseConfig_MergeTree{} }
func (m *ClickhouseConfig_MergeTree) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_MergeTree) ProtoMessage()    {}
func (*ClickhouseConfig_MergeTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 0}
}
func (m *ClickhouseConfig_MergeTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_MergeTree.Unmarshal(m, b)
}
func (m *ClickhouseConfig_MergeTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_MergeTree.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_MergeTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_MergeTree.Merge(dst, src)
}
func (m *ClickhouseConfig_MergeTree) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_MergeTree.Size(m)
}
func (m *ClickhouseConfig_MergeTree) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_MergeTree.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_MergeTree proto.InternalMessageInfo

func (m *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindow() *wrappers.Int64Value {
	if m != nil {
		return m.ReplicatedDeduplicationWindow
	}
	return nil
}

func (m *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindowSeconds() *wrappers.Int64Value {
	if m != nil {
		return m.ReplicatedDeduplicationWindowSeconds
	}
	return nil
}

type ClickhouseConfig_Compression struct {
	// Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
	Method ClickhouseConfig_Compression_Method `protobuf:"varint,1,opt,name=method,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Compression_Method" json:"method,omitempty"`
	// Minimum size of a part of a table.
	MinPartSize int64 `protobuf:"varint,2,opt,name=min_part_size,json=minPartSize,proto3" json:"min_part_size,omitempty"`
	// Minimum ratio of a part relative to the size of all the data in the table.
	MinPartSizeRatio     float64  `protobuf:"fixed64,3,opt,name=min_part_size_ratio,json=minPartSizeRatio,proto3" json:"min_part_size_ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_Compression) Reset()         { *m = ClickhouseConfig_Compression{} }
func (m *ClickhouseConfig_Compression) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_Compression) ProtoMessage()    {}
func (*ClickhouseConfig_Compression) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 1}
}
func (m *ClickhouseConfig_Compression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_Compression.Unmarshal(m, b)
}
func (m *ClickhouseConfig_Compression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_Compression.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_Compression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_Compression.Merge(dst, src)
}
func (m *ClickhouseConfig_Compression) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_Compression.Size(m)
}
func (m *ClickhouseConfig_Compression) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_Compression.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_Compression proto.InternalMessageInfo

func (m *ClickhouseConfig_Compression) GetMethod() ClickhouseConfig_Compression_Method {
	if m != nil {
		return m.Method
	}
	return ClickhouseConfig_Compression_METHOD_UNSPECIFIED
}

func (m *ClickhouseConfig_Compression) GetMinPartSize() int64 {
	if m != nil {
		return m.MinPartSize
	}
	return 0
}

func (m *ClickhouseConfig_Compression) GetMinPartSizeRatio() float64 {
	if m != nil {
		return m.MinPartSizeRatio
	}
	return 0
}

type ClickhouseConfig_ExternalDictionary struct {
	// Name of the external dictionary.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Set of attributes for the external dictionary.
	// For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
	Structure *ClickhouseConfig_ExternalDictionary_Structure `protobuf:"bytes,2,opt,name=structure,proto3" json:"structure,omitempty"`
	// Layout for storing the dictionary in memory.
	// For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
	Layout *ClickhouseConfig_ExternalDictionary_Layout `protobuf:"bytes,3,opt,name=layout,proto3" json:"layout,omitempty"`
	// Required. Setting for the period of time between dictionary updates.
	// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
	//
	// Types that are valid to be assigned to Lifetime:
	//	*ClickhouseConfig_ExternalDictionary_FixedLifetime
	//	*ClickhouseConfig_ExternalDictionary_LifetimeRange
	Lifetime isClickhouseConfig_ExternalDictionary_Lifetime `protobuf_oneof:"lifetime"`
	// Required. Description of the source for the external dictionary.
	//
	// Types that are valid to be assigned to Source:
	//	*ClickhouseConfig_ExternalDictionary_HttpSource_
	//	*ClickhouseConfig_ExternalDictionary_MysqlSource_
	//	*ClickhouseConfig_ExternalDictionary_ClickhouseSource_
	//	*ClickhouseConfig_ExternalDictionary_MongodbSource_
	Source               isClickhouseConfig_ExternalDictionary_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary) Reset()         { *m = ClickhouseConfig_ExternalDictionary{} }
func (m *ClickhouseConfig_ExternalDictionary) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_ExternalDictionary) ProtoMessage()    {}
func (*ClickhouseConfig_ExternalDictionary) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2}
}
func (m *ClickhouseConfig_ExternalDictionary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary) GetStructure() *ClickhouseConfig_ExternalDictionary_Structure {
	if m != nil {
		return m.Structure
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetLayout() *ClickhouseConfig_ExternalDictionary_Layout {
	if m != nil {
		return m.Layout
	}
	return nil
}

type isClickhouseConfig_ExternalDictionary_Lifetime interface {
	isClickhouseConfig_ExternalDictionary_Lifetime()
}

type ClickhouseConfig_ExternalDictionary_FixedLifetime struct {
	FixedLifetime int64 `protobuf:"varint,4,opt,name=fixed_lifetime,json=fixedLifetime,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_LifetimeRange struct {
	LifetimeRange *ClickhouseConfig_ExternalDictionary_Range `protobuf:"bytes,5,opt,name=lifetime_range,json=lifetimeRange,proto3,oneof"`
}

func (*ClickhouseConfig_ExternalDictionary_FixedLifetime) isClickhouseConfig_ExternalDictionary_Lifetime() {
}

func (*ClickhouseConfig_ExternalDictionary_LifetimeRange) isClickhouseConfig_ExternalDictionary_Lifetime() {
}

func (m *ClickhouseConfig_ExternalDictionary) GetLifetime() isClickhouseConfig_ExternalDictionary_Lifetime {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetFixedLifetime() int64 {
	if x, ok := m.GetLifetime().(*ClickhouseConfig_ExternalDictionary_FixedLifetime); ok {
		return x.FixedLifetime
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary) GetLifetimeRange() *ClickhouseConfig_ExternalDictionary_Range {
	if x, ok := m.GetLifetime().(*ClickhouseConfig_ExternalDictionary_LifetimeRange); ok {
		return x.LifetimeRange
	}
	return nil
}

type isClickhouseConfig_ExternalDictionary_Source interface {
	isClickhouseConfig_ExternalDictionary_Source()
}

type ClickhouseConfig_ExternalDictionary_HttpSource_ struct {
	HttpSource *ClickhouseConfig_ExternalDictionary_HttpSource `protobuf:"bytes,6,opt,name=http_source,json=httpSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_MysqlSource_ struct {
	MysqlSource *ClickhouseConfig_ExternalDictionary_MysqlSource `protobuf:"bytes,7,opt,name=mysql_source,json=mysqlSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_ClickhouseSource_ struct {
	ClickhouseSource *ClickhouseConfig_ExternalDictionary_ClickhouseSource `protobuf:"bytes,8,opt,name=clickhouse_source,json=clickhouseSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_MongodbSource_ struct {
	MongodbSource *ClickhouseConfig_ExternalDictionary_MongodbSource `protobuf:"bytes,9,opt,name=mongodb_source,json=mongodbSource,proto3,oneof"`
}

func (*ClickhouseConfig_ExternalDictionary_HttpSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_MysqlSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_MongodbSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (m *ClickhouseConfig_ExternalDictionary) GetSource() isClickhouseConfig_ExternalDictionary_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetHttpSource() *ClickhouseConfig_ExternalDictionary_HttpSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_HttpSource_); ok {
		return x.HttpSource
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetMysqlSource() *ClickhouseConfig_ExternalDictionary_MysqlSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_MysqlSource_); ok {
		return x.MysqlSource
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetClickhouseSource() *ClickhouseConfig_ExternalDictionary_ClickhouseSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_ClickhouseSource_); ok {
		return x.ClickhouseSource
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetMongodbSource() *ClickhouseConfig_ExternalDictionary_MongodbSource {
	if x, ok := m.GetSource().(*ClickhouseConfig_ExternalDictionary_MongodbSource_); ok {
		return x.MongodbSource
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClickhouseConfig_ExternalDictionary) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClickhouseConfig_ExternalDictionary_OneofMarshaler, _ClickhouseConfig_ExternalDictionary_OneofUnmarshaler, _ClickhouseConfig_ExternalDictionary_OneofSizer, []interface{}{
		(*ClickhouseConfig_ExternalDictionary_FixedLifetime)(nil),
		(*ClickhouseConfig_ExternalDictionary_LifetimeRange)(nil),
		(*ClickhouseConfig_ExternalDictionary_HttpSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_MysqlSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_ClickhouseSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_MongodbSource_)(nil),
	}
}

func _ClickhouseConfig_ExternalDictionary_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClickhouseConfig_ExternalDictionary)
	// lifetime
	switch x := m.Lifetime.(type) {
	case *ClickhouseConfig_ExternalDictionary_FixedLifetime:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.FixedLifetime))
	case *ClickhouseConfig_ExternalDictionary_LifetimeRange:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LifetimeRange); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClickhouseConfig_ExternalDictionary.Lifetime has unexpected type %T", x)
	}
	// source
	switch x := m.Source.(type) {
	case *ClickhouseConfig_ExternalDictionary_HttpSource_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpSource); err != nil {
			return err
		}
	case *ClickhouseConfig_ExternalDictionary_MysqlSource_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MysqlSource); err != nil {
			return err
		}
	case *ClickhouseConfig_ExternalDictionary_ClickhouseSource_:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClickhouseSource); err != nil {
			return err
		}
	case *ClickhouseConfig_ExternalDictionary_MongodbSource_:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MongodbSource); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClickhouseConfig_ExternalDictionary.Source has unexpected type %T", x)
	}
	return nil
}

func _ClickhouseConfig_ExternalDictionary_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClickhouseConfig_ExternalDictionary)
	switch tag {
	case 4: // lifetime.fixed_lifetime
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Lifetime = &ClickhouseConfig_ExternalDictionary_FixedLifetime{int64(x)}
		return true, err
	case 5: // lifetime.lifetime_range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClickhouseConfig_ExternalDictionary_Range)
		err := b.DecodeMessage(msg)
		m.Lifetime = &ClickhouseConfig_ExternalDictionary_LifetimeRange{msg}
		return true, err
	case 6: // source.http_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClickhouseConfig_ExternalDictionary_HttpSource)
		err := b.DecodeMessage(msg)
		m.Source = &ClickhouseConfig_ExternalDictionary_HttpSource_{msg}
		return true, err
	case 7: // source.mysql_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClickhouseConfig_ExternalDictionary_MysqlSource)
		err := b.DecodeMessage(msg)
		m.Source = &ClickhouseConfig_ExternalDictionary_MysqlSource_{msg}
		return true, err
	case 8: // source.clickhouse_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClickhouseConfig_ExternalDictionary_ClickhouseSource)
		err := b.DecodeMessage(msg)
		m.Source = &ClickhouseConfig_ExternalDictionary_ClickhouseSource_{msg}
		return true, err
	case 9: // source.mongodb_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClickhouseConfig_ExternalDictionary_MongodbSource)
		err := b.DecodeMessage(msg)
		m.Source = &ClickhouseConfig_ExternalDictionary_MongodbSource_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClickhouseConfig_ExternalDictionary_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClickhouseConfig_ExternalDictionary)
	// lifetime
	switch x := m.Lifetime.(type) {
	case *ClickhouseConfig_ExternalDictionary_FixedLifetime:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.FixedLifetime))
	case *ClickhouseConfig_ExternalDictionary_LifetimeRange:
		s := proto.Size(x.LifetimeRange)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// source
	switch x := m.Source.(type) {
	case *ClickhouseConfig_ExternalDictionary_HttpSource_:
		s := proto.Size(x.HttpSource)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClickhouseConfig_ExternalDictionary_MysqlSource_:
		s := proto.Size(x.MysqlSource)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClickhouseConfig_ExternalDictionary_ClickhouseSource_:
		s := proto.Size(x.ClickhouseSource)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClickhouseConfig_ExternalDictionary_MongodbSource_:
		s := proto.Size(x.MongodbSource)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ClickhouseConfig_ExternalDictionary_HttpSource struct {
	// URL of the source dictionary available over HTTP.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The data format. Valid values are all formats supported by ClickHouse SQL dialect.
	Format               string   `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_HttpSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_HttpSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_HttpSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_HttpSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 0}
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_HttpSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_HttpSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_HttpSource) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_HttpSource) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MysqlSource struct {
	// Name of the MySQL database to connect to.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the database table to use as a ClickHouse dictionary.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Default port to use when connecting to a replica of the dictionary source.
	Port int64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the default user for replicas of the dictionary source.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the default user for replicas of the dictionary source.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// List of MySQL replicas of the database used as dictionary source.
	Replicas []*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica `protobuf:"bytes,6,rep,name=replicas,proto3" json:"replicas,omitempty"`
	// Selection criteria for the data in the specified MySQL table.
	Where string `protobuf:"bytes,7,opt,name=where,proto3" json:"where,omitempty"`
	// Query for checking the dictionary status, to pull only updated data.
	// For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
	InvalidateQuery      string   `protobuf:"bytes,8,opt,name=invalidate_query,json=invalidateQuery,proto3" json:"invalidate_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_MysqlSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_MysqlSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_MysqlSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 1}
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetReplicas() []*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetWhere() string {
	if m != nil {
		return m.Where
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource) GetInvalidateQuery() string {
	if m != nil {
		return m.InvalidateQuery
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MysqlSource_Replica struct {
	// MySQL host of the replica.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Required. The priority of the replica that ClickHouse takes into account when connecting.
	// Replica with the highest priority should have this field set to the lowest number.
	Priority int64 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Port to use when connecting to the replica.
	// If a port is not specified for a replica, ClickHouse uses the port specified for the source.
	Port int64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the MySQL database user.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the MySQL database user.
	Password             string   `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_MysqlSource_Replica{}
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 1, 0}
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MysqlSource_Replica proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_ClickhouseSource struct {
	// Name of the ClickHouse database.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the table in the specified database to be used as the dictionary source.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// ClickHouse host of the specified database.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the ClickHouse database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the ClickHouse database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Selection criteria for the data in the specified ClickHouse table.
	Where                string   `protobuf:"bytes,7,opt,name=where,proto3" json:"where,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_ClickhouseSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 2}
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_ClickhouseSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetWhere() string {
	if m != nil {
		return m.Where
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MongodbSource struct {
	// Name of the MongoDB database.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the collection in the specified database to be used as the dictionary source.
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// MongoDB host of the specified database.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the MongoDB database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the MongoDB database user.
	Password             string   `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_MongodbSource{}
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_MongodbSource) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_MongodbSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 3}
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_MongodbSource proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_MongodbSource) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_Structure struct {
	// Single numeric key column for the dictionary.
	Id *ClickhouseConfig_ExternalDictionary_Structure_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Complex key for the dictionary, containing of one or more key column(s).
	Key *ClickhouseConfig_ExternalDictionary_Structure_Key `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Description of the fields available for database queries.
	Attributes           []*ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Structure{}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Structure) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Structure) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 4}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_Structure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Structure) GetId() *ClickhouseConfig_ExternalDictionary_Structure_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) GetKey() *ClickhouseConfig_ExternalDictionary_Structure_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary_Structure) GetAttributes() []*ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_Structure_Attribute struct {
	// Name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the column.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Default value for an element without data (for example, an empty string).
	NullValue string `protobuf:"bytes,3,opt,name=null_value,json=nullValue,proto3" json:"null_value,omitempty"`
	// Expression, describing the attribute, if applicable.
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	// Indication of hierarchy support.
	// Default value: "false".
	Hierarchical bool `protobuf:"varint,5,opt,name=hierarchical,proto3" json:"hierarchical,omitempty"`
	// Indication of injective mapping "id -> attribute".
	// Default value: "false".
	Injective            bool     `protobuf:"varint,6,opt,name=injective,proto3" json:"injective,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Structure_Attribute{}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Structure_Attribute) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Structure_Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 4, 0}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Attribute proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetNullValue() string {
	if m != nil {
		return m.NullValue
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetHierarchical() bool {
	if m != nil {
		return m.Hierarchical
	}
	return false
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetInjective() bool {
	if m != nil {
		return m.Injective
	}
	return false
}

// Numeric key.
type ClickhouseConfig_ExternalDictionary_Structure_Id struct {
	// Name of the numeric key.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Structure_Id{}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Structure_Id) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Structure_Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 4, 1}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Id proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Structure_Id) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Complex key.
type ClickhouseConfig_ExternalDictionary_Structure_Key struct {
	// Attributes of a complex key.
	Attributes           []*ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Structure_Key{}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Structure_Key) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Structure_Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 4, 2}
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Structure_Key proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Structure_Key) GetAttributes() []*ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Layout determining how to store the dictionary in memory.
type ClickhouseConfig_ExternalDictionary_Layout struct {
	// Layout type for an external dictionary.
	Type ClickhouseConfig_ExternalDictionary_Layout_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_Layout_Type" json:"type,omitempty"`
	// Number of cells in the cache. Rounded up to a power of two.
	// Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
	SizeInCells          int64    `protobuf:"varint,2,opt,name=size_in_cells,json=sizeInCells,proto3" json:"size_in_cells,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Layout) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Layout{}
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_ExternalDictionary_Layout) ProtoMessage() {}
func (*ClickhouseConfig_ExternalDictionary_Layout) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 5}
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_Layout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Layout) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Layout proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Layout) GetType() ClickhouseConfig_ExternalDictionary_Layout_Type {
	if m != nil {
		return m.Type
	}
	return ClickhouseConfig_ExternalDictionary_Layout_TYPE_UNSPECIFIED
}

func (m *ClickhouseConfig_ExternalDictionary_Layout) GetSizeInCells() int64 {
	if m != nil {
		return m.SizeInCells
	}
	return 0
}

type ClickhouseConfig_ExternalDictionary_Range struct {
	// Minimum dictionary lifetime.
	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum dictionary lifetime.
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_ExternalDictionary_Range) Reset() {
	*m = ClickhouseConfig_ExternalDictionary_Range{}
}
func (m *ClickhouseConfig_ExternalDictionary_Range) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_ExternalDictionary_Range) ProtoMessage()    {}
func (*ClickhouseConfig_ExternalDictionary_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 2, 6}
}
func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.Unmarshal(m, b)
}
func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_ExternalDictionary_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.Merge(dst, src)
}
func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.Size(m)
}
func (m *ClickhouseConfig_ExternalDictionary_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_ExternalDictionary_Range proto.InternalMessageInfo

func (m *ClickhouseConfig_ExternalDictionary_Range) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *ClickhouseConfig_ExternalDictionary_Range) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

// Rollup settings for the GraphiteMergeTree table engine.
type ClickhouseConfig_GraphiteRollup struct {
	// Name for the specified combination of settings for Graphite rollup.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pattern to use for the rollup.
	Patterns             []*ClickhouseConfig_GraphiteRollup_Pattern `protobuf:"bytes,2,rep,name=patterns,proto3" json:"patterns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ClickhouseConfig_GraphiteRollup) Reset()         { *m = ClickhouseConfig_GraphiteRollup{} }
func (m *ClickhouseConfig_GraphiteRollup) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_GraphiteRollup) ProtoMessage()    {}
func (*ClickhouseConfig_GraphiteRollup) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 3}
}
func (m *ClickhouseConfig_GraphiteRollup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup.Unmarshal(m, b)
}
func (m *ClickhouseConfig_GraphiteRollup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_GraphiteRollup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup.Merge(dst, src)
}
func (m *ClickhouseConfig_GraphiteRollup) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup.Size(m)
}
func (m *ClickhouseConfig_GraphiteRollup) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_GraphiteRollup proto.InternalMessageInfo

func (m *ClickhouseConfig_GraphiteRollup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClickhouseConfig_GraphiteRollup) GetPatterns() []*ClickhouseConfig_GraphiteRollup_Pattern {
	if m != nil {
		return m.Patterns
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern struct {
	// Pattern for metric names.
	Regexp string `protobuf:"bytes,1,opt,name=regexp,proto3" json:"regexp,omitempty"`
	// Name of the aggregating function to apply to data of the age specified in [retention].
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Age of data to use for thinning.
	Retention            []*ClickhouseConfig_GraphiteRollup_Pattern_Retention `protobuf:"bytes,3,rep,name=retention,proto3" json:"retention,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern) Reset() {
	*m = ClickhouseConfig_GraphiteRollup_Pattern{}
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfig_GraphiteRollup_Pattern) ProtoMessage()    {}
func (*ClickhouseConfig_GraphiteRollup_Pattern) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 3, 0}
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.Unmarshal(m, b)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_GraphiteRollup_Pattern) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.Merge(dst, src)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.Size(m)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern proto.InternalMessageInfo

func (m *ClickhouseConfig_GraphiteRollup_Pattern) GetRegexp() string {
	if m != nil {
		return m.Regexp
	}
	return ""
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern) GetRetention() []*ClickhouseConfig_GraphiteRollup_Pattern_Retention {
	if m != nil {
		return m.Retention
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern_Retention struct {
	// Minimum age of the data in seconds.
	Age int64 `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty"`
	// Precision of determining the age of the data, in seconds.
	Precision            int64    `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) Reset() {
	*m = ClickhouseConfig_GraphiteRollup_Pattern_Retention{}
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) String() string {
	return proto.CompactTextString(m)
}
func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) ProtoMessage() {}
func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{0, 3, 0, 0}
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.Unmarshal(m, b)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.Merge(dst, src)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.Size(m)
}
func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfig_GraphiteRollup_Pattern_Retention proto.InternalMessageInfo

func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetPrecision() int64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

type ClickhouseConfigSet struct {
	// Effective settings for a ClickHouse cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *ClickhouseConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a ClickHouse cluster.
	UserConfig *ClickhouseConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a ClickHouse cluster.
	DefaultConfig        *ClickhouseConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClickhouseConfigSet) Reset()         { *m = ClickhouseConfigSet{} }
func (m *ClickhouseConfigSet) String() string { return proto.CompactTextString(m) }
func (*ClickhouseConfigSet) ProtoMessage()    {}
func (*ClickhouseConfigSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_clickhouse_cf71ea45ca19ec95, []int{1}
}
func (m *ClickhouseConfigSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickhouseConfigSet.Unmarshal(m, b)
}
func (m *ClickhouseConfigSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickhouseConfigSet.Marshal(b, m, deterministic)
}
func (dst *ClickhouseConfigSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickhouseConfigSet.Merge(dst, src)
}
func (m *ClickhouseConfigSet) XXX_Size() int {
	return xxx_messageInfo_ClickhouseConfigSet.Size(m)
}
func (m *ClickhouseConfigSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickhouseConfigSet.DiscardUnknown(m)
}

var xxx_messageInfo_ClickhouseConfigSet proto.InternalMessageInfo

func (m *ClickhouseConfigSet) GetEffectiveConfig() *ClickhouseConfig {
	if m != nil {
		return m.EffectiveConfig
	}
	return nil
}

func (m *ClickhouseConfigSet) GetUserConfig() *ClickhouseConfig {
	if m != nil {
		return m.UserConfig
	}
	return nil
}

func (m *ClickhouseConfigSet) GetDefaultConfig() *ClickhouseConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*ClickhouseConfig)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig")
	proto.RegisterType((*ClickhouseConfig_MergeTree)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree")
	proto.RegisterType((*ClickhouseConfig_Compression)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_HttpSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_MysqlSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_ClickhouseSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_MongodbSource)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Structure)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Structure_Attribute)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Structure_Id)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Structure_Key)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Layout)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout")
	proto.RegisterType((*ClickhouseConfig_ExternalDictionary_Range)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range")
	proto.RegisterType((*ClickhouseConfig_GraphiteRollup)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup")
	proto.RegisterType((*ClickhouseConfig_GraphiteRollup_Pattern)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern")
	proto.RegisterType((*ClickhouseConfig_GraphiteRollup_Pattern_Retention)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention")
	proto.RegisterType((*ClickhouseConfigSet)(nil), "yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet")
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel", ClickhouseConfig_LogLevel_name, ClickhouseConfig_LogLevel_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Compression_Method", ClickhouseConfig_Compression_Method_name, ClickhouseConfig_Compression_Method_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_Layout_Type", ClickhouseConfig_ExternalDictionary_Layout_Type_name, ClickhouseConfig_ExternalDictionary_Layout_Type_value)
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto", fileDescriptor_clickhouse_cf71ea45ca19ec95)
}

var fileDescriptor_clickhouse_cf71ea45ca19ec95 = []byte{
	// 1882 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4f, 0x73, 0xdb, 0xc6,
	0x15, 0x0f, 0x08, 0x92, 0x22, 0x1e, 0x2d, 0x09, 0xd9, 0xd8, 0x0e, 0x8b, 0xc6, 0x8e, 0xa3, 0x71,
	0x27, 0xea, 0x64, 0x0c, 0x89, 0x52, 0xe4, 0xb4, 0xd3, 0xda, 0x53, 0x8a, 0xa2, 0x25, 0xc6, 0xd4,
	0x9f, 0xac, 0x68, 0x59, 0x71, 0xa6, 0x41, 0x41, 0x60, 0x45, 0x22, 0xc6, 0xbf, 0x2c, 0x01, 0x89,
	0x4c, 0x67, 0x32, 0x53, 0x1f, 0x7a, 0xc8, 0xa1, 0xd3, 0x4f, 0xd0, 0x99, 0x7e, 0x84, 0x1e, 0x7b,
	0x4b, 0x0f, 0x1d, 0xe5, 0x03, 0xf4, 0xda, 0x5b, 0x0f, 0xfd, 0x02, 0xbd, 0xa8, 0x97, 0xce, 0xee,
	0x02, 0x04, 0x29, 0xd7, 0x56, 0xa2, 0xd0, 0x93, 0x1b, 0xf6, 0xb7, 0x78, 0xbf, 0xdf, 0xdb, 0x87,
	0xb7, 0xfb, 0x1e, 0x16, 0xee, 0x0e, 0x4d, 0xdf, 0x26, 0x83, 0x25, 0xcb, 0x0d, 0x62, 0x7b, 0xc9,
	0xb3, 0x3b, 0x4b, 0x96, 0xeb, 0x58, 0x4f, 0x7b, 0x41, 0xdc, 0x27, 0x4b, 0xc7, 0xd5, 0x25, 0x2b,
	0xf0, 0x8f, 0x9c, 0xee, 0x18, 0xa8, 0x87, 0x34, 0x88, 0x02, 0xf4, 0x13, 0x61, 0xa7, 0x73, 0x3b,
	0xdd, 0xb3, 0x3b, 0xfa, 0xd8, 0x2b, 0xc7, 0x55, 0x5d, 0xd8, 0x69, 0x37, 0xbb, 0x41, 0xd0, 0x75,
	0xc9, 0x12, 0x37, 0xea, 0xc4, 0x47, 0x4b, 0x27, 0xd4, 0x0c, 0x43, 0x42, 0xfb, 0x82, 0x46, 0xbb,
	0x31, 0x21, 0x7f, 0x6c, 0xba, 0x8e, 0x6d, 0x46, 0x4e, 0xe0, 0x8b, 0xe9, 0x85, 0xff, 0x2e, 0x82,
	0x5a, 0x1f, 0xf1, 0xd6, 0x39, 0x27, 0xfa, 0x35, 0x28, 0x6e, 0xd0, 0x35, 0x5c, 0x72, 0x4c, 0xdc,
	0x8a, 0x74, 0x4b, 0x5a, 0x9c, 0x5b, 0xf9, 0x95, 0xfe, 0xad, 0xdc, 0xd1, 0xcf, 0x73, 0xe9, 0xad,
	0xa0, 0xdb, 0x62, 0x3c, 0xb8, 0xe4, 0x26, 0x4f, 0xe8, 0x37, 0x00, 0x1e, 0xa1, 0x5d, 0x62, 0x44,
	0x94, 0x90, 0x4a, 0xee, 0x96, 0xb4, 0x58, 0x5e, 0xa9, 0x5d, 0x96, 0x7f, 0x9b, 0x31, 0xb5, 0x29,
	0x21, 0x58, 0xf1, 0xd2, 0x47, 0x44, 0xa0, 0x6c, 0x05, 0x5e, 0x48, 0x49, 0xbf, 0xef, 0x04, 0x7e,
	0x45, 0xbe, 0x25, 0x2f, 0x96, 0x57, 0xea, 0x97, 0x95, 0xa8, 0x67, 0x54, 0x78, 0x9c, 0x17, 0xf9,
	0x70, 0xc5, 0x76, 0x2c, 0x16, 0x4d, 0x93, 0x3a, 0xa4, 0x5f, 0xc9, 0x73, 0x9d, 0x0f, 0x2f, 0xab,
	0xd3, 0x18, 0x44, 0x84, 0xfa, 0xa6, 0xbb, 0x91, 0x72, 0x0e, 0xf1, 0x04, 0x3f, 0x0a, 0x60, 0xbe,
	0x4b, 0xcd, 0xb0, 0xe7, 0x44, 0xc4, 0xa0, 0x81, 0xeb, 0xc6, 0x61, 0xa5, 0xc0, 0x25, 0x1f, 0x5c,
	0x56, 0x72, 0x33, 0xa1, 0xc3, 0x9c, 0x0d, 0xcf, 0x75, 0x27, 0xc6, 0x68, 0x07, 0xe6, 0x3d, 0x73,
	0x60, 0x58, 0x81, 0xef, 0x13, 0xee, 0x47, 0xbf, 0x52, 0xe4, 0x9f, 0xeb, 0xc7, 0xba, 0x48, 0x3b,
	0x3d, 0x4d, 0x3b, 0xbd, 0xe9, 0x47, 0x77, 0xdf, 0x3f, 0x30, 0xdd, 0x98, 0xac, 0x97, 0xce, 0x4e,
	0xab, 0xf9, 0xfb, 0xf7, 0xaa, 0xcb, 0x78, 0xce, 0x33, 0x07, 0xf5, 0xcc, 0x18, 0x7d, 0x02, 0xd7,
	0x13, 0x3e, 0x2b, 0xa6, 0x94, 0xf8, 0x91, 0xf1, 0x79, 0x4c, 0x78, 0xe8, 0x66, 0xbe, 0x0b, 0xed,
	0x55, 0x41, 0x9b, 0x70, 0x7c, 0x24, 0x28, 0x50, 0x13, 0xd0, 0x53, 0x42, 0x42, 0xc3, 0x74, 0x9d,
	0x63, 0x62, 0x44, 0x8e, 0x47, 0x82, 0x38, 0xaa, 0x94, 0x2e, 0x24, 0xc6, 0x2a, 0x33, 0xab, 0x31,
	0xab, 0xb6, 0x30, 0x42, 0xfb, 0xf0, 0x66, 0xec, 0xa7, 0x5f, 0x9a, 0xd8, 0x86, 0x65, 0x5a, 0x3d,
	0x62, 0xf4, 0x9d, 0x2f, 0x48, 0x45, 0xb9, 0x98, 0xef, 0xda, 0xb8, 0x6d, 0x9d, 0x99, 0xee, 0x3b,
	0x5f, 0x10, 0xd4, 0x66, 0xc1, 0xa4, 0x4f, 0xc7, 0xc9, 0xe0, 0xe2, 0x55, 0xcf, 0x9f, 0x9d, 0x56,
	0xcb, 0xf7, 0xd7, 0x56, 0xef, 0xfe, 0xec, 0x83, 0xe5, 0x9f, 0x57, 0x57, 0x96, 0xf1, 0x2c, 0x23,
	0xc9, 0x58, 0x77, 0x45, 0x48, 0x23, 0xb3, 0xe3, 0x0a, 0x52, 0x23, 0x0a, 0x0c, 0x9b, 0x06, 0x61,
	0xa5, 0x7c, 0xb1, 0xa7, 0xc8, 0x33, 0x07, 0x6d, 0x66, 0xc9, 0xa8, 0xda, 0xc1, 0x06, 0x0d, 0x42,
	0xe4, 0xc2, 0xed, 0x4e, 0xec, 0xb8, 0x91, 0xe3, 0x1b, 0xe3, 0xc9, 0x67, 0x50, 0xe2, 0x06, 0xa6,
	0x6d, 0x38, 0x7e, 0x44, 0xe8, 0xb1, 0xe9, 0x56, 0xae, 0x5c, 0x4c, 0xff, 0x4e, 0x42, 0xb4, 0x31,
	0xc6, 0x83, 0x39, 0x4d, 0x33, 0x61, 0xd1, 0xfe, 0x25, 0x81, 0x32, 0xda, 0xc2, 0xc8, 0x82, 0xb7,
	0x29, 0x09, 0x5d, 0xc7, 0x32, 0x23, 0x62, 0x1b, 0x36, 0xb1, 0x63, 0x31, 0x70, 0x02, 0xdf, 0x38,
	0x71, 0x7c, 0x3b, 0x38, 0xe1, 0xc7, 0xd1, 0x05, 0xb2, 0x37, 0x32, 0x8e, 0x8d, 0x71, 0x8a, 0xc7,
	0x9c, 0x01, 0x51, 0x78, 0xf7, 0x02, 0x11, 0xa3, 0x4f, 0xac, 0xc0, 0xb7, 0xfb, 0xc9, 0xd9, 0xf4,
	0x52, 0xb1, 0xdb, 0x2f, 0x15, 0xdb, 0x17, 0x44, 0xda, 0xb3, 0x1c, 0x94, 0xc7, 0x8e, 0x11, 0xd4,
	0x81, 0xa2, 0x47, 0xa2, 0x5e, 0x60, 0x27, 0xc7, 0xeb, 0x87, 0x53, 0x38, 0x9b, 0xf4, 0x6d, 0xce,
	0x88, 0x13, 0x66, 0xf4, 0x1e, 0xcc, 0x7a, 0x8e, 0x6f, 0x84, 0x26, 0x8d, 0x44, 0xb6, 0xb1, 0xd5,
	0xc8, 0xeb, 0x33, 0x67, 0xa7, 0x55, 0xf9, 0xfe, 0xbd, 0x2a, 0x2e, 0x7b, 0x8e, 0xbf, 0x67, 0xd2,
	0x88, 0xa7, 0xd1, 0x1d, 0x78, 0x63, 0xe2, 0x65, 0x83, 0xb2, 0x55, 0x54, 0xe4, 0x5b, 0xd2, 0xa2,
	0x84, 0xd5, 0xb1, 0x37, 0x31, 0xc3, 0x17, 0x56, 0xa1, 0x28, 0xd4, 0xd0, 0x75, 0x40, 0xdb, 0x8d,
	0xf6, 0xd6, 0xee, 0x86, 0xf1, 0x68, 0x67, 0x7f, 0xaf, 0x51, 0x6f, 0x3e, 0x68, 0x36, 0x36, 0xd4,
	0xd7, 0xd0, 0x0c, 0xc8, 0xad, 0x27, 0xef, 0xab, 0x12, 0x2a, 0x41, 0xfe, 0xc9, 0x7e, 0x7b, 0x43,
	0xcd, 0x69, 0xff, 0x79, 0x13, 0xd0, 0xf3, 0x67, 0x1c, 0xaa, 0x40, 0xde, 0x37, 0x3d, 0xc2, 0x23,
	0xa1, 0xac, 0xe7, 0xff, 0x7d, 0x5a, 0x95, 0x30, 0x47, 0xd0, 0x00, 0x94, 0x7e, 0x44, 0x63, 0x2b,
	0x8a, 0x69, 0x5a, 0x27, 0xda, 0xd3, 0x3b, 0x5c, 0xf5, 0xfd, 0x94, 0x3b, 0x11, 0xcd, 0xc4, 0x50,
	0x00, 0x45, 0xd7, 0x1c, 0xb2, 0xf3, 0x43, 0xe6, 0xb2, 0x1f, 0x4d, 0x51, 0xb6, 0xc5, 0x89, 0x13,
	0xcd, 0x44, 0x06, 0xbd, 0x0b, 0x73, 0x47, 0xce, 0x80, 0xd8, 0x86, 0xeb, 0x1c, 0x11, 0x76, 0x76,
	0x55, 0xf2, 0xec, 0x6b, 0x6d, 0xbd, 0x86, 0x67, 0x39, 0xde, 0x4a, 0x60, 0x34, 0x84, 0xb9, 0xf4,
	0x15, 0x83, 0x9a, 0x7e, 0x97, 0x54, 0x0a, 0xdc, 0xc3, 0xbd, 0x29, 0x7a, 0x88, 0x19, 0x2f, 0x93,
	0x4e, 0x95, 0x38, 0x80, 0x06, 0x50, 0xee, 0x45, 0x51, 0x68, 0xf4, 0x83, 0x98, 0x5a, 0x24, 0xa9,
	0x04, 0x8f, 0xa6, 0xa8, 0xbb, 0x15, 0x45, 0xe1, 0x3e, 0x27, 0xdf, 0x92, 0x30, 0xf4, 0x46, 0x23,
	0xf4, 0x5b, 0xb8, 0xe2, 0x0d, 0xfb, 0x9f, 0xbb, 0xa9, 0xb4, 0xa8, 0x16, 0x07, 0x53, 0x94, 0xde,
	0x66, 0xf4, 0x23, 0xed, 0xb2, 0x97, 0x0d, 0xd1, 0x57, 0x12, 0xbc, 0x9e, 0xf1, 0xa6, 0x2e, 0x88,
	0xba, 0xf2, 0xc9, 0x14, 0x5d, 0xc8, 0xde, 0x19, 0xf9, 0xa1, 0x5a, 0xe7, 0x30, 0xf4, 0x3b, 0x09,
	0xe6, 0xbc, 0xc0, 0xef, 0x06, 0x76, 0x27, 0xf5, 0x44, 0x54, 0xa4, 0xc3, 0x69, 0x06, 0x43, 0x08,
	0x8c, 0xdc, 0x98, 0xf5, 0xc6, 0x01, 0x6d, 0x1d, 0x20, 0xfb, 0x52, 0xe8, 0x3a, 0xc8, 0x31, 0x75,
	0x27, 0x76, 0x2f, 0x03, 0xd0, 0x5b, 0x50, 0x3c, 0x0a, 0xa8, 0x67, 0x46, 0x7c, 0xe7, 0xa6, 0x53,
	0x09, 0xa6, 0x9d, 0xc9, 0x50, 0x1e, 0x8b, 0x39, 0xba, 0x0a, 0x39, 0xbb, 0x33, 0x41, 0x92, 0xb3,
	0x3b, 0x48, 0x83, 0x02, 0x2f, 0x6c, 0x13, 0x14, 0x02, 0x42, 0x6f, 0x43, 0x3e, 0x0c, 0xa8, 0xd8,
	0xa0, 0xf2, 0x7a, 0xf9, 0xec, 0xb4, 0x3a, 0xb3, 0x7c, 0xe7, 0xee, 0xda, 0xda, 0xea, 0x1a, 0xe6,
	0x13, 0x08, 0x41, 0x3e, 0xee, 0x13, 0xca, 0x37, 0x92, 0x82, 0xf9, 0x33, 0xd2, 0xa0, 0x14, 0x9a,
	0xfd, 0xfe, 0x49, 0x40, 0x6d, 0xbe, 0x6f, 0x14, 0x3c, 0x1a, 0xa3, 0x67, 0x12, 0x94, 0x92, 0xc3,
	0x9c, 0xb5, 0x39, 0xac, 0xaf, 0xfa, 0xf4, 0xd5, 0x64, 0x98, 0x8e, 0x85, 0xcc, 0x7a, 0xf1, 0xd9,
	0x37, 0xd5, 0xdc, 0xfd, 0x65, 0x3c, 0xd2, 0x45, 0x57, 0xa1, 0x70, 0xd2, 0x23, 0x54, 0xa4, 0xb8,
	0x82, 0xc5, 0x00, 0xfd, 0x14, 0x54, 0xc7, 0x4f, 0x7a, 0x77, 0xc2, 0x7b, 0xa6, 0x21, 0x4f, 0x40,
	0x05, 0xcf, 0x67, 0x38, 0xeb, 0x83, 0x86, 0xda, 0x9f, 0x25, 0x98, 0x49, 0xe8, 0xd1, 0x3b, 0x90,
	0xef, 0x05, 0xfd, 0x28, 0x09, 0xeb, 0x2c, 0x8b, 0xde, 0x57, 0xdf, 0x54, 0x0b, 0xbf, 0xbc, 0xb7,
	0xb2, 0xb6, 0x8a, 0xf9, 0x14, 0x5a, 0x80, 0x52, 0x48, 0x9d, 0x80, 0x3a, 0xd1, 0x30, 0xa9, 0x0f,
	0xc5, 0xb3, 0x53, 0xe1, 0x53, 0x8a, 0x4f, 0x3d, 0xd2, 0xda, 0x3f, 0xa4, 0xf1, 0x9f, 0x8e, 0x4b,
	0x67, 0x40, 0xba, 0x3c, 0xf9, 0xc5, 0xcb, 0x4b, 0x5d, 0xcf, 0xbf, 0xc8, 0xf5, 0x4a, 0xe2, 0x7a,
	0x61, 0xbc, 0xf8, 0x3c, 0xb7, 0x80, 0xe2, 0xb9, 0x54, 0xf9, 0xbf, 0x5f, 0x49, 0xfb, 0xbb, 0x04,
	0xb3, 0x13, 0x5b, 0xe7, 0x05, 0x6b, 0xba, 0x0d, 0x60, 0x05, 0xae, 0x2b, 0x9a, 0xe2, 0x89, 0x85,
	0x8d, 0xe1, 0x3f, 0xdc, 0xea, 0xb4, 0x7f, 0x16, 0x40, 0x19, 0xd5, 0x46, 0xd4, 0x85, 0x9c, 0x63,
	0x27, 0x6d, 0xd7, 0xe3, 0x57, 0x51, 0x7d, 0xf5, 0xa6, 0x8d, 0x73, 0x8e, 0x8d, 0x3e, 0x03, 0xf9,
	0x29, 0x19, 0x26, 0x05, 0xf7, 0xf0, 0x95, 0x28, 0x3d, 0x24, 0x43, 0xcc, 0x44, 0xd0, 0xef, 0x25,
	0x00, 0x33, 0x8a, 0xa8, 0xd3, 0x89, 0x23, 0xc2, 0xfa, 0xbc, 0x69, 0xef, 0xf6, 0x4c, 0xb3, 0x96,
	0xca, 0x8c, 0x76, 0xfb, 0x98, 0xb2, 0xf6, 0xb5, 0x04, 0xca, 0xe8, 0x8d, 0x97, 0xb4, 0x42, 0x15,
	0xc8, 0x47, 0xc3, 0x70, 0x72, 0x1b, 0x70, 0x04, 0xdd, 0x00, 0xf0, 0x63, 0xd7, 0x35, 0x8e, 0x59,
	0x3b, 0x2a, 0xb2, 0x05, 0x2b, 0x0c, 0xe1, 0xfd, 0x29, 0xba, 0x09, 0x40, 0x06, 0xa3, 0x3f, 0x61,
	0xb1, 0x43, 0xc7, 0x10, 0xb4, 0x00, 0x57, 0x7a, 0x0e, 0xa1, 0x26, 0xb5, 0x7a, 0x8e, 0x65, 0xba,
	0x3c, 0x55, 0x4a, 0x78, 0x02, 0x43, 0x6f, 0x81, 0xe2, 0xf8, 0x9f, 0xb1, 0xbc, 0x3c, 0x16, 0x65,
	0xbf, 0x84, 0x33, 0x40, 0xbb, 0x09, 0xb9, 0xa6, 0xfd, 0x62, 0xd7, 0xb5, 0x3f, 0x48, 0x20, 0x3f,
	0x7c, 0x3e, 0xe6, 0xd2, 0x0f, 0x16, 0xf3, 0x3f, 0xe5, 0xa0, 0x28, 0x9a, 0x30, 0x14, 0x26, 0x61,
	0x15, 0x5d, 0xf8, 0xc1, 0xd4, 0xbb, 0x3c, 0xbd, 0x3d, 0x0c, 0xc9, 0xc4, 0xe7, 0x5a, 0x80, 0x59,
	0xde, 0x5f, 0x3b, 0xbe, 0x61, 0x11, 0xd7, 0x15, 0xff, 0x18, 0x32, 0x2e, 0x33, 0xb0, 0xe9, 0xd7,
	0x19, 0xb4, 0xf0, 0x25, 0xe4, 0x99, 0x1d, 0xba, 0x0a, 0x6a, 0xfb, 0xe3, 0xbd, 0xc6, 0xb9, 0xce,
	0xba, 0x04, 0xf9, 0x07, 0xad, 0x5a, 0x5b, 0x95, 0x10, 0x40, 0x71, 0xab, 0xb6, 0xbf, 0xd5, 0xd8,
	0x50, 0x73, 0xac, 0x0f, 0xaf, 0xef, 0x6e, 0xef, 0xb5, 0x1a, 0x87, 0xc6, 0xc3, 0xc6, 0xc7, 0x46,
	0x82, 0xcb, 0x48, 0x85, 0x2b, 0xb8, 0xb6, 0xb3, 0xd9, 0x48, 0x91, 0x3c, 0x52, 0xa0, 0x50, 0xaf,
	0xd5, 0xb7, 0x1a, 0x6a, 0x01, 0x5d, 0x83, 0xd7, 0xc7, 0x8d, 0x04, 0x5c, 0xd4, 0xde, 0x83, 0x82,
	0xe8, 0xf8, 0x54, 0x90, 0x3d, 0xc7, 0xe7, 0xd1, 0x91, 0x31, 0x7b, 0xe4, 0x88, 0x39, 0x48, 0x9c,
	0x66, 0x8f, 0xeb, 0x2a, 0x94, 0xd2, 0x36, 0x11, 0xe5, 0xbf, 0xfe, 0x5b, 0x55, 0x5a, 0x9f, 0x83,
	0xa2, 0x68, 0x4d, 0xc4, 0x58, 0xfb, 0x8b, 0x0c, 0x73, 0x93, 0x17, 0x0d, 0x2f, 0x49, 0x74, 0xca,
	0x0e, 0xa6, 0x88, 0x85, 0x33, 0xdd, 0x96, 0x3b, 0xd3, 0xb9, 0xdc, 0xd0, 0xf7, 0x04, 0x6d, 0x56,
	0x74, 0x53, 0x1d, 0xed, 0x8f, 0x39, 0x98, 0x49, 0x66, 0xd1, 0x75, 0x28, 0x52, 0xd2, 0x25, 0x83,
	0x50, 0xf8, 0x86, 0x93, 0x11, 0xba, 0x05, 0xa5, 0xa3, 0xd8, 0x7f, 0xfe, 0xc8, 0x1e, 0xa1, 0xe8,
	0x4b, 0x50, 0x28, 0x89, 0x88, 0x1f, 0x65, 0x57, 0x4e, 0x87, 0xd3, 0x75, 0x5d, 0xc7, 0x29, 0xff,
	0x68, 0x11, 0x99, 0xa4, 0xf6, 0x10, 0x94, 0xd1, 0x3c, 0xaa, 0x80, 0x6c, 0x76, 0x45, 0x7c, 0xb3,
	0x92, 0xce, 0x20, 0x74, 0x1b, 0x94, 0x90, 0x12, 0xcb, 0xe9, 0xa7, 0x2b, 0xc9, 0xe6, 0xb3, 0x89,
	0x05, 0x1b, 0x4a, 0xe9, 0xcd, 0x1d, 0xfa, 0x11, 0x5c, 0x6b, 0xed, 0x6e, 0x1a, 0xad, 0xc6, 0x41,
	0xa3, 0x75, 0x2e, 0x17, 0x15, 0x28, 0xb4, 0x71, 0xad, 0xde, 0x50, 0x25, 0xf6, 0xb8, 0xd1, 0x58,
	0x7f, 0xb4, 0xa9, 0xe6, 0xd0, 0x3c, 0x94, 0x9b, 0x3b, 0x0f, 0x76, 0xf1, 0x76, 0xad, 0xdd, 0xdc,
	0xdd, 0x51, 0x65, 0x54, 0x86, 0x99, 0xc7, 0x35, 0xbc, 0xd3, 0xdc, 0xd9, 0x14, 0xf9, 0xd7, 0xc0,
	0x78, 0x17, 0xab, 0x85, 0x85, 0xbf, 0xe6, 0xe0, 0x8d, 0xf3, 0x6b, 0xdf, 0x27, 0x11, 0xea, 0x81,
	0x4a, 0x8e, 0x8e, 0xc4, 0xf9, 0x62, 0x88, 0x18, 0x25, 0x15, 0xe8, 0x83, 0x4b, 0x46, 0x34, 0xf9,
	0x5a, 0xf3, 0x23, 0xda, 0xe4, 0xaa, 0xf3, 0x10, 0xca, 0xac, 0x1e, 0xa6, 0x22, 0xb9, 0xef, 0x25,
	0x82, 0x81, 0x71, 0x25, 0xcc, 0x9f, 0xc2, 0x9c, 0x4d, 0x8e, 0xcc, 0xd8, 0x8d, 0x52, 0x72, 0xf9,
	0xfb, 0x91, 0xcf, 0x26, 0x74, 0xc9, 0x82, 0x0e, 0x9e, 0xb4, 0xbb, 0x4e, 0xd4, 0x8b, 0x3b, 0xba,
	0x15, 0x78, 0x4b, 0x82, 0xf3, 0x8e, 0xb8, 0xe5, 0xed, 0x06, 0x77, 0xba, 0xc4, 0xe7, 0xb7, 0x15,
	0x4b, 0xdf, 0xea, 0xf6, 0xf9, 0x17, 0x19, 0xd8, 0x29, 0x72, 0xbb, 0xd5, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x20, 0xb8, 0x9b, 0xe3, 0xb8, 0x16, 0x00, 0x00,
}
