// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/clickhouse/v1/format_schema.proto

package clickhouse

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FormatSchemaType int32

const (
	FormatSchemaType_FORMAT_SCHEMA_TYPE_UNSPECIFIED FormatSchemaType = 0
	FormatSchemaType_FORMAT_SCHEMA_TYPE_PROTOBUF    FormatSchemaType = 1
	FormatSchemaType_FORMAT_SCHEMA_TYPE_CAPNPROTO   FormatSchemaType = 2
)

var FormatSchemaType_name = map[int32]string{
	0: "FORMAT_SCHEMA_TYPE_UNSPECIFIED",
	1: "FORMAT_SCHEMA_TYPE_PROTOBUF",
	2: "FORMAT_SCHEMA_TYPE_CAPNPROTO",
}

var FormatSchemaType_value = map[string]int32{
	"FORMAT_SCHEMA_TYPE_UNSPECIFIED": 0,
	"FORMAT_SCHEMA_TYPE_PROTOBUF":    1,
	"FORMAT_SCHEMA_TYPE_CAPNPROTO":   2,
}

func (x FormatSchemaType) String() string {
	return proto.EnumName(FormatSchemaType_name, int32(x))
}

func (FormatSchemaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4c7a760fa94ec85b, []int{0}
}

type FormatSchema struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClusterId            string           `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Type                 FormatSchemaType `protobuf:"varint,3,opt,name=type,proto3,enum=yandex.cloud.mdb.clickhouse.v1.FormatSchemaType" json:"type,omitempty"`
	Uri                  string           `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FormatSchema) Reset()         { *m = FormatSchema{} }
func (m *FormatSchema) String() string { return proto.CompactTextString(m) }
func (*FormatSchema) ProtoMessage()    {}
func (*FormatSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c7a760fa94ec85b, []int{0}
}

func (m *FormatSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FormatSchema.Unmarshal(m, b)
}
func (m *FormatSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FormatSchema.Marshal(b, m, deterministic)
}
func (m *FormatSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FormatSchema.Merge(m, src)
}
func (m *FormatSchema) XXX_Size() int {
	return xxx_messageInfo_FormatSchema.Size(m)
}
func (m *FormatSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_FormatSchema.DiscardUnknown(m)
}

var xxx_messageInfo_FormatSchema proto.InternalMessageInfo

func (m *FormatSchema) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FormatSchema) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *FormatSchema) GetType() FormatSchemaType {
	if m != nil {
		return m.Type
	}
	return FormatSchemaType_FORMAT_SCHEMA_TYPE_UNSPECIFIED
}

func (m *FormatSchema) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func init() {
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.FormatSchemaType", FormatSchemaType_name, FormatSchemaType_value)
	proto.RegisterType((*FormatSchema)(nil), "yandex.cloud.mdb.clickhouse.v1.FormatSchema")
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/clickhouse/v1/format_schema.proto", fileDescriptor_4c7a760fa94ec85b)
}

var fileDescriptor_4c7a760fa94ec85b = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4d, 0x4b, 0xc3, 0x30,
	0x18, 0xc7, 0xed, 0x36, 0x84, 0x3d, 0x88, 0x94, 0x9c, 0x0a, 0xea, 0x1c, 0x3b, 0x0d, 0x61, 0x89,
	0x9b, 0x47, 0x4f, 0x7b, 0x69, 0x71, 0x87, 0x6d, 0xa5, 0xeb, 0x0e, 0x7a, 0x29, 0x6d, 0x12, 0xdb,
	0x62, 0xd3, 0x94, 0xbe, 0x0c, 0xfb, 0x51, 0xfc, 0xb6, 0x62, 0x2a, 0xcc, 0x97, 0xb1, 0xdb, 0x93,
	0xe4, 0xf7, 0xcb, 0xc3, 0x9f, 0x3f, 0x4c, 0x6a, 0x3f, 0x65, 0xfc, 0x9d, 0xd0, 0x44, 0x56, 0x8c,
	0x08, 0x16, 0x10, 0x9a, 0xc4, 0xf4, 0x2d, 0x92, 0x55, 0xc1, 0xc9, 0x7e, 0x4c, 0x5e, 0x65, 0x2e,
	0xfc, 0xd2, 0x2b, 0x68, 0xc4, 0x85, 0x8f, 0xb3, 0x5c, 0x96, 0x12, 0xf5, 0x1a, 0x07, 0x2b, 0x07,
	0x0b, 0x16, 0xe0, 0x83, 0x83, 0xf7, 0xe3, 0xc1, 0x87, 0x06, 0x17, 0x96, 0xf2, 0xb6, 0x4a, 0x43,
	0x08, 0x3a, 0xa9, 0x2f, 0xb8, 0xa1, 0xf5, 0xb5, 0x61, 0xd7, 0x51, 0x33, 0xba, 0x01, 0xa0, 0x49,
	0x55, 0x94, 0x3c, 0xf7, 0x62, 0x66, 0xb4, 0xd4, 0x4b, 0xf7, 0xfb, 0x66, 0xc9, 0xd0, 0x02, 0x3a,
	0x65, 0x9d, 0x71, 0xa3, 0xdd, 0xd7, 0x86, 0x97, 0x93, 0x7b, 0x7c, 0x7a, 0x25, 0xfe, 0xb9, 0xce,
	0xad, 0x33, 0xee, 0x28, 0x1b, 0xe9, 0xd0, 0xae, 0xf2, 0xd8, 0xe8, 0xa8, 0xdf, 0xbf, 0xc6, 0xbb,
	0x1a, 0xf4, 0xbf, 0x2c, 0x1a, 0x40, 0xcf, 0xda, 0x38, 0xab, 0xa9, 0xeb, 0x6d, 0xe7, 0x4f, 0xe6,
	0x6a, 0xea, 0xb9, 0xcf, 0xb6, 0xe9, 0xed, 0xd6, 0x5b, 0xdb, 0x9c, 0x2f, 0xad, 0xa5, 0xb9, 0xd0,
	0xcf, 0xd0, 0x2d, 0x5c, 0x1d, 0x61, 0x6c, 0x67, 0xe3, 0x6e, 0x66, 0x3b, 0x4b, 0xd7, 0x50, 0x1f,
	0xae, 0x8f, 0x00, 0xf3, 0xa9, 0xbd, 0x56, 0x90, 0xde, 0x9a, 0x15, 0x30, 0xf8, 0x95, 0xc2, 0xcf,
	0xe2, 0xff, 0x49, 0x5e, 0x56, 0x61, 0x5c, 0x46, 0x55, 0x80, 0xa9, 0x14, 0xa4, 0xc1, 0x47, 0x4d,
	0x37, 0xa1, 0x1c, 0x85, 0x3c, 0x55, 0x0d, 0x90, 0xd3, 0xa5, 0x3d, 0x1e, 0x4e, 0xc1, 0xb9, 0x12,
	0x1e, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x49, 0xaa, 0x8c, 0x28, 0xe8, 0x01, 0x00, 0x00,
}
