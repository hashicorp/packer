// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/loadbalancer/v1/network_load_balancer_service.proto

package loadbalancer // import "github.com/yandex-cloud/go-genproto/yandex/cloud/loadbalancer/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/yandex-cloud/go-genproto/yandex/api"
import operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
import _ "github.com/yandex-cloud/go-genproto/yandex/cloud/validation"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import field_mask "google.golang.org/genproto/protobuf/field_mask"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetNetworkLoadBalancerRequest struct {
	// ID of the NetworkLoadBalancer resource to return.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetNetworkLoadBalancerRequest) Reset()         { *m = GetNetworkLoadBalancerRequest{} }
func (m *GetNetworkLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*GetNetworkLoadBalancerRequest) ProtoMessage()    {}
func (*GetNetworkLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{0}
}
func (m *GetNetworkLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNetworkLoadBalancerRequest.Unmarshal(m, b)
}
func (m *GetNetworkLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNetworkLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *GetNetworkLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkLoadBalancerRequest.Merge(dst, src)
}
func (m *GetNetworkLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_GetNetworkLoadBalancerRequest.Size(m)
}
func (m *GetNetworkLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkLoadBalancerRequest proto.InternalMessageInfo

func (m *GetNetworkLoadBalancerRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type ListNetworkLoadBalancersRequest struct {
	// ID of the folder that the network load balancer belongs to.
	// To get the folder ID, use a [NetworkLoadBalancerService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [<ResponseMessage>.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListNetworkLoadBalancersResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can only filter by the [NetworkLoadBalancer.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, or `IN` or `NOT IN` for lists of values.
	// 3. The value. Must be 3-63 characters long and match the regular expression `^[a-z][-a-z0-9]{1,61}[a-z0-9]$`.
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworkLoadBalancersRequest) Reset()         { *m = ListNetworkLoadBalancersRequest{} }
func (m *ListNetworkLoadBalancersRequest) String() string { return proto.CompactTextString(m) }
func (*ListNetworkLoadBalancersRequest) ProtoMessage()    {}
func (*ListNetworkLoadBalancersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{1}
}
func (m *ListNetworkLoadBalancersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkLoadBalancersRequest.Unmarshal(m, b)
}
func (m *ListNetworkLoadBalancersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkLoadBalancersRequest.Marshal(b, m, deterministic)
}
func (dst *ListNetworkLoadBalancersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkLoadBalancersRequest.Merge(dst, src)
}
func (m *ListNetworkLoadBalancersRequest) XXX_Size() int {
	return xxx_messageInfo_ListNetworkLoadBalancersRequest.Size(m)
}
func (m *ListNetworkLoadBalancersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkLoadBalancersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkLoadBalancersRequest proto.InternalMessageInfo

func (m *ListNetworkLoadBalancersRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *ListNetworkLoadBalancersRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNetworkLoadBalancersRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListNetworkLoadBalancersRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListNetworkLoadBalancersResponse struct {
	// List of NetworkLoadBalancer resources.
	NetworkLoadBalancers []*NetworkLoadBalancer `protobuf:"bytes,1,rep,name=network_load_balancers,json=networkLoadBalancers,proto3" json:"network_load_balancers,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListNetworkLoadBalancersRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListNetworkLoadBalancersRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworkLoadBalancersResponse) Reset()         { *m = ListNetworkLoadBalancersResponse{} }
func (m *ListNetworkLoadBalancersResponse) String() string { return proto.CompactTextString(m) }
func (*ListNetworkLoadBalancersResponse) ProtoMessage()    {}
func (*ListNetworkLoadBalancersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{2}
}
func (m *ListNetworkLoadBalancersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkLoadBalancersResponse.Unmarshal(m, b)
}
func (m *ListNetworkLoadBalancersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkLoadBalancersResponse.Marshal(b, m, deterministic)
}
func (dst *ListNetworkLoadBalancersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkLoadBalancersResponse.Merge(dst, src)
}
func (m *ListNetworkLoadBalancersResponse) XXX_Size() int {
	return xxx_messageInfo_ListNetworkLoadBalancersResponse.Size(m)
}
func (m *ListNetworkLoadBalancersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkLoadBalancersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkLoadBalancersResponse proto.InternalMessageInfo

func (m *ListNetworkLoadBalancersResponse) GetNetworkLoadBalancers() []*NetworkLoadBalancer {
	if m != nil {
		return m.NetworkLoadBalancers
	}
	return nil
}

func (m *ListNetworkLoadBalancersResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CreateNetworkLoadBalancerRequest struct {
	// ID of the folder to create a network load balancer in.
	// To get the folder ID, use a [NetworkLoadBalancerService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the network load balancer.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the network load balancer.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `` key:value `` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the region where the network load balancer resides.
	RegionId string `protobuf:"bytes,5,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// Type of the network load balancer. Only external network load balancers are currently available.
	Type NetworkLoadBalancer_Type `protobuf:"varint,6,opt,name=type,proto3,enum=yandex.cloud.loadbalancer.v1.NetworkLoadBalancer_Type" json:"type,omitempty"`
	// List of listeners and their specs for the network load balancer.
	ListenerSpecs []*ListenerSpec `protobuf:"bytes,7,rep,name=listener_specs,json=listenerSpecs,proto3" json:"listener_specs,omitempty"`
	// List of attached target groups for the network load balancer. For now, we accept only one target_group per NetworkLoadBalancer resource.
	AttachedTargetGroups []*AttachedTargetGroup `protobuf:"bytes,8,rep,name=attached_target_groups,json=attachedTargetGroups,proto3" json:"attached_target_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateNetworkLoadBalancerRequest) Reset()         { *m = CreateNetworkLoadBalancerRequest{} }
func (m *CreateNetworkLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNetworkLoadBalancerRequest) ProtoMessage()    {}
func (*CreateNetworkLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{3}
}
func (m *CreateNetworkLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNetworkLoadBalancerRequest.Unmarshal(m, b)
}
func (m *CreateNetworkLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNetworkLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *CreateNetworkLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkLoadBalancerRequest.Merge(dst, src)
}
func (m *CreateNetworkLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNetworkLoadBalancerRequest.Size(m)
}
func (m *CreateNetworkLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkLoadBalancerRequest proto.InternalMessageInfo

func (m *CreateNetworkLoadBalancerRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *CreateNetworkLoadBalancerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateNetworkLoadBalancerRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateNetworkLoadBalancerRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateNetworkLoadBalancerRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *CreateNetworkLoadBalancerRequest) GetType() NetworkLoadBalancer_Type {
	if m != nil {
		return m.Type
	}
	return NetworkLoadBalancer_TYPE_UNSPECIFIED
}

func (m *CreateNetworkLoadBalancerRequest) GetListenerSpecs() []*ListenerSpec {
	if m != nil {
		return m.ListenerSpecs
	}
	return nil
}

func (m *CreateNetworkLoadBalancerRequest) GetAttachedTargetGroups() []*AttachedTargetGroup {
	if m != nil {
		return m.AttachedTargetGroups
	}
	return nil
}

type CreateNetworkLoadBalancerMetadata struct {
	// ID of the network load balancer that is being created.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CreateNetworkLoadBalancerMetadata) Reset()         { *m = CreateNetworkLoadBalancerMetadata{} }
func (m *CreateNetworkLoadBalancerMetadata) String() string { return proto.CompactTextString(m) }
func (*CreateNetworkLoadBalancerMetadata) ProtoMessage()    {}
func (*CreateNetworkLoadBalancerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{4}
}
func (m *CreateNetworkLoadBalancerMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNetworkLoadBalancerMetadata.Unmarshal(m, b)
}
func (m *CreateNetworkLoadBalancerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNetworkLoadBalancerMetadata.Marshal(b, m, deterministic)
}
func (dst *CreateNetworkLoadBalancerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkLoadBalancerMetadata.Merge(dst, src)
}
func (m *CreateNetworkLoadBalancerMetadata) XXX_Size() int {
	return xxx_messageInfo_CreateNetworkLoadBalancerMetadata.Size(m)
}
func (m *CreateNetworkLoadBalancerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkLoadBalancerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkLoadBalancerMetadata proto.InternalMessageInfo

func (m *CreateNetworkLoadBalancerMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type UpdateNetworkLoadBalancerRequest struct {
	// ID of the network load balancer to update.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// Field mask that specifies which fields of the NetworkLoadBalancer resource are going to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the network load balancer.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the network load balancer.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `` key:value `` pairs.
	//
	// The existing set of `` labels `` is completely replaced with the provided set.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A list of listeners and their specs for the network load balancer.
	ListenerSpecs []*ListenerSpec `protobuf:"bytes,6,rep,name=listener_specs,json=listenerSpecs,proto3" json:"listener_specs,omitempty"`
	// A list of attached target groups for the network load balancer. For now, we accept only one target_group per NetworkLoadBalancer resource.
	AttachedTargetGroups []*AttachedTargetGroup `protobuf:"bytes,7,rep,name=attached_target_groups,json=attachedTargetGroups,proto3" json:"attached_target_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateNetworkLoadBalancerRequest) Reset()         { *m = UpdateNetworkLoadBalancerRequest{} }
func (m *UpdateNetworkLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNetworkLoadBalancerRequest) ProtoMessage()    {}
func (*UpdateNetworkLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{5}
}
func (m *UpdateNetworkLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNetworkLoadBalancerRequest.Unmarshal(m, b)
}
func (m *UpdateNetworkLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNetworkLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateNetworkLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNetworkLoadBalancerRequest.Merge(dst, src)
}
func (m *UpdateNetworkLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateNetworkLoadBalancerRequest.Size(m)
}
func (m *UpdateNetworkLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNetworkLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNetworkLoadBalancerRequest proto.InternalMessageInfo

func (m *UpdateNetworkLoadBalancerRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *UpdateNetworkLoadBalancerRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateNetworkLoadBalancerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateNetworkLoadBalancerRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateNetworkLoadBalancerRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UpdateNetworkLoadBalancerRequest) GetListenerSpecs() []*ListenerSpec {
	if m != nil {
		return m.ListenerSpecs
	}
	return nil
}

func (m *UpdateNetworkLoadBalancerRequest) GetAttachedTargetGroups() []*AttachedTargetGroup {
	if m != nil {
		return m.AttachedTargetGroups
	}
	return nil
}

type UpdateNetworkLoadBalancerMetadata struct {
	// ID of the NetworkLoadBalancer resource that is being updated.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *UpdateNetworkLoadBalancerMetadata) Reset()         { *m = UpdateNetworkLoadBalancerMetadata{} }
func (m *UpdateNetworkLoadBalancerMetadata) String() string { return proto.CompactTextString(m) }
func (*UpdateNetworkLoadBalancerMetadata) ProtoMessage()    {}
func (*UpdateNetworkLoadBalancerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{6}
}
func (m *UpdateNetworkLoadBalancerMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNetworkLoadBalancerMetadata.Unmarshal(m, b)
}
func (m *UpdateNetworkLoadBalancerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNetworkLoadBalancerMetadata.Marshal(b, m, deterministic)
}
func (dst *UpdateNetworkLoadBalancerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNetworkLoadBalancerMetadata.Merge(dst, src)
}
func (m *UpdateNetworkLoadBalancerMetadata) XXX_Size() int {
	return xxx_messageInfo_UpdateNetworkLoadBalancerMetadata.Size(m)
}
func (m *UpdateNetworkLoadBalancerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNetworkLoadBalancerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNetworkLoadBalancerMetadata proto.InternalMessageInfo

func (m *UpdateNetworkLoadBalancerMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type DeleteNetworkLoadBalancerRequest struct {
	// ID of the network load balancer to delete.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DeleteNetworkLoadBalancerRequest) Reset()         { *m = DeleteNetworkLoadBalancerRequest{} }
func (m *DeleteNetworkLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNetworkLoadBalancerRequest) ProtoMessage()    {}
func (*DeleteNetworkLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{7}
}
func (m *DeleteNetworkLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNetworkLoadBalancerRequest.Unmarshal(m, b)
}
func (m *DeleteNetworkLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNetworkLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteNetworkLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNetworkLoadBalancerRequest.Merge(dst, src)
}
func (m *DeleteNetworkLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNetworkLoadBalancerRequest.Size(m)
}
func (m *DeleteNetworkLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNetworkLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNetworkLoadBalancerRequest proto.InternalMessageInfo

func (m *DeleteNetworkLoadBalancerRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type DeleteNetworkLoadBalancerMetadata struct {
	// ID of the NetworkLoadBalancer resource that is being deleted.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *DeleteNetworkLoadBalancerMetadata) Reset()         { *m = DeleteNetworkLoadBalancerMetadata{} }
func (m *DeleteNetworkLoadBalancerMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteNetworkLoadBalancerMetadata) ProtoMessage()    {}
func (*DeleteNetworkLoadBalancerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{8}
}
func (m *DeleteNetworkLoadBalancerMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNetworkLoadBalancerMetadata.Unmarshal(m, b)
}
func (m *DeleteNetworkLoadBalancerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNetworkLoadBalancerMetadata.Marshal(b, m, deterministic)
}
func (dst *DeleteNetworkLoadBalancerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNetworkLoadBalancerMetadata.Merge(dst, src)
}
func (m *DeleteNetworkLoadBalancerMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteNetworkLoadBalancerMetadata.Size(m)
}
func (m *DeleteNetworkLoadBalancerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNetworkLoadBalancerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNetworkLoadBalancerMetadata proto.InternalMessageInfo

func (m *DeleteNetworkLoadBalancerMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type StartNetworkLoadBalancerRequest struct {
	// ID of the network load balancer to start.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *StartNetworkLoadBalancerRequest) Reset()         { *m = StartNetworkLoadBalancerRequest{} }
func (m *StartNetworkLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*StartNetworkLoadBalancerRequest) ProtoMessage()    {}
func (*StartNetworkLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{9}
}
func (m *StartNetworkLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartNetworkLoadBalancerRequest.Unmarshal(m, b)
}
func (m *StartNetworkLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartNetworkLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *StartNetworkLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartNetworkLoadBalancerRequest.Merge(dst, src)
}
func (m *StartNetworkLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_StartNetworkLoadBalancerRequest.Size(m)
}
func (m *StartNetworkLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartNetworkLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartNetworkLoadBalancerRequest proto.InternalMessageInfo

func (m *StartNetworkLoadBalancerRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type StartNetworkLoadBalancerMetadata struct {
	// ID of the NetworkLoadBalancer resource that is being started.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *StartNetworkLoadBalancerMetadata) Reset()         { *m = StartNetworkLoadBalancerMetadata{} }
func (m *StartNetworkLoadBalancerMetadata) String() string { return proto.CompactTextString(m) }
func (*StartNetworkLoadBalancerMetadata) ProtoMessage()    {}
func (*StartNetworkLoadBalancerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{10}
}
func (m *StartNetworkLoadBalancerMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartNetworkLoadBalancerMetadata.Unmarshal(m, b)
}
func (m *StartNetworkLoadBalancerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartNetworkLoadBalancerMetadata.Marshal(b, m, deterministic)
}
func (dst *StartNetworkLoadBalancerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartNetworkLoadBalancerMetadata.Merge(dst, src)
}
func (m *StartNetworkLoadBalancerMetadata) XXX_Size() int {
	return xxx_messageInfo_StartNetworkLoadBalancerMetadata.Size(m)
}
func (m *StartNetworkLoadBalancerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StartNetworkLoadBalancerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StartNetworkLoadBalancerMetadata proto.InternalMessageInfo

func (m *StartNetworkLoadBalancerMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type StopNetworkLoadBalancerRequest struct {
	// ID of the network load balancer to stop.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *StopNetworkLoadBalancerRequest) Reset()         { *m = StopNetworkLoadBalancerRequest{} }
func (m *StopNetworkLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*StopNetworkLoadBalancerRequest) ProtoMessage()    {}
func (*StopNetworkLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{11}
}
func (m *StopNetworkLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopNetworkLoadBalancerRequest.Unmarshal(m, b)
}
func (m *StopNetworkLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopNetworkLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *StopNetworkLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopNetworkLoadBalancerRequest.Merge(dst, src)
}
func (m *StopNetworkLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_StopNetworkLoadBalancerRequest.Size(m)
}
func (m *StopNetworkLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopNetworkLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopNetworkLoadBalancerRequest proto.InternalMessageInfo

func (m *StopNetworkLoadBalancerRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type StopNetworkLoadBalancerMetadata struct {
	// ID of the NetworkLoadBalancer resource that is being stopped.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *StopNetworkLoadBalancerMetadata) Reset()         { *m = StopNetworkLoadBalancerMetadata{} }
func (m *StopNetworkLoadBalancerMetadata) String() string { return proto.CompactTextString(m) }
func (*StopNetworkLoadBalancerMetadata) ProtoMessage()    {}
func (*StopNetworkLoadBalancerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{12}
}
func (m *StopNetworkLoadBalancerMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopNetworkLoadBalancerMetadata.Unmarshal(m, b)
}
func (m *StopNetworkLoadBalancerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopNetworkLoadBalancerMetadata.Marshal(b, m, deterministic)
}
func (dst *StopNetworkLoadBalancerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopNetworkLoadBalancerMetadata.Merge(dst, src)
}
func (m *StopNetworkLoadBalancerMetadata) XXX_Size() int {
	return xxx_messageInfo_StopNetworkLoadBalancerMetadata.Size(m)
}
func (m *StopNetworkLoadBalancerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StopNetworkLoadBalancerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StopNetworkLoadBalancerMetadata proto.InternalMessageInfo

func (m *StopNetworkLoadBalancerMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type AttachNetworkLoadBalancerTargetGroupRequest struct {
	// ID of the network load balancer to attach the target group to.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// ID of the attached target group to attach to the network load balancer.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	AttachedTargetGroup  *AttachedTargetGroup `protobuf:"bytes,2,opt,name=attached_target_group,json=attachedTargetGroup,proto3" json:"attached_target_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AttachNetworkLoadBalancerTargetGroupRequest) Reset() {
	*m = AttachNetworkLoadBalancerTargetGroupRequest{}
}
func (m *AttachNetworkLoadBalancerTargetGroupRequest) String() string {
	return proto.CompactTextString(m)
}
func (*AttachNetworkLoadBalancerTargetGroupRequest) ProtoMessage() {}
func (*AttachNetworkLoadBalancerTargetGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{13}
}
func (m *AttachNetworkLoadBalancerTargetGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupRequest.Unmarshal(m, b)
}
func (m *AttachNetworkLoadBalancerTargetGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupRequest.Marshal(b, m, deterministic)
}
func (dst *AttachNetworkLoadBalancerTargetGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupRequest.Merge(dst, src)
}
func (m *AttachNetworkLoadBalancerTargetGroupRequest) XXX_Size() int {
	return xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupRequest.Size(m)
}
func (m *AttachNetworkLoadBalancerTargetGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupRequest proto.InternalMessageInfo

func (m *AttachNetworkLoadBalancerTargetGroupRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *AttachNetworkLoadBalancerTargetGroupRequest) GetAttachedTargetGroup() *AttachedTargetGroup {
	if m != nil {
		return m.AttachedTargetGroup
	}
	return nil
}

type AttachNetworkLoadBalancerTargetGroupMetadata struct {
	// ID of the network load balancer that the target group is being attached to.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// ID of the target group.
	TargetGroupId        string   `protobuf:"bytes,2,opt,name=target_group_id,json=targetGroupId,proto3" json:"target_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttachNetworkLoadBalancerTargetGroupMetadata) Reset() {
	*m = AttachNetworkLoadBalancerTargetGroupMetadata{}
}
func (m *AttachNetworkLoadBalancerTargetGroupMetadata) String() string {
	return proto.CompactTextString(m)
}
func (*AttachNetworkLoadBalancerTargetGroupMetadata) ProtoMessage() {}
func (*AttachNetworkLoadBalancerTargetGroupMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{14}
}
func (m *AttachNetworkLoadBalancerTargetGroupMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupMetadata.Unmarshal(m, b)
}
func (m *AttachNetworkLoadBalancerTargetGroupMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupMetadata.Marshal(b, m, deterministic)
}
func (dst *AttachNetworkLoadBalancerTargetGroupMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupMetadata.Merge(dst, src)
}
func (m *AttachNetworkLoadBalancerTargetGroupMetadata) XXX_Size() int {
	return xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupMetadata.Size(m)
}
func (m *AttachNetworkLoadBalancerTargetGroupMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AttachNetworkLoadBalancerTargetGroupMetadata proto.InternalMessageInfo

func (m *AttachNetworkLoadBalancerTargetGroupMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *AttachNetworkLoadBalancerTargetGroupMetadata) GetTargetGroupId() string {
	if m != nil {
		return m.TargetGroupId
	}
	return ""
}

type DetachNetworkLoadBalancerTargetGroupRequest struct {
	// ID of the network load balancer to detach the target group from.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// ID of the target group.
	TargetGroupId        string   `protobuf:"bytes,2,opt,name=target_group_id,json=targetGroupId,proto3" json:"target_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachNetworkLoadBalancerTargetGroupRequest) Reset() {
	*m = DetachNetworkLoadBalancerTargetGroupRequest{}
}
func (m *DetachNetworkLoadBalancerTargetGroupRequest) String() string {
	return proto.CompactTextString(m)
}
func (*DetachNetworkLoadBalancerTargetGroupRequest) ProtoMessage() {}
func (*DetachNetworkLoadBalancerTargetGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{15}
}
func (m *DetachNetworkLoadBalancerTargetGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupRequest.Unmarshal(m, b)
}
func (m *DetachNetworkLoadBalancerTargetGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupRequest.Marshal(b, m, deterministic)
}
func (dst *DetachNetworkLoadBalancerTargetGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupRequest.Merge(dst, src)
}
func (m *DetachNetworkLoadBalancerTargetGroupRequest) XXX_Size() int {
	return xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupRequest.Size(m)
}
func (m *DetachNetworkLoadBalancerTargetGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupRequest proto.InternalMessageInfo

func (m *DetachNetworkLoadBalancerTargetGroupRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *DetachNetworkLoadBalancerTargetGroupRequest) GetTargetGroupId() string {
	if m != nil {
		return m.TargetGroupId
	}
	return ""
}

type DetachNetworkLoadBalancerTargetGroupMetadata struct {
	// ID of the network load balancer that the target group is being detached from.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// ID of the target group.
	TargetGroupId        string   `protobuf:"bytes,2,opt,name=target_group_id,json=targetGroupId,proto3" json:"target_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachNetworkLoadBalancerTargetGroupMetadata) Reset() {
	*m = DetachNetworkLoadBalancerTargetGroupMetadata{}
}
func (m *DetachNetworkLoadBalancerTargetGroupMetadata) String() string {
	return proto.CompactTextString(m)
}
func (*DetachNetworkLoadBalancerTargetGroupMetadata) ProtoMessage() {}
func (*DetachNetworkLoadBalancerTargetGroupMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{16}
}
func (m *DetachNetworkLoadBalancerTargetGroupMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupMetadata.Unmarshal(m, b)
}
func (m *DetachNetworkLoadBalancerTargetGroupMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupMetadata.Marshal(b, m, deterministic)
}
func (dst *DetachNetworkLoadBalancerTargetGroupMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupMetadata.Merge(dst, src)
}
func (m *DetachNetworkLoadBalancerTargetGroupMetadata) XXX_Size() int {
	return xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupMetadata.Size(m)
}
func (m *DetachNetworkLoadBalancerTargetGroupMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DetachNetworkLoadBalancerTargetGroupMetadata proto.InternalMessageInfo

func (m *DetachNetworkLoadBalancerTargetGroupMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *DetachNetworkLoadBalancerTargetGroupMetadata) GetTargetGroupId() string {
	if m != nil {
		return m.TargetGroupId
	}
	return ""
}

type AddNetworkLoadBalancerListenerRequest struct {
	// ID of the network load balancer to add a listener to.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// Listener spec.
	ListenerSpec         *ListenerSpec `protobuf:"bytes,2,opt,name=listener_spec,json=listenerSpec,proto3" json:"listener_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddNetworkLoadBalancerListenerRequest) Reset()         { *m = AddNetworkLoadBalancerListenerRequest{} }
func (m *AddNetworkLoadBalancerListenerRequest) String() string { return proto.CompactTextString(m) }
func (*AddNetworkLoadBalancerListenerRequest) ProtoMessage()    {}
func (*AddNetworkLoadBalancerListenerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{17}
}
func (m *AddNetworkLoadBalancerListenerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNetworkLoadBalancerListenerRequest.Unmarshal(m, b)
}
func (m *AddNetworkLoadBalancerListenerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNetworkLoadBalancerListenerRequest.Marshal(b, m, deterministic)
}
func (dst *AddNetworkLoadBalancerListenerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNetworkLoadBalancerListenerRequest.Merge(dst, src)
}
func (m *AddNetworkLoadBalancerListenerRequest) XXX_Size() int {
	return xxx_messageInfo_AddNetworkLoadBalancerListenerRequest.Size(m)
}
func (m *AddNetworkLoadBalancerListenerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNetworkLoadBalancerListenerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNetworkLoadBalancerListenerRequest proto.InternalMessageInfo

func (m *AddNetworkLoadBalancerListenerRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *AddNetworkLoadBalancerListenerRequest) GetListenerSpec() *ListenerSpec {
	if m != nil {
		return m.ListenerSpec
	}
	return nil
}

type AddNetworkLoadBalancerListenerMetadata struct {
	// ID of the network load balancer that the listener is being added to.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *AddNetworkLoadBalancerListenerMetadata) Reset() {
	*m = AddNetworkLoadBalancerListenerMetadata{}
}
func (m *AddNetworkLoadBalancerListenerMetadata) String() string { return proto.CompactTextString(m) }
func (*AddNetworkLoadBalancerListenerMetadata) ProtoMessage()    {}
func (*AddNetworkLoadBalancerListenerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{18}
}
func (m *AddNetworkLoadBalancerListenerMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNetworkLoadBalancerListenerMetadata.Unmarshal(m, b)
}
func (m *AddNetworkLoadBalancerListenerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNetworkLoadBalancerListenerMetadata.Marshal(b, m, deterministic)
}
func (dst *AddNetworkLoadBalancerListenerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNetworkLoadBalancerListenerMetadata.Merge(dst, src)
}
func (m *AddNetworkLoadBalancerListenerMetadata) XXX_Size() int {
	return xxx_messageInfo_AddNetworkLoadBalancerListenerMetadata.Size(m)
}
func (m *AddNetworkLoadBalancerListenerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNetworkLoadBalancerListenerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AddNetworkLoadBalancerListenerMetadata proto.InternalMessageInfo

func (m *AddNetworkLoadBalancerListenerMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type RemoveNetworkLoadBalancerListenerRequest struct {
	// ID of the network load balancer to remove the listener from.
	// To get the network load balancer ID, use a [NetworkLoadBalancerService.List] request.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// Name of the listener to delete.
	ListenerName         string   `protobuf:"bytes,2,opt,name=listener_name,json=listenerName,proto3" json:"listener_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveNetworkLoadBalancerListenerRequest) Reset() {
	*m = RemoveNetworkLoadBalancerListenerRequest{}
}
func (m *RemoveNetworkLoadBalancerListenerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveNetworkLoadBalancerListenerRequest) ProtoMessage()    {}
func (*RemoveNetworkLoadBalancerListenerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{19}
}
func (m *RemoveNetworkLoadBalancerListenerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNetworkLoadBalancerListenerRequest.Unmarshal(m, b)
}
func (m *RemoveNetworkLoadBalancerListenerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNetworkLoadBalancerListenerRequest.Marshal(b, m, deterministic)
}
func (dst *RemoveNetworkLoadBalancerListenerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNetworkLoadBalancerListenerRequest.Merge(dst, src)
}
func (m *RemoveNetworkLoadBalancerListenerRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveNetworkLoadBalancerListenerRequest.Size(m)
}
func (m *RemoveNetworkLoadBalancerListenerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNetworkLoadBalancerListenerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNetworkLoadBalancerListenerRequest proto.InternalMessageInfo

func (m *RemoveNetworkLoadBalancerListenerRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *RemoveNetworkLoadBalancerListenerRequest) GetListenerName() string {
	if m != nil {
		return m.ListenerName
	}
	return ""
}

type RemoveNetworkLoadBalancerListenerMetadata struct {
	// ID of the network load balancer that the listener is being removed from.
	NetworkLoadBalancerId string   `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RemoveNetworkLoadBalancerListenerMetadata) Reset() {
	*m = RemoveNetworkLoadBalancerListenerMetadata{}
}
func (m *RemoveNetworkLoadBalancerListenerMetadata) String() string { return proto.CompactTextString(m) }
func (*RemoveNetworkLoadBalancerListenerMetadata) ProtoMessage()    {}
func (*RemoveNetworkLoadBalancerListenerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{20}
}
func (m *RemoveNetworkLoadBalancerListenerMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveNetworkLoadBalancerListenerMetadata.Unmarshal(m, b)
}
func (m *RemoveNetworkLoadBalancerListenerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveNetworkLoadBalancerListenerMetadata.Marshal(b, m, deterministic)
}
func (dst *RemoveNetworkLoadBalancerListenerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveNetworkLoadBalancerListenerMetadata.Merge(dst, src)
}
func (m *RemoveNetworkLoadBalancerListenerMetadata) XXX_Size() int {
	return xxx_messageInfo_RemoveNetworkLoadBalancerListenerMetadata.Size(m)
}
func (m *RemoveNetworkLoadBalancerListenerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveNetworkLoadBalancerListenerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveNetworkLoadBalancerListenerMetadata proto.InternalMessageInfo

func (m *RemoveNetworkLoadBalancerListenerMetadata) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

type ListNetworkLoadBalancerOperationsRequest struct {
	// ID of the NetworkLoadBalancer resource to list operations for.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than [page_size], the service returns a [ListNetworkLoadBalancerOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListNetworkLoadBalancerOperationsResponse.next_page_token] returned by a previous list request.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworkLoadBalancerOperationsRequest) Reset() {
	*m = ListNetworkLoadBalancerOperationsRequest{}
}
func (m *ListNetworkLoadBalancerOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListNetworkLoadBalancerOperationsRequest) ProtoMessage()    {}
func (*ListNetworkLoadBalancerOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{21}
}
func (m *ListNetworkLoadBalancerOperationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkLoadBalancerOperationsRequest.Unmarshal(m, b)
}
func (m *ListNetworkLoadBalancerOperationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkLoadBalancerOperationsRequest.Marshal(b, m, deterministic)
}
func (dst *ListNetworkLoadBalancerOperationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkLoadBalancerOperationsRequest.Merge(dst, src)
}
func (m *ListNetworkLoadBalancerOperationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListNetworkLoadBalancerOperationsRequest.Size(m)
}
func (m *ListNetworkLoadBalancerOperationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkLoadBalancerOperationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkLoadBalancerOperationsRequest proto.InternalMessageInfo

func (m *ListNetworkLoadBalancerOperationsRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *ListNetworkLoadBalancerOperationsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNetworkLoadBalancerOperationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListNetworkLoadBalancerOperationsResponse struct {
	// List of operations for the specified network load balancer.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListNetworkLoadBalancerOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListNetworkLoadBalancerOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworkLoadBalancerOperationsResponse) Reset() {
	*m = ListNetworkLoadBalancerOperationsResponse{}
}
func (m *ListNetworkLoadBalancerOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListNetworkLoadBalancerOperationsResponse) ProtoMessage()    {}
func (*ListNetworkLoadBalancerOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{22}
}
func (m *ListNetworkLoadBalancerOperationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkLoadBalancerOperationsResponse.Unmarshal(m, b)
}
func (m *ListNetworkLoadBalancerOperationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkLoadBalancerOperationsResponse.Marshal(b, m, deterministic)
}
func (dst *ListNetworkLoadBalancerOperationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkLoadBalancerOperationsResponse.Merge(dst, src)
}
func (m *ListNetworkLoadBalancerOperationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListNetworkLoadBalancerOperationsResponse.Size(m)
}
func (m *ListNetworkLoadBalancerOperationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkLoadBalancerOperationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkLoadBalancerOperationsResponse proto.InternalMessageInfo

func (m *ListNetworkLoadBalancerOperationsResponse) GetOperations() []*operation.Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *ListNetworkLoadBalancerOperationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetTargetStatesRequest struct {
	// ID of the NetworkLoadBalancer resource with an attached target group.
	NetworkLoadBalancerId string `protobuf:"bytes,1,opt,name=network_load_balancer_id,json=networkLoadBalancerId,proto3" json:"network_load_balancer_id,omitempty"`
	// ID of the target group to get states of resources from.
	TargetGroupId        string   `protobuf:"bytes,2,opt,name=target_group_id,json=targetGroupId,proto3" json:"target_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTargetStatesRequest) Reset()         { *m = GetTargetStatesRequest{} }
func (m *GetTargetStatesRequest) String() string { return proto.CompactTextString(m) }
func (*GetTargetStatesRequest) ProtoMessage()    {}
func (*GetTargetStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{23}
}
func (m *GetTargetStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTargetStatesRequest.Unmarshal(m, b)
}
func (m *GetTargetStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTargetStatesRequest.Marshal(b, m, deterministic)
}
func (dst *GetTargetStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTargetStatesRequest.Merge(dst, src)
}
func (m *GetTargetStatesRequest) XXX_Size() int {
	return xxx_messageInfo_GetTargetStatesRequest.Size(m)
}
func (m *GetTargetStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTargetStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTargetStatesRequest proto.InternalMessageInfo

func (m *GetTargetStatesRequest) GetNetworkLoadBalancerId() string {
	if m != nil {
		return m.NetworkLoadBalancerId
	}
	return ""
}

func (m *GetTargetStatesRequest) GetTargetGroupId() string {
	if m != nil {
		return m.TargetGroupId
	}
	return ""
}

type GetTargetStatesResponse struct {
	// List of states of targets within the target group that is specified in the [GetTargetStatesRequest] message.
	TargetStates         []*TargetState `protobuf:"bytes,1,rep,name=target_states,json=targetStates,proto3" json:"target_states,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetTargetStatesResponse) Reset()         { *m = GetTargetStatesResponse{} }
func (m *GetTargetStatesResponse) String() string { return proto.CompactTextString(m) }
func (*GetTargetStatesResponse) ProtoMessage()    {}
func (*GetTargetStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{24}
}
func (m *GetTargetStatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTargetStatesResponse.Unmarshal(m, b)
}
func (m *GetTargetStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTargetStatesResponse.Marshal(b, m, deterministic)
}
func (dst *GetTargetStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTargetStatesResponse.Merge(dst, src)
}
func (m *GetTargetStatesResponse) XXX_Size() int {
	return xxx_messageInfo_GetTargetStatesResponse.Size(m)
}
func (m *GetTargetStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTargetStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTargetStatesResponse proto.InternalMessageInfo

func (m *GetTargetStatesResponse) GetTargetStates() []*TargetState {
	if m != nil {
		return m.TargetStates
	}
	return nil
}

// External address specification that is used by [ListenerSpec].
type ExternalAddressSpec struct {
	// Public IP address for a listener.
	// If you provide a static public IP address for the [NetworkLoadBalancerService.Update]
	// method, it will replace the existing listener address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// IP version.
	IpVersion            IpVersion `protobuf:"varint,2,opt,name=ip_version,json=ipVersion,proto3,enum=yandex.cloud.loadbalancer.v1.IpVersion" json:"ip_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ExternalAddressSpec) Reset()         { *m = ExternalAddressSpec{} }
func (m *ExternalAddressSpec) String() string { return proto.CompactTextString(m) }
func (*ExternalAddressSpec) ProtoMessage()    {}
func (*ExternalAddressSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{25}
}
func (m *ExternalAddressSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExternalAddressSpec.Unmarshal(m, b)
}
func (m *ExternalAddressSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExternalAddressSpec.Marshal(b, m, deterministic)
}
func (dst *ExternalAddressSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalAddressSpec.Merge(dst, src)
}
func (m *ExternalAddressSpec) XXX_Size() int {
	return xxx_messageInfo_ExternalAddressSpec.Size(m)
}
func (m *ExternalAddressSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalAddressSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalAddressSpec proto.InternalMessageInfo

func (m *ExternalAddressSpec) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ExternalAddressSpec) GetIpVersion() IpVersion {
	if m != nil {
		return m.IpVersion
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

// Listener specification that will be used by a network load balancer.
type ListenerSpec struct {
	// Name of the listener. The name must be unique for each listener on a single load balancer. 3-63 characters long.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Port for incoming traffic.
	Port int64 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol for incoming traffic.
	Protocol Listener_Protocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=yandex.cloud.loadbalancer.v1.Listener_Protocol" json:"protocol,omitempty"`
	// IP address for incoming traffic. Either the ID of the previously created address or the address specification.
	//
	// Types that are valid to be assigned to Address:
	//	*ListenerSpec_ExternalAddressSpec
	Address              isListenerSpec_Address `protobuf_oneof:"address"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListenerSpec) Reset()         { *m = ListenerSpec{} }
func (m *ListenerSpec) String() string { return proto.CompactTextString(m) }
func (*ListenerSpec) ProtoMessage()    {}
func (*ListenerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f, []int{26}
}
func (m *ListenerSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenerSpec.Unmarshal(m, b)
}
func (m *ListenerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenerSpec.Marshal(b, m, deterministic)
}
func (dst *ListenerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenerSpec.Merge(dst, src)
}
func (m *ListenerSpec) XXX_Size() int {
	return xxx_messageInfo_ListenerSpec.Size(m)
}
func (m *ListenerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ListenerSpec proto.InternalMessageInfo

func (m *ListenerSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListenerSpec) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ListenerSpec) GetProtocol() Listener_Protocol {
	if m != nil {
		return m.Protocol
	}
	return Listener_PROTOCOL_UNSPECIFIED
}

type isListenerSpec_Address interface {
	isListenerSpec_Address()
}

type ListenerSpec_ExternalAddressSpec struct {
	ExternalAddressSpec *ExternalAddressSpec `protobuf:"bytes,4,opt,name=external_address_spec,json=externalAddressSpec,proto3,oneof"`
}

func (*ListenerSpec_ExternalAddressSpec) isListenerSpec_Address() {}

func (m *ListenerSpec) GetAddress() isListenerSpec_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ListenerSpec) GetExternalAddressSpec() *ExternalAddressSpec {
	if x, ok := m.GetAddress().(*ListenerSpec_ExternalAddressSpec); ok {
		return x.ExternalAddressSpec
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ListenerSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ListenerSpec_OneofMarshaler, _ListenerSpec_OneofUnmarshaler, _ListenerSpec_OneofSizer, []interface{}{
		(*ListenerSpec_ExternalAddressSpec)(nil),
	}
}

func _ListenerSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ListenerSpec)
	// address
	switch x := m.Address.(type) {
	case *ListenerSpec_ExternalAddressSpec:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExternalAddressSpec); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ListenerSpec.Address has unexpected type %T", x)
	}
	return nil
}

func _ListenerSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ListenerSpec)
	switch tag {
	case 4: // address.external_address_spec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExternalAddressSpec)
		err := b.DecodeMessage(msg)
		m.Address = &ListenerSpec_ExternalAddressSpec{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ListenerSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ListenerSpec)
	// address
	switch x := m.Address.(type) {
	case *ListenerSpec_ExternalAddressSpec:
		s := proto.Size(x.ExternalAddressSpec)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GetNetworkLoadBalancerRequest)(nil), "yandex.cloud.loadbalancer.v1.GetNetworkLoadBalancerRequest")
	proto.RegisterType((*ListNetworkLoadBalancersRequest)(nil), "yandex.cloud.loadbalancer.v1.ListNetworkLoadBalancersRequest")
	proto.RegisterType((*ListNetworkLoadBalancersResponse)(nil), "yandex.cloud.loadbalancer.v1.ListNetworkLoadBalancersResponse")
	proto.RegisterType((*CreateNetworkLoadBalancerRequest)(nil), "yandex.cloud.loadbalancer.v1.CreateNetworkLoadBalancerRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.loadbalancer.v1.CreateNetworkLoadBalancerRequest.LabelsEntry")
	proto.RegisterType((*CreateNetworkLoadBalancerMetadata)(nil), "yandex.cloud.loadbalancer.v1.CreateNetworkLoadBalancerMetadata")
	proto.RegisterType((*UpdateNetworkLoadBalancerRequest)(nil), "yandex.cloud.loadbalancer.v1.UpdateNetworkLoadBalancerRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.loadbalancer.v1.UpdateNetworkLoadBalancerRequest.LabelsEntry")
	proto.RegisterType((*UpdateNetworkLoadBalancerMetadata)(nil), "yandex.cloud.loadbalancer.v1.UpdateNetworkLoadBalancerMetadata")
	proto.RegisterType((*DeleteNetworkLoadBalancerRequest)(nil), "yandex.cloud.loadbalancer.v1.DeleteNetworkLoadBalancerRequest")
	proto.RegisterType((*DeleteNetworkLoadBalancerMetadata)(nil), "yandex.cloud.loadbalancer.v1.DeleteNetworkLoadBalancerMetadata")
	proto.RegisterType((*StartNetworkLoadBalancerRequest)(nil), "yandex.cloud.loadbalancer.v1.StartNetworkLoadBalancerRequest")
	proto.RegisterType((*StartNetworkLoadBalancerMetadata)(nil), "yandex.cloud.loadbalancer.v1.StartNetworkLoadBalancerMetadata")
	proto.RegisterType((*StopNetworkLoadBalancerRequest)(nil), "yandex.cloud.loadbalancer.v1.StopNetworkLoadBalancerRequest")
	proto.RegisterType((*StopNetworkLoadBalancerMetadata)(nil), "yandex.cloud.loadbalancer.v1.StopNetworkLoadBalancerMetadata")
	proto.RegisterType((*AttachNetworkLoadBalancerTargetGroupRequest)(nil), "yandex.cloud.loadbalancer.v1.AttachNetworkLoadBalancerTargetGroupRequest")
	proto.RegisterType((*AttachNetworkLoadBalancerTargetGroupMetadata)(nil), "yandex.cloud.loadbalancer.v1.AttachNetworkLoadBalancerTargetGroupMetadata")
	proto.RegisterType((*DetachNetworkLoadBalancerTargetGroupRequest)(nil), "yandex.cloud.loadbalancer.v1.DetachNetworkLoadBalancerTargetGroupRequest")
	proto.RegisterType((*DetachNetworkLoadBalancerTargetGroupMetadata)(nil), "yandex.cloud.loadbalancer.v1.DetachNetworkLoadBalancerTargetGroupMetadata")
	proto.RegisterType((*AddNetworkLoadBalancerListenerRequest)(nil), "yandex.cloud.loadbalancer.v1.AddNetworkLoadBalancerListenerRequest")
	proto.RegisterType((*AddNetworkLoadBalancerListenerMetadata)(nil), "yandex.cloud.loadbalancer.v1.AddNetworkLoadBalancerListenerMetadata")
	proto.RegisterType((*RemoveNetworkLoadBalancerListenerRequest)(nil), "yandex.cloud.loadbalancer.v1.RemoveNetworkLoadBalancerListenerRequest")
	proto.RegisterType((*RemoveNetworkLoadBalancerListenerMetadata)(nil), "yandex.cloud.loadbalancer.v1.RemoveNetworkLoadBalancerListenerMetadata")
	proto.RegisterType((*ListNetworkLoadBalancerOperationsRequest)(nil), "yandex.cloud.loadbalancer.v1.ListNetworkLoadBalancerOperationsRequest")
	proto.RegisterType((*ListNetworkLoadBalancerOperationsResponse)(nil), "yandex.cloud.loadbalancer.v1.ListNetworkLoadBalancerOperationsResponse")
	proto.RegisterType((*GetTargetStatesRequest)(nil), "yandex.cloud.loadbalancer.v1.GetTargetStatesRequest")
	proto.RegisterType((*GetTargetStatesResponse)(nil), "yandex.cloud.loadbalancer.v1.GetTargetStatesResponse")
	proto.RegisterType((*ExternalAddressSpec)(nil), "yandex.cloud.loadbalancer.v1.ExternalAddressSpec")
	proto.RegisterType((*ListenerSpec)(nil), "yandex.cloud.loadbalancer.v1.ListenerSpec")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkLoadBalancerServiceClient is the client API for NetworkLoadBalancerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkLoadBalancerServiceClient interface {
	// Returns the specified NetworkLoadBalancer resource.
	//
	// Get the list of available NetworkLoadBalancer resources by making a [List] request.
	Get(ctx context.Context, in *GetNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancer, error)
	// Retrieves the list of NetworkLoadBalancer resources in the specified folder.
	List(ctx context.Context, in *ListNetworkLoadBalancersRequest, opts ...grpc.CallOption) (*ListNetworkLoadBalancersResponse, error)
	// Creates a network load balancer in the specified folder using the data specified in the request.
	Create(ctx context.Context, in *CreateNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified network load balancer.
	Update(ctx context.Context, in *UpdateNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified network load balancer.
	Delete(ctx context.Context, in *DeleteNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Starts load balancing and health checking with the specified network load balancer with specified settings.
	// Changes network load balancer status to `` ACTIVE ``.
	Start(ctx context.Context, in *StartNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Stops load balancing and health checking with the specified network load balancer.
	// Changes load balancer status to `` STOPPED ``.
	Stop(ctx context.Context, in *StopNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Attaches a target group to the specified network load balancer.
	AttachTargetGroup(ctx context.Context, in *AttachNetworkLoadBalancerTargetGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Detaches the target group from the specified network load balancer.
	DetachTargetGroup(ctx context.Context, in *DetachNetworkLoadBalancerTargetGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Gets states of target resources in the attached target group.
	GetTargetStates(ctx context.Context, in *GetTargetStatesRequest, opts ...grpc.CallOption) (*GetTargetStatesResponse, error)
	// Adds a listener to the specified network load balancer.
	AddListener(ctx context.Context, in *AddNetworkLoadBalancerListenerRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Removes the listener from the specified network load balancer.
	RemoveListener(ctx context.Context, in *RemoveNetworkLoadBalancerListenerRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Lists operations for the specified network load balancer.
	ListOperations(ctx context.Context, in *ListNetworkLoadBalancerOperationsRequest, opts ...grpc.CallOption) (*ListNetworkLoadBalancerOperationsResponse, error)
}

type networkLoadBalancerServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkLoadBalancerServiceClient(cc *grpc.ClientConn) NetworkLoadBalancerServiceClient {
	return &networkLoadBalancerServiceClient{cc}
}

func (c *networkLoadBalancerServiceClient) Get(ctx context.Context, in *GetNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*NetworkLoadBalancer, error) {
	out := new(NetworkLoadBalancer)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) List(ctx context.Context, in *ListNetworkLoadBalancersRequest, opts ...grpc.CallOption) (*ListNetworkLoadBalancersResponse, error) {
	out := new(ListNetworkLoadBalancersResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) Create(ctx context.Context, in *CreateNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) Update(ctx context.Context, in *UpdateNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) Delete(ctx context.Context, in *DeleteNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) Start(ctx context.Context, in *StartNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) Stop(ctx context.Context, in *StopNetworkLoadBalancerRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) AttachTargetGroup(ctx context.Context, in *AttachNetworkLoadBalancerTargetGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/AttachTargetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) DetachTargetGroup(ctx context.Context, in *DetachNetworkLoadBalancerTargetGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/DetachTargetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) GetTargetStates(ctx context.Context, in *GetTargetStatesRequest, opts ...grpc.CallOption) (*GetTargetStatesResponse, error) {
	out := new(GetTargetStatesResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/GetTargetStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) AddListener(ctx context.Context, in *AddNetworkLoadBalancerListenerRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/AddListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) RemoveListener(ctx context.Context, in *RemoveNetworkLoadBalancerListenerRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/RemoveListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkLoadBalancerServiceClient) ListOperations(ctx context.Context, in *ListNetworkLoadBalancerOperationsRequest, opts ...grpc.CallOption) (*ListNetworkLoadBalancerOperationsResponse, error) {
	out := new(ListNetworkLoadBalancerOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkLoadBalancerServiceServer is the server API for NetworkLoadBalancerService service.
type NetworkLoadBalancerServiceServer interface {
	// Returns the specified NetworkLoadBalancer resource.
	//
	// Get the list of available NetworkLoadBalancer resources by making a [List] request.
	Get(context.Context, *GetNetworkLoadBalancerRequest) (*NetworkLoadBalancer, error)
	// Retrieves the list of NetworkLoadBalancer resources in the specified folder.
	List(context.Context, *ListNetworkLoadBalancersRequest) (*ListNetworkLoadBalancersResponse, error)
	// Creates a network load balancer in the specified folder using the data specified in the request.
	Create(context.Context, *CreateNetworkLoadBalancerRequest) (*operation.Operation, error)
	// Updates the specified network load balancer.
	Update(context.Context, *UpdateNetworkLoadBalancerRequest) (*operation.Operation, error)
	// Deletes the specified network load balancer.
	Delete(context.Context, *DeleteNetworkLoadBalancerRequest) (*operation.Operation, error)
	// Starts load balancing and health checking with the specified network load balancer with specified settings.
	// Changes network load balancer status to `` ACTIVE ``.
	Start(context.Context, *StartNetworkLoadBalancerRequest) (*operation.Operation, error)
	// Stops load balancing and health checking with the specified network load balancer.
	// Changes load balancer status to `` STOPPED ``.
	Stop(context.Context, *StopNetworkLoadBalancerRequest) (*operation.Operation, error)
	// Attaches a target group to the specified network load balancer.
	AttachTargetGroup(context.Context, *AttachNetworkLoadBalancerTargetGroupRequest) (*operation.Operation, error)
	// Detaches the target group from the specified network load balancer.
	DetachTargetGroup(context.Context, *DetachNetworkLoadBalancerTargetGroupRequest) (*operation.Operation, error)
	// Gets states of target resources in the attached target group.
	GetTargetStates(context.Context, *GetTargetStatesRequest) (*GetTargetStatesResponse, error)
	// Adds a listener to the specified network load balancer.
	AddListener(context.Context, *AddNetworkLoadBalancerListenerRequest) (*operation.Operation, error)
	// Removes the listener from the specified network load balancer.
	RemoveListener(context.Context, *RemoveNetworkLoadBalancerListenerRequest) (*operation.Operation, error)
	// Lists operations for the specified network load balancer.
	ListOperations(context.Context, *ListNetworkLoadBalancerOperationsRequest) (*ListNetworkLoadBalancerOperationsResponse, error)
}

func RegisterNetworkLoadBalancerServiceServer(s *grpc.Server, srv NetworkLoadBalancerServiceServer) {
	s.RegisterService(&_NetworkLoadBalancerService_serviceDesc, srv)
}

func _NetworkLoadBalancerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).Get(ctx, req.(*GetNetworkLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkLoadBalancersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).List(ctx, req.(*ListNetworkLoadBalancersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).Create(ctx, req.(*CreateNetworkLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).Update(ctx, req.(*UpdateNetworkLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).Delete(ctx, req.(*DeleteNetworkLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNetworkLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).Start(ctx, req.(*StartNetworkLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNetworkLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).Stop(ctx, req.(*StopNetworkLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_AttachTargetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachNetworkLoadBalancerTargetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).AttachTargetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/AttachTargetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).AttachTargetGroup(ctx, req.(*AttachNetworkLoadBalancerTargetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_DetachTargetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachNetworkLoadBalancerTargetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).DetachTargetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/DetachTargetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).DetachTargetGroup(ctx, req.(*DetachNetworkLoadBalancerTargetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_GetTargetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).GetTargetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/GetTargetStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).GetTargetStates(ctx, req.(*GetTargetStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_AddListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkLoadBalancerListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).AddListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/AddListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).AddListener(ctx, req.(*AddNetworkLoadBalancerListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_RemoveListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNetworkLoadBalancerListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).RemoveListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/RemoveListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).RemoveListener(ctx, req.(*RemoveNetworkLoadBalancerListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkLoadBalancerService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkLoadBalancerOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkLoadBalancerServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkLoadBalancerServiceServer).ListOperations(ctx, req.(*ListNetworkLoadBalancerOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkLoadBalancerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService",
	HandlerType: (*NetworkLoadBalancerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NetworkLoadBalancerService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NetworkLoadBalancerService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NetworkLoadBalancerService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NetworkLoadBalancerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NetworkLoadBalancerService_Delete_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _NetworkLoadBalancerService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _NetworkLoadBalancerService_Stop_Handler,
		},
		{
			MethodName: "AttachTargetGroup",
			Handler:    _NetworkLoadBalancerService_AttachTargetGroup_Handler,
		},
		{
			MethodName: "DetachTargetGroup",
			Handler:    _NetworkLoadBalancerService_DetachTargetGroup_Handler,
		},
		{
			MethodName: "GetTargetStates",
			Handler:    _NetworkLoadBalancerService_GetTargetStates_Handler,
		},
		{
			MethodName: "AddListener",
			Handler:    _NetworkLoadBalancerService_AddListener_Handler,
		},
		{
			MethodName: "RemoveListener",
			Handler:    _NetworkLoadBalancerService_RemoveListener_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _NetworkLoadBalancerService_ListOperations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/loadbalancer/v1/network_load_balancer_service.proto",
}

func init() {
	proto.RegisterFile("yandex/cloud/loadbalancer/v1/network_load_balancer_service.proto", fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f)
}

var fileDescriptor_network_load_balancer_service_afd9dcb16b624c3f = []byte{
	// 1794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4d, 0x6c, 0x1c, 0x49,
	0x15, 0xa6, 0xc7, 0xe3, 0xb1, 0xe7, 0x4d, 0xe2, 0x5d, 0x2a, 0x3f, 0x0c, 0xa3, 0x0d, 0x99, 0xb4,
	0xb4, 0xd9, 0x89, 0xb3, 0xf3, 0xd3, 0x93, 0xc4, 0x89, 0x93, 0x78, 0x59, 0x4f, 0x36, 0xf6, 0xce,
	0xca, 0xc9, 0x66, 0x7b, 0x12, 0x04, 0x6b, 0x56, 0xa3, 0xf2, 0x74, 0x65, 0xd2, 0x72, 0xbb, 0xbb,
	0xe9, 0x2e, 0x7b, 0xe3, 0x2c, 0x7b, 0xc9, 0x05, 0x64, 0x81, 0x10, 0x42, 0x42, 0xe2, 0x80, 0x38,
	0x20, 0x0e, 0x70, 0x63, 0x11, 0x07, 0x90, 0x90, 0x90, 0x00, 0xd9, 0x67, 0x38, 0xc1, 0x01, 0x09,
	0x89, 0x03, 0xe7, 0x15, 0x7f, 0xda, 0x13, 0xaa, 0xaa, 0x9e, 0x71, 0x8f, 0xdd, 0xd3, 0xdd, 0xb3,
	0x3d, 0xb6, 0xb8, 0x4d, 0xf7, 0xab, 0xf7, 0xaa, 0xbe, 0xaf, 0xea, 0xbd, 0xea, 0xef, 0x69, 0xe0,
	0xf5, 0x6d, 0x6c, 0x6a, 0xe4, 0x69, 0xb5, 0x63, 0x58, 0x9b, 0x5a, 0xd5, 0xb0, 0xb0, 0xb6, 0x86,
	0x0d, 0x6c, 0x76, 0x88, 0x53, 0xdd, 0x52, 0xaa, 0x26, 0xa1, 0xef, 0x5b, 0xce, 0x7a, 0x9b, 0xbd,
	0x6f, 0xf7, 0x0c, 0x6d, 0x97, 0x38, 0x5b, 0x7a, 0x87, 0x54, 0x6c, 0xc7, 0xa2, 0x16, 0x7a, 0x49,
	0x44, 0xa8, 0xf0, 0x08, 0x15, 0x7f, 0x84, 0xca, 0x96, 0x52, 0x78, 0xa9, 0x6b, 0x59, 0x5d, 0x83,
	0x54, 0xb1, 0xad, 0x57, 0xb1, 0x69, 0x5a, 0x14, 0x53, 0xdd, 0x32, 0x5d, 0xe1, 0x5b, 0x28, 0x7a,
	0x56, 0xfe, 0xb4, 0xb6, 0xf9, 0xb8, 0xfa, 0x58, 0x27, 0x86, 0xd6, 0xde, 0xc0, 0xee, 0xba, 0x37,
	0xa2, 0xe0, 0xad, 0x8f, 0xf9, 0x5b, 0x36, 0x71, 0xb8, 0xbb, 0x67, 0x3b, 0x37, 0xb0, 0xf6, 0x2d,
	0x6c, 0xe8, 0x9a, 0xdf, 0x7c, 0x71, 0xc0, 0xdc, 0x77, 0x3e, 0x14, 0xe6, 0xc6, 0xe8, 0x14, 0x08,
	0x4f, 0x79, 0x0d, 0xce, 0x2d, 0x13, 0x7a, 0x5f, 0x8c, 0x58, 0xb1, 0xb0, 0xd6, 0xf0, 0xec, 0x2a,
	0xf9, 0xda, 0x26, 0x71, 0x29, 0x5a, 0x84, 0x7c, 0x30, 0x85, 0xba, 0x96, 0x97, 0x8a, 0x52, 0x29,
	0xdb, 0x98, 0xde, 0xd9, 0x53, 0xd2, 0xb7, 0x17, 0xae, 0xd5, 0xd4, 0x33, 0xe6, 0xe1, 0x38, 0x4d,
	0x4d, 0xfe, 0x9d, 0x04, 0xe7, 0x57, 0x74, 0x37, 0x68, 0x16, 0xb7, 0x37, 0xcd, 0x25, 0xc8, 0x3e,
	0xb6, 0x0c, 0xcd, 0x1f, 0xf7, 0xc4, 0x3f, 0x76, 0x15, 0xa9, 0x1f, 0x7b, 0x5a, 0x98, 0x9b, 0x1a,
	0x7a, 0x05, 0xb2, 0x36, 0xee, 0x92, 0xb6, 0xab, 0x3f, 0x23, 0xf9, 0x54, 0x51, 0x2a, 0x4d, 0x34,
	0xe0, 0x93, 0x5d, 0x25, 0x73, 0x7b, 0x41, 0xa9, 0xd5, 0x6a, 0xea, 0x34, 0x33, 0xb6, 0xf4, 0x67,
	0x04, 0x95, 0x00, 0xf8, 0x40, 0x6a, 0xad, 0x13, 0x33, 0x3f, 0xc1, 0x83, 0x66, 0x77, 0xf6, 0x94,
	0x49, 0x3e, 0x52, 0xe5, 0x51, 0x1e, 0x32, 0x1b, 0x92, 0x21, 0xf3, 0x58, 0x37, 0x28, 0x71, 0xf2,
	0x69, 0x3e, 0x0a, 0x76, 0xf6, 0xfa, 0xf1, 0x3c, 0x8b, 0xfc, 0x0b, 0x09, 0x8a, 0xc3, 0x51, 0xb8,
	0xb6, 0x65, 0xba, 0x04, 0x75, 0xe1, 0x6c, 0x20, 0x5b, 0x6e, 0x5e, 0x2a, 0x4e, 0x94, 0x72, 0x75,
	0xa5, 0x12, 0x76, 0xd4, 0x2a, 0x41, 0xfb, 0x70, 0x3a, 0x80, 0x54, 0x17, 0x5d, 0x84, 0x17, 0x4c,
	0xf2, 0x94, 0xb6, 0x7d, 0x00, 0x19, 0x15, 0x59, 0xf5, 0x24, 0x7b, 0xfd, 0xa0, 0x87, 0x4c, 0xfe,
	0xeb, 0x24, 0x14, 0xef, 0x38, 0x04, 0x53, 0x12, 0xb2, 0xc7, 0x23, 0x90, 0x7f, 0x0d, 0xd2, 0x26,
	0xde, 0x10, 0xbc, 0x67, 0x1b, 0x17, 0x3e, 0xde, 0x55, 0xce, 0x7d, 0x7d, 0x15, 0x97, 0x9f, 0xbd,
	0xb7, 0x5a, 0xc6, 0xe5, 0x67, 0xb5, 0xf2, 0xfc, 0x7b, 0x1f, 0x28, 0xaf, 0xce, 0x29, 0x1f, 0xae,
	0x7a, 0x4f, 0x2a, 0x1f, 0x8e, 0x2e, 0x43, 0x4e, 0x23, 0x6e, 0xc7, 0xd1, 0x6d, 0x76, 0x6a, 0x07,
	0xf7, 0xa2, 0x7e, 0x6d, 0x4e, 0xf5, 0x5b, 0xd1, 0x8f, 0x25, 0xc8, 0x18, 0x78, 0x8d, 0x18, 0x6e,
	0x3e, 0xcd, 0x59, 0x7b, 0x2b, 0x9c, 0xb5, 0x28, 0x7c, 0x95, 0x15, 0x1e, 0xec, 0xae, 0x49, 0x9d,
	0xed, 0xc6, 0x17, 0x3f, 0xde, 0x55, 0x72, 0xab, 0xe5, 0x76, 0xad, 0x3c, 0xcf, 0x96, 0x3d, 0xfb,
	0x9c, 0x63, 0x9c, 0xbb, 0x2a, 0xb0, 0xce, 0x5d, 0xf9, 0x68, 0x4f, 0xc9, 0x14, 0xd2, 0x4a, 0x99,
	0xff, 0x42, 0xe8, 0x45, 0x0f, 0x5c, 0x7f, 0xbc, 0xea, 0x2d, 0x8d, 0x91, 0xe6, 0x90, 0xae, 0x6e,
	0x99, 0x8c, 0xb4, 0xc9, 0x20, 0xd2, 0x84, 0xb9, 0xa9, 0xa1, 0x07, 0x90, 0xa6, 0xdb, 0x36, 0xc9,
	0x67, 0x8a, 0x52, 0x69, 0xa6, 0x3e, 0x37, 0xf2, 0x19, 0xa8, 0x3c, 0xdc, 0xb6, 0x49, 0x23, 0xcd,
	0xa2, 0xab, 0x3c, 0x12, 0x5a, 0x85, 0x19, 0x43, 0x77, 0x29, 0x31, 0x59, 0x2d, 0xb3, 0x49, 0xc7,
	0xcd, 0x4f, 0x71, 0xa6, 0x66, 0xc3, 0x63, 0xaf, 0x78, 0x3e, 0x2d, 0x9b, 0x74, 0x1a, 0xd3, 0x02,
	0xba, 0x52, 0x53, 0x4f, 0x1a, 0xbe, 0xf7, 0x2e, 0xb2, 0xe1, 0x2c, 0xa6, 0x14, 0x77, 0x9e, 0x10,
	0xad, 0x4d, 0xb1, 0xd3, 0x25, 0xb4, 0xdd, 0x75, 0xac, 0x4d, 0xdb, 0xcd, 0x4f, 0xc7, 0x39, 0xc4,
	0x8b, 0x9e, 0xef, 0x43, 0xee, 0xba, 0xcc, 0x3c, 0x1b, 0x53, 0xcf, 0xf7, 0x94, 0x89, 0xdb, 0x0b,
	0x8a, 0x7a, 0x1a, 0x1f, 0xb6, 0xba, 0x85, 0x79, 0xc8, 0xf9, 0xf6, 0x08, 0xbd, 0x08, 0x13, 0xeb,
	0x64, 0x5b, 0x9c, 0x44, 0x95, 0xfd, 0x44, 0xa7, 0x61, 0x72, 0x0b, 0x1b, 0x9b, 0xde, 0xb9, 0x53,
	0xc5, 0xc3, 0xcd, 0xd4, 0x0d, 0x49, 0xfe, 0x2a, 0x5c, 0x18, 0xba, 0xff, 0xf7, 0x08, 0xc5, 0x1a,
	0xa6, 0x18, 0x5d, 0x8f, 0x2a, 0x62, 0xc3, 0x4a, 0xd7, 0xaf, 0x27, 0xa1, 0xf8, 0xc8, 0xd6, 0xc2,
	0xd3, 0xe7, 0x6e, 0x64, 0x89, 0x1c, 0x3c, 0x18, 0xc1, 0x73, 0xa1, 0x5b, 0x90, 0xdb, 0xe4, 0x53,
	0xf1, 0xcb, 0x83, 0x23, 0xcd, 0xd5, 0x0b, 0x15, 0x71, 0xbf, 0x54, 0x7a, 0xf7, 0x4b, 0x65, 0x89,
	0xdd, 0x2f, 0xf7, 0xb0, 0xbb, 0xae, 0x82, 0x18, 0xce, 0x7e, 0xf7, 0xf3, 0x72, 0x22, 0x51, 0x5e,
	0xa6, 0xe3, 0xe6, 0xe5, 0x64, 0x9c, 0xbc, 0x8c, 0x22, 0xee, 0x68, 0xf2, 0xf2, 0x70, 0x6a, 0x64,
	0x8e, 0x23, 0x35, 0xa6, 0xfe, 0x2f, 0x53, 0x63, 0xe8, 0x16, 0x24, 0x4f, 0x0d, 0x1d, 0x8a, 0x6f,
	0x10, 0x83, 0x1c, 0x43, 0x66, 0x30, 0x20, 0x43, 0xa7, 0x4a, 0x0e, 0xe4, 0x09, 0x9c, 0x6f, 0x51,
	0xec, 0xd0, 0xa3, 0xc7, 0xb1, 0x0a, 0xc5, 0x61, 0x33, 0x25, 0x87, 0xd1, 0x85, 0x2f, 0xb4, 0xa8,
	0x65, 0x1f, 0x3d, 0x8a, 0x77, 0x19, 0x5f, 0x81, 0x13, 0x25, 0x07, 0xf1, 0x37, 0x09, 0x2e, 0x8b,
	0x24, 0x09, 0x08, 0xef, 0xcb, 0x8b, 0x31, 0x97, 0xde, 0x75, 0x38, 0x13, 0x98, 0xd6, 0x5e, 0x11,
	0xfe, 0x14, 0x59, 0x2d, 0x2e, 0xeb, 0x53, 0x01, 0x29, 0x2d, 0x7f, 0x47, 0x82, 0x57, 0xe3, 0x60,
	0x4c, 0xcc, 0x26, 0xfb, 0x48, 0xf4, 0xa3, 0x61, 0xe3, 0xbd, 0x8f, 0x44, 0xba, 0x3f, 0x4d, 0x53,
	0x93, 0x7f, 0x26, 0xc1, 0xe5, 0x37, 0xc8, 0xb1, 0xb3, 0x7e, 0x75, 0xc8, 0xf2, 0x0e, 0x78, 0x1f,
	0x58, 0x2c, 0xa3, 0x2f, 0xce, 0x62, 0x8f, 0x8f, 0xbe, 0x3f, 0x48, 0xf0, 0xf2, 0xa2, 0xa6, 0x05,
	0x2c, 0xa7, 0x77, 0xa9, 0x8c, 0x99, 0xb8, 0x47, 0x70, 0x72, 0xe0, 0x8a, 0xf3, 0x8e, 0xe9, 0x28,
	0x37, 0x9c, 0x38, 0x9f, 0x27, 0xfc, 0xb7, 0x9b, 0x8c, 0xe1, 0x62, 0x38, 0x8c, 0xe4, 0xf9, 0xfd,
	0x1b, 0x09, 0x4a, 0x2a, 0xd9, 0xb0, 0xb6, 0xc8, 0xf1, 0xb1, 0xf5, 0x96, 0x8f, 0x2d, 0x9f, 0x76,
	0x79, 0x99, 0xf9, 0x46, 0x7f, 0x27, 0xf5, 0x29, 0xba, 0x8f, 0x37, 0x88, 0xac, 0xc1, 0xa5, 0xc8,
	0xe5, 0x27, 0x67, 0xe9, 0xf7, 0x12, 0x94, 0x86, 0x48, 0xcd, 0xb7, 0x7b, 0xca, 0xdf, 0x1d, 0x33,
	0x4b, 0xe3, 0x57, 0xd5, 0xf2, 0xf7, 0x25, 0xb8, 0x14, 0x03, 0x86, 0x27, 0x9d, 0x17, 0x01, 0xfa,
	0x6d, 0x8d, 0x9e, 0x5c, 0xbe, 0x30, 0x78, 0xa2, 0xf7, 0xdb, 0x1e, 0x7d, 0x7f, 0xd5, 0xe7, 0x14,
	0x5b, 0x14, 0x7f, 0x5b, 0x82, 0xb3, 0xcb, 0x84, 0x8a, 0x62, 0xd1, 0xa2, 0x98, 0x12, 0x77, 0x7c,
	0xed, 0x0e, 0x54, 0x1b, 0x56, 0xd6, 0xa6, 0x87, 0x95, 0x34, 0x1d, 0x3e, 0x77, 0x68, 0x39, 0x1e,
	0x2b, 0xf7, 0xc1, 0x1b, 0xdb, 0x76, 0xb9, 0xc1, 0x23, 0xe6, 0x52, 0x78, 0xaa, 0xfb, 0x42, 0xa9,
	0x27, 0xa8, 0x2f, 0xae, 0xfc, 0x3e, 0x9c, 0xba, 0xfb, 0x94, 0x12, 0xc7, 0xc4, 0xc6, 0xa2, 0xa6,
	0x39, 0xc4, 0x75, 0x59, 0xea, 0xa3, 0x3c, 0x4c, 0x61, 0xf1, 0xe8, 0x9d, 0xcc, 0xde, 0x23, 0x5a,
	0x02, 0xd0, 0xed, 0xf6, 0x16, 0x71, 0x5c, 0x26, 0x10, 0x52, 0x5c, 0xc1, 0xbe, 0x12, 0x3e, 0x7b,
	0xd3, 0xfe, 0x92, 0x18, 0xae, 0x66, 0xf5, 0xde, 0x4f, 0xf9, 0xe7, 0x29, 0x38, 0xe1, 0xaf, 0x40,
	0x68, 0xde, 0x53, 0x2c, 0xd2, 0x28, 0xd9, 0x28, 0x54, 0xcb, 0x79, 0x48, 0xdb, 0x96, 0x43, 0xbd,
	0x63, 0x9a, 0xfb, 0x64, 0x57, 0x99, 0x52, 0xca, 0x57, 0xea, 0xd7, 0xe7, 0xae, 0xab, 0xdc, 0x80,
	0xde, 0x81, 0x69, 0xae, 0x97, 0x3a, 0x96, 0xc1, 0x4f, 0xe8, 0x4c, 0xbd, 0x1a, 0xaf, 0x36, 0x56,
	0x1e, 0x78, 0x6e, 0x5e, 0x81, 0xec, 0x87, 0x41, 0x5d, 0x38, 0x43, 0x3c, 0xe2, 0xda, 0x1e, 0x37,
	0xa2, 0xf6, 0xa6, 0xe3, 0x7c, 0x22, 0x04, 0x70, 0xfe, 0xe6, 0x67, 0xd4, 0x53, 0xe4, 0xf0, 0xeb,
	0x46, 0xb6, 0xbf, 0x15, 0xf5, 0x5f, 0x7d, 0x1e, 0x0a, 0x01, 0xc9, 0xd3, 0x12, 0xcd, 0x4b, 0xf4,
	0x5b, 0x09, 0x26, 0x96, 0x09, 0x45, 0xb7, 0xc2, 0xe7, 0x0e, 0xed, 0xef, 0x15, 0x46, 0xef, 0x48,
	0xc9, 0xcd, 0xe7, 0x7f, 0xfa, 0xfb, 0xf7, 0x52, 0x77, 0xd0, 0x22, 0xef, 0x34, 0x96, 0x03, 0x5a,
	0x8d, 0x03, 0xbd, 0xaa, 0xea, 0x07, 0xc3, 0x32, 0xea, 0x43, 0xf4, 0x4b, 0x09, 0xd2, 0x8c, 0x7b,
	0xb4, 0x10, 0xbd, 0x3f, 0x21, 0xed, 0xc3, 0xc2, 0x6b, 0x9f, 0xd6, 0x5d, 0xa4, 0x99, 0x5c, 0xe1,
	0x90, 0x4a, 0xe8, 0x62, 0x3c, 0x48, 0xe8, 0x2f, 0x12, 0x64, 0x44, 0xdb, 0x01, 0xbd, 0x96, 0xac,
	0x39, 0x55, 0x88, 0xae, 0x71, 0xf2, 0xc6, 0x47, 0x7f, 0x9c, 0xbd, 0x11, 0xa7, 0xcf, 0x71, 0x2a,
	0xc0, 0xc8, 0x91, 0x5d, 0x96, 0x63, 0x22, 0xbb, 0x29, 0xcd, 0xa2, 0x7f, 0x4b, 0x90, 0x11, 0xc2,
	0x31, 0x0a, 0x5c, 0x94, 0xc2, 0x8f, 0x03, 0xee, 0x9b, 0x92, 0x40, 0x17, 0x2d, 0x55, 0x87, 0xa2,
	0x5b, 0xaa, 0x27, 0x3f, 0x8a, 0x0c, 0xf8, 0xbf, 0x24, 0xc8, 0x08, 0xa1, 0x19, 0x05, 0x3c, 0x4a,
	0xf9, 0xc6, 0x01, 0xfe, 0x0d, 0x06, 0xfc, 0x66, 0x1c, 0x69, 0x7b, 0xe6, 0x60, 0x0f, 0xe8, 0xee,
	0x86, 0x4d, 0xb7, 0x45, 0x16, 0xce, 0x8e, 0x21, 0x0b, 0xff, 0x2b, 0xc1, 0x24, 0x17, 0xa6, 0x51,
	0x69, 0x18, 0xa1, 0x93, 0xe3, 0xa0, 0xfe, 0x16, 0x43, 0x3d, 0x1f, 0x43, 0x08, 0x87, 0x80, 0x6e,
	0xca, 0xcb, 0xc9, 0xf7, 0xdb, 0xe5, 0x80, 0xff, 0x29, 0x41, 0x9a, 0xa9, 0x59, 0x74, 0x3b, 0x0a,
	0x79, 0x98, 0xb4, 0x8e, 0x03, 0x7c, 0x47, 0x9c, 0xf3, 0x48, 0xed, 0x1c, 0x82, 0xfb, 0x4d, 0x79,
	0x69, 0x1c, 0xb8, 0x2d, 0x1b, 0xfd, 0x34, 0x05, 0x9f, 0x15, 0x1a, 0xd4, 0xa7, 0x98, 0x50, 0x33,
	0x8e, 0xce, 0x8d, 0x25, 0x11, 0xe3, 0x10, 0xf2, 0x13, 0x46, 0xc8, 0x9d, 0x11, 0xb5, 0xf0, 0xd0,
	0x1a, 0xf0, 0x65, 0xb9, 0x95, 0x9c, 0x1b, 0x7c, 0x90, 0x12, 0x56, 0x15, 0x18, 0x57, 0x42, 0x70,
	0x8e, 0xc0, 0xd5, 0x08, 0x72, 0x7a, 0x14, 0xae, 0x46, 0x12, 0xbe, 0x47, 0xcb, 0x95, 0x46, 0x02,
	0xb8, 0xfa, 0xb3, 0x04, 0x2f, 0x1c, 0xf8, 0x94, 0x45, 0x57, 0x23, 0x3f, 0x4f, 0x02, 0x3e, 0xc4,
	0x0b, 0xd7, 0x46, 0xf4, 0xf2, 0x2e, 0xf2, 0xaf, 0x70, 0x80, 0x2d, 0xf4, 0x4e, 0x72, 0x80, 0xdd,
	0x03, 0x38, 0xbe, 0x9b, 0x82, 0xdc, 0xa2, 0xa6, 0xf5, 0x3e, 0x15, 0xd1, 0x9d, 0x88, 0x6c, 0x89,
	0xd3, 0x11, 0x88, 0xb3, 0xf7, 0x3f, 0x60, 0x7b, 0xbf, 0x10, 0x5b, 0x9b, 0x0f, 0xdd, 0x75, 0x55,
	0xbe, 0x37, 0x86, 0x0c, 0xd9, 0x27, 0x80, 0xed, 0xf7, 0x0f, 0x53, 0x30, 0x23, 0x04, 0x71, 0x9f,
	0x96, 0xa5, 0x70, 0x5a, 0xe2, 0xaa, 0xff, 0x38, 0xcc, 0xfc, 0x88, 0x31, 0xf3, 0xfa, 0x28, 0x92,
	0x7c, 0x28, 0x39, 0x8f, 0xe4, 0x07, 0xc9, 0xc9, 0x71, 0x06, 0x98, 0x60, 0xfc, 0xfc, 0x47, 0x82,
	0x19, 0xf6, 0xbc, 0xaf, 0x77, 0xa3, 0xf8, 0x89, 0xab, 0xfb, 0x0b, 0xcb, 0x89, 0xe3, 0x78, 0x29,
	0xf3, 0x90, 0x13, 0x70, 0x1f, 0xad, 0x24, 0x26, 0x60, 0xff, 0x7f, 0x09, 0x6e, 0xe3, 0xed, 0x77,
	0xef, 0x75, 0x75, 0xfa, 0x64, 0x73, 0xad, 0xd2, 0xb1, 0x36, 0xaa, 0x62, 0xa9, 0x65, 0xf1, 0xff,
	0x84, 0xae, 0x55, 0xee, 0x12, 0x93, 0xdf, 0x6f, 0xd5, 0xb0, 0x3f, 0x2e, 0xdc, 0xf2, 0x3f, 0xaf,
	0x65, 0xb8, 0xc3, 0x95, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x0f, 0x06, 0xa5, 0xef, 0x21,
	0x00, 0x00,
}
