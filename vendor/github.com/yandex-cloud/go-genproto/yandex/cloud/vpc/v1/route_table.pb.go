// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/vpc/v1/route_table.proto

package vpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A RouteTable resource. For more information, see [Static Routes](/docs/vpc/concepts/static-routes).
type RouteTable struct {
	// ID of the route table.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the route table belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the route table. The name is unique within the project. 3-63 characters long.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the route table. 0-256 characters long.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `` key:value `` pairs. Мaximum of 64 per resource.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the network the route table belongs to.
	NetworkId string `protobuf:"bytes,7,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// List of static routes.
	StaticRoutes         []*StaticRoute `protobuf:"bytes,8,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RouteTable) Reset()         { *m = RouteTable{} }
func (m *RouteTable) String() string { return proto.CompactTextString(m) }
func (*RouteTable) ProtoMessage()    {}
func (*RouteTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_fefcab5534a5cf97, []int{0}
}

func (m *RouteTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTable.Unmarshal(m, b)
}
func (m *RouteTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTable.Marshal(b, m, deterministic)
}
func (m *RouteTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTable.Merge(m, src)
}
func (m *RouteTable) XXX_Size() int {
	return xxx_messageInfo_RouteTable.Size(m)
}
func (m *RouteTable) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTable.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTable proto.InternalMessageInfo

func (m *RouteTable) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RouteTable) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *RouteTable) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *RouteTable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteTable) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RouteTable) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *RouteTable) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *RouteTable) GetStaticRoutes() []*StaticRoute {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

// A StaticRoute resource. For more information, see [Static Routes](/docs/vpc/concepts/static-routes).
type StaticRoute struct {
	// Types that are valid to be assigned to Destination:
	//	*StaticRoute_DestinationPrefix
	Destination isStaticRoute_Destination `protobuf_oneof:"destination"`
	// Types that are valid to be assigned to NextHop:
	//	*StaticRoute_NextHopAddress
	NextHop isStaticRoute_NextHop `protobuf_oneof:"next_hop"`
	// Resource labels as `` key:value `` pairs. Мaximum of 64 per resource.
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StaticRoute) Reset()         { *m = StaticRoute{} }
func (m *StaticRoute) String() string { return proto.CompactTextString(m) }
func (*StaticRoute) ProtoMessage()    {}
func (*StaticRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_fefcab5534a5cf97, []int{1}
}

func (m *StaticRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticRoute.Unmarshal(m, b)
}
func (m *StaticRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticRoute.Marshal(b, m, deterministic)
}
func (m *StaticRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRoute.Merge(m, src)
}
func (m *StaticRoute) XXX_Size() int {
	return xxx_messageInfo_StaticRoute.Size(m)
}
func (m *StaticRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRoute.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRoute proto.InternalMessageInfo

type isStaticRoute_Destination interface {
	isStaticRoute_Destination()
}

type StaticRoute_DestinationPrefix struct {
	DestinationPrefix string `protobuf:"bytes,1,opt,name=destination_prefix,json=destinationPrefix,proto3,oneof"`
}

func (*StaticRoute_DestinationPrefix) isStaticRoute_Destination() {}

func (m *StaticRoute) GetDestination() isStaticRoute_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *StaticRoute) GetDestinationPrefix() string {
	if x, ok := m.GetDestination().(*StaticRoute_DestinationPrefix); ok {
		return x.DestinationPrefix
	}
	return ""
}

type isStaticRoute_NextHop interface {
	isStaticRoute_NextHop()
}

type StaticRoute_NextHopAddress struct {
	NextHopAddress string `protobuf:"bytes,2,opt,name=next_hop_address,json=nextHopAddress,proto3,oneof"`
}

func (*StaticRoute_NextHopAddress) isStaticRoute_NextHop() {}

func (m *StaticRoute) GetNextHop() isStaticRoute_NextHop {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *StaticRoute) GetNextHopAddress() string {
	if x, ok := m.GetNextHop().(*StaticRoute_NextHopAddress); ok {
		return x.NextHopAddress
	}
	return ""
}

func (m *StaticRoute) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StaticRoute) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StaticRoute_DestinationPrefix)(nil),
		(*StaticRoute_NextHopAddress)(nil),
	}
}

func init() {
	proto.RegisterType((*RouteTable)(nil), "yandex.cloud.vpc.v1.RouteTable")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.vpc.v1.RouteTable.LabelsEntry")
	proto.RegisterType((*StaticRoute)(nil), "yandex.cloud.vpc.v1.StaticRoute")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.vpc.v1.StaticRoute.LabelsEntry")
}

func init() {
	proto.RegisterFile("yandex/cloud/vpc/v1/route_table.proto", fileDescriptor_fefcab5534a5cf97)
}

var fileDescriptor_fefcab5534a5cf97 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0xa5, 0xc9, 0x56, 0xda, 0x2f, 0x6c, 0x1a, 0x06, 0x89, 0xa8, 0x08, 0x11, 0x4d, 0x42, 0xaa,
	0x80, 0x39, 0xda, 0xb8, 0x30, 0x76, 0x5a, 0x61, 0x52, 0x27, 0x71, 0x40, 0x61, 0xe2, 0xc0, 0x25,
	0x72, 0xe2, 0xaf, 0x99, 0xb5, 0x34, 0xb6, 0x62, 0x27, 0xb4, 0x7f, 0x80, 0x33, 0x3f, 0x19, 0xc5,
	0x4e, 0x59, 0x91, 0x2a, 0x71, 0xe0, 0x66, 0x7f, 0xef, 0xf9, 0x3d, 0xbf, 0x97, 0x18, 0x5e, 0xad,
	0x59, 0xc5, 0x71, 0x15, 0xe7, 0xa5, 0x6c, 0x78, 0xdc, 0xaa, 0x3c, 0x6e, 0x4f, 0xe3, 0x5a, 0x36,
	0x06, 0x53, 0xc3, 0xb2, 0x12, 0xa9, 0xaa, 0xa5, 0x91, 0xe4, 0x89, 0xa3, 0x51, 0x4b, 0xa3, 0xad,
	0xca, 0x69, 0x7b, 0x3a, 0x79, 0x59, 0x48, 0x59, 0x94, 0x18, 0x5b, 0x4a, 0xd6, 0x2c, 0x62, 0x23,
	0x96, 0xa8, 0x0d, 0x5b, 0x2a, 0x77, 0xea, 0xf8, 0x97, 0x0f, 0x90, 0x74, 0x5a, 0x37, 0x9d, 0x14,
	0x39, 0x04, 0x4f, 0xf0, 0x70, 0x10, 0x0d, 0xa6, 0xe3, 0xc4, 0x13, 0x9c, 0x3c, 0x87, 0xf1, 0x42,
	0x96, 0x1c, 0xeb, 0x54, 0xf0, 0xd0, 0xb3, 0xe3, 0x91, 0x1b, 0x5c, 0x73, 0x72, 0x0e, 0x90, 0xd7,
	0xc8, 0x0c, 0xf2, 0x94, 0x99, 0xd0, 0x8f, 0x06, 0xd3, 0xe0, 0x6c, 0x42, 0x9d, 0x23, 0xdd, 0x38,
	0xd2, 0x9b, 0x8d, 0x63, 0x32, 0xee, 0xd9, 0x97, 0x86, 0x10, 0xd8, 0xab, 0xd8, 0x12, 0xc3, 0x3d,
	0x2b, 0x69, 0xd7, 0x24, 0x82, 0x80, 0xa3, 0xce, 0x6b, 0xa1, 0x8c, 0x90, 0x55, 0xb8, 0x6f, 0xa1,
	0xed, 0x11, 0xf9, 0x08, 0xc3, 0x92, 0x65, 0x58, 0xea, 0x70, 0x18, 0xf9, 0xd3, 0xe0, 0xec, 0x0d,
	0xdd, 0x91, 0x99, 0xde, 0xc7, 0xa1, 0x9f, 0x2d, 0xfb, 0xaa, 0x32, 0xf5, 0x3a, 0xe9, 0x8f, 0x92,
	0x17, 0x00, 0x15, 0x9a, 0x1f, 0xb2, 0xbe, 0xeb, 0x32, 0x3d, 0xb4, 0x2e, 0xe3, 0x7e, 0x72, 0xcd,
	0xc9, 0x15, 0x1c, 0x68, 0xc3, 0x8c, 0xc8, 0x53, 0x5b, 0xb1, 0x0e, 0x47, 0xd6, 0x2a, 0xda, 0x69,
	0xf5, 0xd5, 0x32, 0xad, 0x61, 0xf2, 0x48, 0xdf, 0x6f, 0xf4, 0xe4, 0x1c, 0x82, 0x2d, 0x73, 0x72,
	0x04, 0xfe, 0x1d, 0xae, 0xfb, 0x62, 0xbb, 0x25, 0x79, 0x0a, 0xfb, 0x2d, 0x2b, 0x1b, 0xec, 0x5b,
	0x75, 0x9b, 0x0f, 0xde, 0xfb, 0xc1, 0xf1, 0x4f, 0x0f, 0x82, 0x2d, 0x61, 0x12, 0x03, 0xe1, 0xa8,
	0x8d, 0xa8, 0x58, 0x57, 0x42, 0xaa, 0x6a, 0x5c, 0x88, 0x95, 0x93, 0x9a, 0x3f, 0x48, 0x1e, 0x6f,
	0x61, 0x5f, 0x2c, 0x44, 0x5e, 0xc3, 0x51, 0x85, 0x2b, 0x93, 0xde, 0x4a, 0x95, 0x32, 0xce, 0x6b,
	0xd4, 0xda, 0xb9, 0xcc, 0x07, 0xc9, 0x61, 0x87, 0xcc, 0xa5, 0xba, 0x74, 0x73, 0xf2, 0xe9, 0x4f,
	0xa5, 0xbe, 0xcd, 0xf9, 0xf6, 0x5f, 0x39, 0x77, 0x75, 0xfa, 0x1f, 0x69, 0x67, 0x07, 0xf6, 0xab,
	0x6f, 0x12, 0xcc, 0x00, 0x46, 0x9b, 0xbb, 0xcf, 0xbe, 0xc1, 0xb3, 0xbf, 0x2e, 0xc3, 0x94, 0xe8,
	0x2f, 0xf4, 0xfd, 0xa2, 0x10, 0xe6, 0xb6, 0xc9, 0x68, 0x2e, 0x97, 0xb1, 0xe3, 0x9c, 0xb8, 0xe7,
	0x51, 0xc8, 0x93, 0x02, 0x2b, 0xfb, 0xf3, 0xc5, 0x3b, 0xde, 0xcd, 0x45, 0xab, 0xf2, 0x6c, 0x68,
	0xe1, 0x77, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x42, 0xfb, 0x64, 0x24, 0x59, 0x03, 0x00, 0x00,
}
