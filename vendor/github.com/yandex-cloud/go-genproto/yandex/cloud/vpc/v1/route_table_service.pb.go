// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/vpc/v1/route_table_service.proto

package vpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRouteTableRequest struct {
	// ID of the RouteTable resource to return.
	// To get the route table ID use a [RouteTableService.List] request.
	RouteTableId         string   `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRouteTableRequest) Reset()         { *m = GetRouteTableRequest{} }
func (m *GetRouteTableRequest) String() string { return proto.CompactTextString(m) }
func (*GetRouteTableRequest) ProtoMessage()    {}
func (*GetRouteTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{0}
}

func (m *GetRouteTableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRouteTableRequest.Unmarshal(m, b)
}
func (m *GetRouteTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRouteTableRequest.Marshal(b, m, deterministic)
}
func (m *GetRouteTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRouteTableRequest.Merge(m, src)
}
func (m *GetRouteTableRequest) XXX_Size() int {
	return xxx_messageInfo_GetRouteTableRequest.Size(m)
}
func (m *GetRouteTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRouteTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRouteTableRequest proto.InternalMessageInfo

func (m *GetRouteTableRequest) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

type ListRouteTablesRequest struct {
	// ID of the folder that the route table belongs to.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListRouteTablesResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListRouteTablesResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [RouteTable.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. The value. Must be 3-63 characters long and match the regular expression `^[a-z][-a-z0-9]{1,61}[a-z0-9]$`.
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRouteTablesRequest) Reset()         { *m = ListRouteTablesRequest{} }
func (m *ListRouteTablesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRouteTablesRequest) ProtoMessage()    {}
func (*ListRouteTablesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{1}
}

func (m *ListRouteTablesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRouteTablesRequest.Unmarshal(m, b)
}
func (m *ListRouteTablesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRouteTablesRequest.Marshal(b, m, deterministic)
}
func (m *ListRouteTablesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRouteTablesRequest.Merge(m, src)
}
func (m *ListRouteTablesRequest) XXX_Size() int {
	return xxx_messageInfo_ListRouteTablesRequest.Size(m)
}
func (m *ListRouteTablesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRouteTablesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRouteTablesRequest proto.InternalMessageInfo

func (m *ListRouteTablesRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *ListRouteTablesRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRouteTablesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListRouteTablesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListRouteTablesResponse struct {
	// List of RouteTable resources.
	RouteTables []*RouteTable `protobuf:"bytes,1,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListRouteTablesRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListRouteTablesRequest.page_token] query parameter
	// in the next list request. Subsequent list requests will have their own
	// [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRouteTablesResponse) Reset()         { *m = ListRouteTablesResponse{} }
func (m *ListRouteTablesResponse) String() string { return proto.CompactTextString(m) }
func (*ListRouteTablesResponse) ProtoMessage()    {}
func (*ListRouteTablesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{2}
}

func (m *ListRouteTablesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRouteTablesResponse.Unmarshal(m, b)
}
func (m *ListRouteTablesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRouteTablesResponse.Marshal(b, m, deterministic)
}
func (m *ListRouteTablesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRouteTablesResponse.Merge(m, src)
}
func (m *ListRouteTablesResponse) XXX_Size() int {
	return xxx_messageInfo_ListRouteTablesResponse.Size(m)
}
func (m *ListRouteTablesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRouteTablesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRouteTablesResponse proto.InternalMessageInfo

func (m *ListRouteTablesResponse) GetRouteTables() []*RouteTable {
	if m != nil {
		return m.RouteTables
	}
	return nil
}

func (m *ListRouteTablesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CreateRouteTableRequest struct {
	// ID of the folder that the route table belongs to.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the route table.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the route table.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels, `` key:value `` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the network the route table belongs to.
	NetworkId string `protobuf:"bytes,5,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// List of static routes.
	StaticRoutes         []*StaticRoute `protobuf:"bytes,6,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateRouteTableRequest) Reset()         { *m = CreateRouteTableRequest{} }
func (m *CreateRouteTableRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRouteTableRequest) ProtoMessage()    {}
func (*CreateRouteTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{3}
}

func (m *CreateRouteTableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRouteTableRequest.Unmarshal(m, b)
}
func (m *CreateRouteTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRouteTableRequest.Marshal(b, m, deterministic)
}
func (m *CreateRouteTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRouteTableRequest.Merge(m, src)
}
func (m *CreateRouteTableRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRouteTableRequest.Size(m)
}
func (m *CreateRouteTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRouteTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRouteTableRequest proto.InternalMessageInfo

func (m *CreateRouteTableRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *CreateRouteTableRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRouteTableRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateRouteTableRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateRouteTableRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *CreateRouteTableRequest) GetStaticRoutes() []*StaticRoute {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

type CreateRouteTableMetadata struct {
	// ID of the route table that is being created.
	RouteTableId         string   `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRouteTableMetadata) Reset()         { *m = CreateRouteTableMetadata{} }
func (m *CreateRouteTableMetadata) String() string { return proto.CompactTextString(m) }
func (*CreateRouteTableMetadata) ProtoMessage()    {}
func (*CreateRouteTableMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{4}
}

func (m *CreateRouteTableMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRouteTableMetadata.Unmarshal(m, b)
}
func (m *CreateRouteTableMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRouteTableMetadata.Marshal(b, m, deterministic)
}
func (m *CreateRouteTableMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRouteTableMetadata.Merge(m, src)
}
func (m *CreateRouteTableMetadata) XXX_Size() int {
	return xxx_messageInfo_CreateRouteTableMetadata.Size(m)
}
func (m *CreateRouteTableMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRouteTableMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRouteTableMetadata proto.InternalMessageInfo

func (m *CreateRouteTableMetadata) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

type UpdateRouteTableRequest struct {
	// ID of the RouteTable resource to update.
	RouteTableId string `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	// Field mask that specifies which fields of the RouteTable resource are going to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the route table.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the route table.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `` key:value `` pairs.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of static routes.
	StaticRoutes         []*StaticRoute `protobuf:"bytes,6,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateRouteTableRequest) Reset()         { *m = UpdateRouteTableRequest{} }
func (m *UpdateRouteTableRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRouteTableRequest) ProtoMessage()    {}
func (*UpdateRouteTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{5}
}

func (m *UpdateRouteTableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRouteTableRequest.Unmarshal(m, b)
}
func (m *UpdateRouteTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRouteTableRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRouteTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRouteTableRequest.Merge(m, src)
}
func (m *UpdateRouteTableRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRouteTableRequest.Size(m)
}
func (m *UpdateRouteTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRouteTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRouteTableRequest proto.InternalMessageInfo

func (m *UpdateRouteTableRequest) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

func (m *UpdateRouteTableRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateRouteTableRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRouteTableRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateRouteTableRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UpdateRouteTableRequest) GetStaticRoutes() []*StaticRoute {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

type UpdateRouteTableMetadata struct {
	// ID of the RouteTable resource that is being updated.
	RouteTableId         string   `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRouteTableMetadata) Reset()         { *m = UpdateRouteTableMetadata{} }
func (m *UpdateRouteTableMetadata) String() string { return proto.CompactTextString(m) }
func (*UpdateRouteTableMetadata) ProtoMessage()    {}
func (*UpdateRouteTableMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{6}
}

func (m *UpdateRouteTableMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRouteTableMetadata.Unmarshal(m, b)
}
func (m *UpdateRouteTableMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRouteTableMetadata.Marshal(b, m, deterministic)
}
func (m *UpdateRouteTableMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRouteTableMetadata.Merge(m, src)
}
func (m *UpdateRouteTableMetadata) XXX_Size() int {
	return xxx_messageInfo_UpdateRouteTableMetadata.Size(m)
}
func (m *UpdateRouteTableMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRouteTableMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRouteTableMetadata proto.InternalMessageInfo

func (m *UpdateRouteTableMetadata) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

type DeleteRouteTableRequest struct {
	// ID of the route table to delete.
	// To get the route table ID use a [RouteTableService.List] request.
	RouteTableId         string   `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRouteTableRequest) Reset()         { *m = DeleteRouteTableRequest{} }
func (m *DeleteRouteTableRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRouteTableRequest) ProtoMessage()    {}
func (*DeleteRouteTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{7}
}

func (m *DeleteRouteTableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRouteTableRequest.Unmarshal(m, b)
}
func (m *DeleteRouteTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRouteTableRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRouteTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRouteTableRequest.Merge(m, src)
}
func (m *DeleteRouteTableRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRouteTableRequest.Size(m)
}
func (m *DeleteRouteTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRouteTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRouteTableRequest proto.InternalMessageInfo

func (m *DeleteRouteTableRequest) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

type DeleteRouteTableMetadata struct {
	// ID of the RouteTable resource that is being deleted.
	RouteTableId         string   `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRouteTableMetadata) Reset()         { *m = DeleteRouteTableMetadata{} }
func (m *DeleteRouteTableMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteRouteTableMetadata) ProtoMessage()    {}
func (*DeleteRouteTableMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{8}
}

func (m *DeleteRouteTableMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRouteTableMetadata.Unmarshal(m, b)
}
func (m *DeleteRouteTableMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRouteTableMetadata.Marshal(b, m, deterministic)
}
func (m *DeleteRouteTableMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRouteTableMetadata.Merge(m, src)
}
func (m *DeleteRouteTableMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteRouteTableMetadata.Size(m)
}
func (m *DeleteRouteTableMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRouteTableMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRouteTableMetadata proto.InternalMessageInfo

func (m *DeleteRouteTableMetadata) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

type ListRouteTableOperationsRequest struct {
	// ID of the RouteTable resource to list operations for.
	RouteTableId string `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than [page_size], the service returns a [ListRouteTableOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListRouteTableOperationsResponse.next_page_token] returned by a previous list request.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRouteTableOperationsRequest) Reset()         { *m = ListRouteTableOperationsRequest{} }
func (m *ListRouteTableOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListRouteTableOperationsRequest) ProtoMessage()    {}
func (*ListRouteTableOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{9}
}

func (m *ListRouteTableOperationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRouteTableOperationsRequest.Unmarshal(m, b)
}
func (m *ListRouteTableOperationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRouteTableOperationsRequest.Marshal(b, m, deterministic)
}
func (m *ListRouteTableOperationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRouteTableOperationsRequest.Merge(m, src)
}
func (m *ListRouteTableOperationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListRouteTableOperationsRequest.Size(m)
}
func (m *ListRouteTableOperationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRouteTableOperationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRouteTableOperationsRequest proto.InternalMessageInfo

func (m *ListRouteTableOperationsRequest) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

func (m *ListRouteTableOperationsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRouteTableOperationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListRouteTableOperationsResponse struct {
	// List of operations for the specified RouteTable resource.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListRouteTableOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListRouteTableOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRouteTableOperationsResponse) Reset()         { *m = ListRouteTableOperationsResponse{} }
func (m *ListRouteTableOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListRouteTableOperationsResponse) ProtoMessage()    {}
func (*ListRouteTableOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{10}
}

func (m *ListRouteTableOperationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRouteTableOperationsResponse.Unmarshal(m, b)
}
func (m *ListRouteTableOperationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRouteTableOperationsResponse.Marshal(b, m, deterministic)
}
func (m *ListRouteTableOperationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRouteTableOperationsResponse.Merge(m, src)
}
func (m *ListRouteTableOperationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListRouteTableOperationsResponse.Size(m)
}
func (m *ListRouteTableOperationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRouteTableOperationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRouteTableOperationsResponse proto.InternalMessageInfo

func (m *ListRouteTableOperationsResponse) GetOperations() []*operation.Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *ListRouteTableOperationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type MoveRouteTableRequest struct {
	// ID of the RouteTable resource to move.
	RouteTableId string `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId  string   `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveRouteTableRequest) Reset()         { *m = MoveRouteTableRequest{} }
func (m *MoveRouteTableRequest) String() string { return proto.CompactTextString(m) }
func (*MoveRouteTableRequest) ProtoMessage()    {}
func (*MoveRouteTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{11}
}

func (m *MoveRouteTableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveRouteTableRequest.Unmarshal(m, b)
}
func (m *MoveRouteTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveRouteTableRequest.Marshal(b, m, deterministic)
}
func (m *MoveRouteTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveRouteTableRequest.Merge(m, src)
}
func (m *MoveRouteTableRequest) XXX_Size() int {
	return xxx_messageInfo_MoveRouteTableRequest.Size(m)
}
func (m *MoveRouteTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveRouteTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoveRouteTableRequest proto.InternalMessageInfo

func (m *MoveRouteTableRequest) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

func (m *MoveRouteTableRequest) GetDestinationFolderId() string {
	if m != nil {
		return m.DestinationFolderId
	}
	return ""
}

type MoveRouteTableMetadata struct {
	// ID of the RouteTable resource that is being moved.
	RouteTableId         string   `protobuf:"bytes,1,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveRouteTableMetadata) Reset()         { *m = MoveRouteTableMetadata{} }
func (m *MoveRouteTableMetadata) String() string { return proto.CompactTextString(m) }
func (*MoveRouteTableMetadata) ProtoMessage()    {}
func (*MoveRouteTableMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bfefbf6833abb34, []int{12}
}

func (m *MoveRouteTableMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveRouteTableMetadata.Unmarshal(m, b)
}
func (m *MoveRouteTableMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveRouteTableMetadata.Marshal(b, m, deterministic)
}
func (m *MoveRouteTableMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveRouteTableMetadata.Merge(m, src)
}
func (m *MoveRouteTableMetadata) XXX_Size() int {
	return xxx_messageInfo_MoveRouteTableMetadata.Size(m)
}
func (m *MoveRouteTableMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveRouteTableMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MoveRouteTableMetadata proto.InternalMessageInfo

func (m *MoveRouteTableMetadata) GetRouteTableId() string {
	if m != nil {
		return m.RouteTableId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRouteTableRequest)(nil), "yandex.cloud.vpc.v1.GetRouteTableRequest")
	proto.RegisterType((*ListRouteTablesRequest)(nil), "yandex.cloud.vpc.v1.ListRouteTablesRequest")
	proto.RegisterType((*ListRouteTablesResponse)(nil), "yandex.cloud.vpc.v1.ListRouteTablesResponse")
	proto.RegisterType((*CreateRouteTableRequest)(nil), "yandex.cloud.vpc.v1.CreateRouteTableRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.vpc.v1.CreateRouteTableRequest.LabelsEntry")
	proto.RegisterType((*CreateRouteTableMetadata)(nil), "yandex.cloud.vpc.v1.CreateRouteTableMetadata")
	proto.RegisterType((*UpdateRouteTableRequest)(nil), "yandex.cloud.vpc.v1.UpdateRouteTableRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.vpc.v1.UpdateRouteTableRequest.LabelsEntry")
	proto.RegisterType((*UpdateRouteTableMetadata)(nil), "yandex.cloud.vpc.v1.UpdateRouteTableMetadata")
	proto.RegisterType((*DeleteRouteTableRequest)(nil), "yandex.cloud.vpc.v1.DeleteRouteTableRequest")
	proto.RegisterType((*DeleteRouteTableMetadata)(nil), "yandex.cloud.vpc.v1.DeleteRouteTableMetadata")
	proto.RegisterType((*ListRouteTableOperationsRequest)(nil), "yandex.cloud.vpc.v1.ListRouteTableOperationsRequest")
	proto.RegisterType((*ListRouteTableOperationsResponse)(nil), "yandex.cloud.vpc.v1.ListRouteTableOperationsResponse")
	proto.RegisterType((*MoveRouteTableRequest)(nil), "yandex.cloud.vpc.v1.MoveRouteTableRequest")
	proto.RegisterType((*MoveRouteTableMetadata)(nil), "yandex.cloud.vpc.v1.MoveRouteTableMetadata")
}

func init() {
	proto.RegisterFile("yandex/cloud/vpc/v1/route_table_service.proto", fileDescriptor_9bfefbf6833abb34)
}

var fileDescriptor_9bfefbf6833abb34 = []byte{
	// 1119 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xc1, 0x6f, 0xdb, 0x54,
	0x18, 0x97, 0x9b, 0x34, 0x5a, 0xbe, 0x74, 0x63, 0xbc, 0xad, 0x6b, 0x14, 0x98, 0x96, 0x59, 0xa5,
	0xb4, 0x69, 0x6d, 0xc7, 0xd9, 0x5a, 0xd6, 0x76, 0x83, 0x11, 0xe8, 0x46, 0xd1, 0x2a, 0x90, 0x3b,
	0x90, 0xa0, 0x4c, 0xd1, 0x6b, 0xfc, 0x1a, 0xac, 0x38, 0xb6, 0xf1, 0x73, 0xc2, 0xda, 0x31, 0x90,
	0x26, 0xb8, 0x54, 0xda, 0x01, 0xf1, 0x07, 0x70, 0xe0, 0xc2, 0xb9, 0x20, 0x0e, 0x88, 0x7b, 0x7b,
	0x2e, 0xff, 0x02, 0x07, 0x24, 0x6e, 0x3b, 0x72, 0x42, 0x7e, 0x76, 0x12, 0x3b, 0xb5, 0x5b, 0x87,
	0x15, 0x89, 0x9b, 0x9d, 0xef, 0x7b, 0xbf, 0xfc, 0xbe, 0xef, 0xfd, 0xde, 0xef, 0x7b, 0x06, 0x61,
	0x1b, 0x1b, 0x2a, 0x79, 0x28, 0xd5, 0x75, 0xb3, 0xad, 0x4a, 0x1d, 0xab, 0x2e, 0x75, 0x64, 0xc9,
	0x36, 0xdb, 0x0e, 0xa9, 0x39, 0x78, 0x53, 0x27, 0x35, 0x4a, 0xec, 0x8e, 0x56, 0x27, 0xa2, 0x65,
	0x9b, 0x8e, 0x89, 0x2e, 0x78, 0xe9, 0x22, 0x4b, 0x17, 0x3b, 0x56, 0x5d, 0xec, 0xc8, 0x85, 0x97,
	0x1b, 0xa6, 0xd9, 0xd0, 0x89, 0x84, 0x2d, 0x4d, 0xc2, 0x86, 0x61, 0x3a, 0xd8, 0xd1, 0x4c, 0x83,
	0x7a, 0x4b, 0x0a, 0x45, 0x3f, 0xca, 0xde, 0x36, 0xdb, 0x5b, 0xd2, 0x96, 0x46, 0x74, 0xb5, 0xd6,
	0xc2, 0xb4, 0xd9, 0xcd, 0x08, 0x71, 0x70, 0x51, 0x4c, 0x8b, 0xd8, 0x0c, 0xc4, 0xcf, 0x78, 0xe5,
	0x04, 0x96, 0x7e, 0xda, 0x54, 0x28, 0xad, 0x07, 0x72, 0x04, 0xee, 0x72, 0x18, 0x0e, 0xeb, 0x9a,
	0x1a, 0x08, 0xf3, 0xef, 0xc2, 0xc5, 0xbb, 0xc4, 0x51, 0x5c, 0xf8, 0xfb, 0x2e, 0xba, 0x42, 0x3e,
	0x6b, 0x13, 0xea, 0xa0, 0x0a, 0x9c, 0x0b, 0x76, 0x46, 0x53, 0xf3, 0x5c, 0x91, 0x9b, 0xce, 0x56,
	0xc7, 0xfe, 0xdc, 0x97, 0xb9, 0xdd, 0x03, 0x39, 0x7d, 0xf3, 0xd6, 0x7c, 0x59, 0x19, 0xb3, 0x7b,
	0x0b, 0x57, 0x55, 0xfe, 0x57, 0x0e, 0x2e, 0xdd, 0xd3, 0x68, 0x00, 0x8d, 0x76, 0xe1, 0x66, 0x20,
	0xbb, 0x65, 0xea, 0x2a, 0xb1, 0xe3, 0x90, 0xce, 0x78, 0xe1, 0x55, 0x15, 0xbd, 0x0a, 0x59, 0x0b,
	0x37, 0x48, 0x8d, 0x6a, 0x3b, 0x24, 0x3f, 0x52, 0xe4, 0xa6, 0x53, 0x55, 0xf8, 0x7b, 0x5f, 0xce,
	0xdc, 0xbc, 0x25, 0x97, 0xcb, 0x65, 0xe5, 0x8c, 0x1b, 0x5c, 0xd7, 0x76, 0x08, 0x9a, 0x06, 0x60,
	0x89, 0x8e, 0xd9, 0x24, 0x46, 0x3e, 0xc5, 0x40, 0xb3, 0xbb, 0x07, 0xf2, 0x28, 0xcb, 0x54, 0x18,
	0xca, 0x7d, 0x37, 0x86, 0x78, 0xc8, 0x6c, 0x69, 0xba, 0x43, 0xec, 0x7c, 0x9a, 0x65, 0xc1, 0xee,
	0x41, 0x0f, 0xcf, 0x8f, 0xf0, 0xdf, 0x70, 0x30, 0x71, 0x84, 0x3c, 0xb5, 0x4c, 0x83, 0x12, 0x54,
	0x85, 0xb1, 0x40, 0x33, 0x68, 0x9e, 0x2b, 0xa6, 0xa6, 0x73, 0x95, 0x2b, 0x62, 0x84, 0x40, 0xc4,
	0x40, 0x2b, 0x73, 0xfd, 0xee, 0x50, 0x34, 0x05, 0x2f, 0x18, 0xe4, 0xa1, 0x53, 0x0b, 0x50, 0x76,
	0x8b, 0xcb, 0x2a, 0x67, 0xdd, 0x9f, 0xdf, 0xef, 0x72, 0xe5, 0xff, 0x4a, 0xc1, 0xc4, 0x5b, 0x36,
	0xc1, 0x0e, 0x39, 0xba, 0x29, 0x43, 0x74, 0x71, 0x1e, 0xd2, 0x06, 0x6e, 0x79, 0x0d, 0xcc, 0x56,
	0xaf, 0x3e, 0xdb, 0x97, 0x2f, 0x7f, 0xb1, 0x81, 0x85, 0x9d, 0x07, 0x1b, 0x02, 0x16, 0x76, 0xca,
	0xc2, 0xe2, 0x83, 0x47, 0xf2, 0xdc, 0x82, 0xfc, 0x78, 0xc3, 0x7f, 0x53, 0x58, 0x3a, 0x9a, 0x85,
	0x9c, 0x4a, 0x68, 0xdd, 0xd6, 0x2c, 0x57, 0x23, 0xe1, 0xa6, 0x56, 0xe6, 0x17, 0x94, 0x60, 0x14,
	0x7d, 0xcb, 0x41, 0x46, 0xc7, 0x9b, 0x44, 0xa7, 0xf9, 0x34, 0xeb, 0xc8, 0x8d, 0xc8, 0x8e, 0xc4,
	0x54, 0x23, 0xde, 0x63, 0x4b, 0x57, 0x0c, 0xc7, 0xde, 0xae, 0xbe, 0xf1, 0x6c, 0x5f, 0xce, 0x6d,
	0x08, 0xb5, 0xb2, 0xb0, 0xe8, 0x92, 0x2c, 0x3d, 0x61, 0x15, 0x2d, 0x5c, 0xf7, 0x2a, 0x5b, 0xb8,
	0xb6, 0x77, 0x20, 0x67, 0x0a, 0x69, 0x59, 0x60, 0x4f, 0x08, 0x9d, 0xf7, 0x4b, 0xe9, 0xe5, 0x2b,
	0x3e, 0x11, 0x34, 0x0b, 0x60, 0x10, 0xe7, 0x73, 0xd3, 0x6e, 0xba, 0x3d, 0x1a, 0x8d, 0xe8, 0x51,
	0xd6, 0x8f, 0xaf, 0xaa, 0x68, 0x05, 0xce, 0x52, 0xf7, 0x00, 0xd7, 0x6b, 0x6c, 0xa7, 0x68, 0x3e,
	0xc3, 0xca, 0x28, 0x46, 0x96, 0xb1, 0xce, 0x32, 0x59, 0x19, 0xca, 0x18, 0xed, 0xbf, 0xd0, 0xc2,
	0x22, 0xe4, 0x02, 0xb5, 0xa0, 0xf3, 0x90, 0x6a, 0x92, 0x6d, 0x6f, 0x7f, 0x14, 0xf7, 0x11, 0x5d,
	0x84, 0xd1, 0x0e, 0xd6, 0xdb, 0xfe, 0x6e, 0x28, 0xde, 0xcb, 0xd2, 0xc8, 0x0d, 0x8e, 0xbf, 0x0d,
	0xf9, 0xc1, 0xf6, 0xac, 0x11, 0x07, 0xab, 0xd8, 0xc1, 0x68, 0x32, 0xfa, 0x08, 0x0e, 0x1c, 0xba,
	0xaf, 0xd3, 0x30, 0xf1, 0x81, 0xa5, 0x46, 0xea, 0xe5, 0x5f, 0x1c, 0x62, 0xb4, 0x0c, 0xb9, 0x36,
	0x83, 0x63, 0xae, 0xc5, 0x18, 0xe7, 0x2a, 0x05, 0xd1, 0x33, 0x36, 0xb1, 0x6b, 0x6c, 0xe2, 0x1d,
	0xd7, 0xd8, 0xd6, 0x30, 0x6d, 0x2a, 0xe0, 0xa5, 0xbb, 0xcf, 0x3d, 0xd5, 0xa5, 0x9e, 0x4b, 0x75,
	0xe9, 0xa4, 0xaa, 0x1b, 0x3d, 0x46, 0x75, 0x31, 0x3d, 0xf9, 0x6f, 0x54, 0xf7, 0xbf, 0x10, 0xd2,
	0x60, 0xc5, 0x43, 0x0a, 0x69, 0x0d, 0x26, 0xde, 0x26, 0x3a, 0x39, 0x25, 0x1d, 0xb9, 0x84, 0x06,
	0xe1, 0x86, 0x24, 0xf4, 0x23, 0x07, 0x57, 0xc2, 0x8e, 0xfc, 0x5e, 0x77, 0xb6, 0xd1, 0xe7, 0x51,
	0xf8, 0xe9, 0x0f, 0x18, 0xfe, 0x29, 0x07, 0xc5, 0x78, 0xaa, 0xfe, 0x14, 0x79, 0x13, 0xa0, 0x37,
	0x9c, 0xbb, 0x33, 0xe4, 0x6a, 0x58, 0x21, 0xfd, 0xe1, 0xdd, 0x5b, 0xaf, 0x04, 0x16, 0x25, 0x1e,
	0x22, 0x4f, 0x39, 0x18, 0x5f, 0x33, 0x3b, 0xa7, 0x64, 0x09, 0xb7, 0x61, 0x5c, 0x25, 0xd4, 0xd1,
	0x0c, 0xc6, 0xa2, 0xd6, 0x1f, 0x41, 0x23, 0x11, 0x4b, 0x2f, 0x04, 0x52, 0xef, 0xf8, 0xd3, 0x88,
	0x7f, 0x1d, 0x2e, 0x85, 0xe9, 0x0c, 0x27, 0x85, 0xca, 0xf7, 0x59, 0x78, 0xb1, 0xbf, 0x78, 0xdd,
	0xbb, 0xa6, 0xa1, 0xaf, 0x20, 0x75, 0x97, 0x38, 0x68, 0x26, 0xf2, 0x94, 0x45, 0xdd, 0x6a, 0x0a,
	0x27, 0x8d, 0x6c, 0x7e, 0xee, 0xc9, 0xef, 0x7f, 0x7c, 0x37, 0x32, 0x85, 0x26, 0x43, 0x17, 0x2f,
	0x6f, 0x84, 0x4b, 0x8f, 0xc2, 0x4c, 0x1f, 0xa3, 0x2f, 0x21, 0xed, 0xee, 0x3a, 0x9a, 0x8d, 0x84,
	0x8d, 0xbe, 0x0a, 0x15, 0xe6, 0x92, 0x25, 0x7b, 0xa2, 0xe1, 0x5f, 0x62, 0x84, 0xc6, 0xd1, 0x85,
	0x08, 0x42, 0xe8, 0x07, 0x0e, 0x32, 0xde, 0xf8, 0x40, 0x73, 0xc3, 0x8c, 0xde, 0xc2, 0xc9, 0xb2,
	0xe3, 0xdf, 0xd9, 0x3b, 0x2c, 0x4d, 0x1d, 0x33, 0x9d, 0xa0, 0xff, 0x1b, 0xa3, 0x98, 0xe7, 0xa3,
	0x28, 0x2e, 0x71, 0x25, 0xf4, 0x33, 0x07, 0x19, 0xcf, 0x9b, 0x62, 0x58, 0xc6, 0x58, 0x75, 0x12,
	0x96, 0x1f, 0x79, 0x2c, 0x63, 0xad, 0x6f, 0x90, 0xe5, 0x4c, 0x25, 0xd1, 0xce, 0xba, 0xb4, 0x7f,
	0xe3, 0x20, 0xe3, 0x39, 0x58, 0x0c, 0xed, 0x18, 0xb7, 0x4c, 0x42, 0x1b, 0xef, 0x1d, 0x96, 0xe4,
	0x63, 0x0c, 0x72, 0x7c, 0x70, 0xdc, 0xae, 0xb4, 0x2c, 0x67, 0xdb, 0xd3, 0x66, 0x29, 0x99, 0x36,
	0x7f, 0xe1, 0xe0, 0x9c, 0x2b, 0xaa, 0xbe, 0x11, 0xa1, 0xeb, 0x09, 0x94, 0x77, 0xc4, 0x62, 0x0b,
	0xf3, 0x43, 0xae, 0xf2, 0x85, 0xfb, 0x1a, 0x63, 0x2b, 0x23, 0x29, 0x09, 0x5b, 0x29, 0xe0, 0x71,
	0x3f, 0x71, 0x90, 0x76, 0xcd, 0x02, 0x95, 0x22, 0xff, 0x38, 0xd2, 0xd6, 0x92, 0xf4, 0xfc, 0x93,
	0xbd, 0xc3, 0xd2, 0x64, 0xac, 0x0f, 0x0d, 0x0a, 0x45, 0xe4, 0x67, 0x12, 0x09, 0xa5, 0x65, 0x76,
	0xc8, 0x12, 0x57, 0xaa, 0x7e, 0x08, 0x13, 0x21, 0x06, 0xd8, 0xd2, 0x7c, 0xc6, 0x1f, 0x2f, 0x37,
	0x34, 0xe7, 0xd3, 0xf6, 0xa6, 0x58, 0x37, 0x5b, 0x92, 0x97, 0x23, 0x78, 0x1f, 0x63, 0x0d, 0x53,
	0x68, 0x10, 0x83, 0xed, 0xb1, 0x14, 0xf1, 0xd1, 0xb7, 0xdc, 0xb1, 0xea, 0x9b, 0x19, 0x16, 0xbe,
	0xf6, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0x53, 0x1c, 0xa1, 0xbc, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RouteTableServiceClient is the client API for RouteTableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouteTableServiceClient interface {
	// Returns the specified RouteTable resource.
	//
	// To get the list of available RouteTable resources, make a [List] request.
	Get(ctx context.Context, in *GetRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	// Retrieves the list of RouteTable resources in the specified folder.
	List(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error)
	// Creates a route table in the specified folder and network.
	// Method starts an asynchronous operation that can be cancelled while it is in progress.
	Create(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified route table.
	// Method starts an asynchronous operation that can be cancelled while it is in progress.
	Update(ctx context.Context, in *UpdateRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified route table.
	Delete(ctx context.Context, in *DeleteRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// List operations for the specified route table.
	ListOperations(ctx context.Context, in *ListRouteTableOperationsRequest, opts ...grpc.CallOption) (*ListRouteTableOperationsResponse, error)
	// Move route table to another folder.
	Move(ctx context.Context, in *MoveRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type routeTableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteTableServiceClient(cc grpc.ClientConnInterface) RouteTableServiceClient {
	return &routeTableServiceClient{cc}
}

func (c *routeTableServiceClient) Get(ctx context.Context, in *GetRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, "/yandex.cloud.vpc.v1.RouteTableService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTableServiceClient) List(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error) {
	out := new(ListRouteTablesResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.vpc.v1.RouteTableService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTableServiceClient) Create(ctx context.Context, in *CreateRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.vpc.v1.RouteTableService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTableServiceClient) Update(ctx context.Context, in *UpdateRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.vpc.v1.RouteTableService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTableServiceClient) Delete(ctx context.Context, in *DeleteRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.vpc.v1.RouteTableService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTableServiceClient) ListOperations(ctx context.Context, in *ListRouteTableOperationsRequest, opts ...grpc.CallOption) (*ListRouteTableOperationsResponse, error) {
	out := new(ListRouteTableOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.vpc.v1.RouteTableService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTableServiceClient) Move(ctx context.Context, in *MoveRouteTableRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.vpc.v1.RouteTableService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteTableServiceServer is the server API for RouteTableService service.
type RouteTableServiceServer interface {
	// Returns the specified RouteTable resource.
	//
	// To get the list of available RouteTable resources, make a [List] request.
	Get(context.Context, *GetRouteTableRequest) (*RouteTable, error)
	// Retrieves the list of RouteTable resources in the specified folder.
	List(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error)
	// Creates a route table in the specified folder and network.
	// Method starts an asynchronous operation that can be cancelled while it is in progress.
	Create(context.Context, *CreateRouteTableRequest) (*operation.Operation, error)
	// Updates the specified route table.
	// Method starts an asynchronous operation that can be cancelled while it is in progress.
	Update(context.Context, *UpdateRouteTableRequest) (*operation.Operation, error)
	// Deletes the specified route table.
	Delete(context.Context, *DeleteRouteTableRequest) (*operation.Operation, error)
	// List operations for the specified route table.
	ListOperations(context.Context, *ListRouteTableOperationsRequest) (*ListRouteTableOperationsResponse, error)
	// Move route table to another folder.
	Move(context.Context, *MoveRouteTableRequest) (*operation.Operation, error)
}

// UnimplementedRouteTableServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRouteTableServiceServer struct {
}

func (*UnimplementedRouteTableServiceServer) Get(ctx context.Context, req *GetRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRouteTableServiceServer) List(ctx context.Context, req *ListRouteTablesRequest) (*ListRouteTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRouteTableServiceServer) Create(ctx context.Context, req *CreateRouteTableRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRouteTableServiceServer) Update(ctx context.Context, req *UpdateRouteTableRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRouteTableServiceServer) Delete(ctx context.Context, req *DeleteRouteTableRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedRouteTableServiceServer) ListOperations(ctx context.Context, req *ListRouteTableOperationsRequest) (*ListRouteTableOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (*UnimplementedRouteTableServiceServer) Move(ctx context.Context, req *MoveRouteTableRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}

func RegisterRouteTableServiceServer(s *grpc.Server, srv RouteTableServiceServer) {
	s.RegisterService(&_RouteTableService_serviceDesc, srv)
}

func _RouteTableService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTableServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.vpc.v1.RouteTableService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTableServiceServer).Get(ctx, req.(*GetRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTableService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTableServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.vpc.v1.RouteTableService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTableServiceServer).List(ctx, req.(*ListRouteTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTableService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTableServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.vpc.v1.RouteTableService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTableServiceServer).Create(ctx, req.(*CreateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTableService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTableServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.vpc.v1.RouteTableService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTableServiceServer).Update(ctx, req.(*UpdateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTableService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTableServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.vpc.v1.RouteTableService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTableServiceServer).Delete(ctx, req.(*DeleteRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTableService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteTableOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTableServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.vpc.v1.RouteTableService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTableServiceServer).ListOperations(ctx, req.(*ListRouteTableOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTableService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTableServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.vpc.v1.RouteTableService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTableServiceServer).Move(ctx, req.(*MoveRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteTableService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.vpc.v1.RouteTableService",
	HandlerType: (*RouteTableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RouteTableService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RouteTableService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RouteTableService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RouteTableService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RouteTableService_Delete_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _RouteTableService_ListOperations_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _RouteTableService_Move_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/vpc/v1/route_table_service.proto",
}
